using System;
using System.Web.Mvc;

using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
//using System.Web.Http;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
using System.Data.Common;
using System.Web.Http.Description;
using SSG.Data;
using SSGMVC.Models;
using System.Data.SqlClient;
using System.Configuration;
using System.Text.RegularExpressions;

//using System;
//using System.Web.Mvc;  // MVC specific
//using System.Collections.Generic;
//using System.Data;
//using System.Globalization;
//using System.Linq;
//using System.Reflection;
//using System.Data.SqlClient;  // For database interaction
//using System.Configuration;


//namespace SSGAPI.Controllers
namespace SSGMVC.Controllers
{
    public class EmployeeController : Controller
    {

        CultureInfo cul = new CultureInfo("gu-IN", true);
        // GET api/<controller>
        //string Connection = "Data Source=stem.arvixe.com;Initial Catalog=SHG_db;Persist Security Info=True;User ID=accounter;Password=12345";// System.Configuration.ConfigurationManager.AppSettings["CollageManagement"].ToString();

        string Connection = ConfigurationManager.ConnectionStrings["SSGConnectionString"].ConnectionString;
        //public  string Connection = "";

        public EmployeeController()
        {
            try
            {
                //Connection = @"Data Source=DESKTOP-LBD20SK\SQLEXPRESS;Initial Catalog=SHG;Integrated Security=True";
            }
            catch (Exception ex)
            {
                Console.Write(ex.ToString());
            }

            //Connection = Connection;
            // Connection = "Data Source=stem.arvixe.com;Initial Catalog=SGH_db;Persist Security Info=True;;User Id=accounter;Password=12345";
            // Connection = "Database=" + "SGH_db" + ";Server=" + "stem.arvixe.com" + "; User id=" + "accounter" + ";Password=" + "12345" + ";Connect Timeout=8000000";

        }

        //public string EmployeeRegistration()
        //{
        //    //string MyString = "Database=" + strDatabaseName + ";Server=" + Connection + "; User id=" + strDBUserName + ";password=" + strDBUserPassword + ";Connect Timeout=8000000";
        //    string MyString = Connection;// "Data Source=HP-PC;Initial Catalog=SSG;User ID=sa;Password=hesh";// "Data Source=HP-PC;Initial Catalog=SSG;User ID=sa;Password=hesh";
        //    return MyString;
        //}
        private DbType ConvertNullableIntoDatatype(PropertyInfo PropInfoCol)
        {
            DbType dbt = new DbType();
            if (PropInfoCol.PropertyType.Name.Contains("Nullable"))
            {
                if (PropInfoCol.Name == "DbId" || PropInfoCol.Name == "DBId")
                {
                    dbt = DbType.Int32;
                }
                else
                {
                    if (PropInfoCol.PropertyType.ToString().Contains("DateTime"))
                    {
                        dbt = DbType.DateTime;
                    }
                    else if (PropInfoCol.PropertyType.ToString().Contains("Int32"))
                    {
                        dbt = DbType.Int32;
                    }
                    else if (PropInfoCol.PropertyType.ToString().Contains("Int64"))
                    {
                        dbt = DbType.Int64;
                    }
                    else if (PropInfoCol.PropertyType.ToString().Contains("Decimal"))
                    {
                        dbt = DbType.Decimal;
                    }

                    else if (PropInfoCol.PropertyType.ToString().Contains("Byte[]") && !(PropInfoCol.PropertyType.ToString().Contains("Byte")))
                    {
                        dbt = DbType.Binary;
                    }
                    else if ((PropInfoCol.PropertyType.ToString().Contains("Byte")) && !(PropInfoCol.PropertyType.ToString().Contains("Byte[]")))
                    {
                        dbt = DbType.Byte;
                    }

                    //else if (PropInfoCol.PropertyType.ToString().Contains("Byte"))
                    //{
                    //    dbt = DbType.Byte;
                    //}
                    else if (PropInfoCol.PropertyType.ToString().Contains("bool"))
                    {
                        dbt = DbType.Boolean;
                    }
                    else if (PropInfoCol.PropertyType.ToString().Contains("String"))
                    {
                        dbt = DbType.String;
                    }
                    else if (PropInfoCol.PropertyType.ToString().Contains("Char") || PropInfoCol.PropertyType.ToString().Contains("char"))
                    {
                        dbt = DbType.String;
                    }
                    else if (PropInfoCol.PropertyType.ToString().Contains("Time"))
                    {
                        dbt = DbType.Time;
                    }

                }
            }
            else
            {
                if (PropInfoCol.Name == "DbId" || PropInfoCol.Name == "DBId")
                {
                    dbt = DbType.Int32;
                }
                else
                {
                    if (PropInfoCol.PropertyType.ToString().Contains("Byte[]") && !(PropInfoCol.PropertyType.ToString().Contains("Byte")))
                    {
                        dbt = DbType.Binary;
                    }
                    else if ((PropInfoCol.PropertyType.ToString().Contains("Byte")) && !(PropInfoCol.PropertyType.ToString().Contains("Byte[]")))
                    {
                        dbt = DbType.Byte;
                    }
                    //if (PropInfoCol.PropertyType.ToString().Contains("Byte"))
                    //{
                    //    dbt = DbType.Byte;
                    //}
                    else if (PropInfoCol.PropertyType.ToString().Contains("bool"))
                    {
                        dbt = DbType.Boolean;
                    }
                    else if (PropInfoCol.PropertyType.ToString().Contains("Char") || PropInfoCol.PropertyType.ToString().Contains("char"))
                    {
                        dbt = DbType.String;
                    }
                    else if (PropInfoCol.PropertyType.ToString().Contains("Time"))
                    {
                        dbt = DbType.Time;
                    }
                    else
                    {
                        dbt = (DbType)Enum.Parse(typeof(DbType), PropInfoCol.PropertyType.Name);
                    }
                }
            }
            return dbt;
        }

        private static T ConvertTableToListNew<T>(DataRow dr) where T : new()
        {
            string pname = "";
            T objMaster = new T();
            try
            {

                foreach (PropertyInfo property in objMaster.GetType().GetProperties())
                {


                    if (dr.Table.Columns.Contains(property.Name.ToString()))
                    {
                        pname = property.Name;
                        if (dr[property.Name] == DBNull.Value)
                        {
                            property.SetValue(objMaster, null, null);
                        }
                        else if (property.PropertyType.ToString() == "System.Nullable`1[System.Decimal]")
                        {
                            Type Primitive = Nullable.GetUnderlyingType(property.PropertyType);
                            object Temp = Convert.ChangeType(dr[property.Name], Type.GetType(Primitive.FullName), CultureInfo.InvariantCulture);
                            property.SetValue(objMaster, Temp, null);

                        }
                        else
                        {
                            if (property.PropertyType.FullName.ToLower() == "system.char" || (Nullable.GetUnderlyingType(property.PropertyType) != null && Nullable.GetUnderlyingType(property.PropertyType).FullName.ToLower() == "system.char"))
                            {
                                property.SetValue(objMaster, Convert.ToChar(dr[property.Name]), null);
                            }
                            else
                                if (property.PropertyType.FullName.ToLower() == "system.int32" || (Nullable.GetUnderlyingType(property.PropertyType) != null && Nullable.GetUnderlyingType(property.PropertyType).FullName.ToLower() == "system.int32"))
                            {
                                property.SetValue(objMaster, Convert.ToInt32(dr[property.Name]), null);
                            }
                            else
                            {
                                property.SetValue(objMaster, dr[property.Name], null);
                            }

                        }
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            return objMaster;
        }

        private Boolean ValidColumn(string str)
        {

            if (str.Length <= 2)
                str = str + "modified";
            if (str.Substring(0, 2).ToUpper() != "ZZ" && str != "DUMMY" && str != "ZZDumSeq")
            {
                return true;
            }
            return false;
        }

        private static void ConvertTableToList<T>(DataRow dr, ref T objMaster)
        {
            try
            {
                foreach (PropertyInfo property in objMaster.GetType().GetProperties())
                {
                    if (dr.Table.Columns.Contains(property.Name.ToString()))
                    {

                        if (dr[property.Name] == DBNull.Value)
                        {
                            property.SetValue(objMaster, null, null);
                        }
                        else if (property.PropertyType.ToString() == "System.Nullable`1[System.Char]")
                        {
                            Type Primitive = Nullable.GetUnderlyingType(property.PropertyType);
                            object Temp = Convert.ChangeType(dr[property.Name], Type.GetType(Primitive.FullName), CultureInfo.InvariantCulture);
                            property.SetValue(objMaster, Temp, null);

                        }
                        else if (property.PropertyType.ToString() == "System.Nullable`1[System.Decimal]")
                        {
                            Type Primitive = Nullable.GetUnderlyingType(property.PropertyType);
                            object Temp = Convert.ChangeType(dr[property.Name], Type.GetType(Primitive.FullName), CultureInfo.InvariantCulture);
                            property.SetValue(objMaster, Temp, null);

                        }
                        else if (property.PropertyType.ToString() == "System.Nullable`1[System.Boolean]")
                        {
                            Type Primitive = Nullable.GetUnderlyingType(property.PropertyType);
                            object Temp = Convert.ChangeType(dr[property.Name], Type.GetType(Primitive.FullName), CultureInfo.InvariantCulture);
                            property.SetValue(objMaster, Temp, null);
                        }
                        else if (property.PropertyType.ToString() == "System.Boolean")
                        {
                            //Type Primitive = Nullable.GetUnderlyingType(property.PropertyType);
                            ////object Temp = Convert.ChangeType(dr[property.Name], Type.GetType(Primitive.FullName), CultureInfo.InvariantCulture);
                            //property.SetValue(objMaster, dr[property.Name], null);
                        }
                        else
                        {
                            property.SetValue(objMaster, dr[property.Name], null);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        public IEnumerable<string> Get()
        {
            return new string[] { "value1", "value2" };
        }

        // GET api/<controller>/5
        public string Get(int id)
        {
            return "value";
        }





        [ResponseType(typeof(returndbml<EmployeeRegistration>))]
       //   [Route("api/GetEmployees")]
        public returndbml<EmployeeRegistration> ERGetAll()
        {
            List<EmployeeRegistration> objListState = new List<EmployeeRegistration>();
            returndbml<EmployeeRegistration> objreturndbmlState = new returndbml<EmployeeRegistration>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_EmployeeRegistration");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        EmployeeRegistration objState = new EmployeeRegistration();
                        ConvertTableToList<EmployeeRegistration>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<dbmlEmployeeRegistration>))]
       //   [Route("api/GetERbyID")]
        public returndbml<EmployeeRegistration> ERGetbyID(int ID)
        {
            List<EmployeeRegistration> objListState = new List<EmployeeRegistration>();
            returndbml<EmployeeRegistration> objreturndbmlState = new returndbml<EmployeeRegistration>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_EmployeeRegistrationByID", ID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        EmployeeRegistration objState = new EmployeeRegistration();
                        ConvertTableToList<EmployeeRegistration>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        // POST: /Employee/Post
        [HttpPost]
        public void Post(string value)
        {
            // Handle the request
        }


        // PUT: /Employee/Put/5
        [HttpPut]
        public void Put(int id, string value)
        {
            // Handle the request
        }
        // DELETE api/<controller>/5
        public void Delete(int id)
        {
        }

        [ResponseType(typeof(returndbml<sp_GetDistIdDistNamefromDistrictbyStateIdResult>))]
       //   [Route("api/PopulateDropDownList")]
       //  [HttpGet]

        public returndbml<sp_GetDistIdDistNamefromDistrictbyStateIdResult> PopulateDropDownList(string ID)
        {
            List<sp_GetDistIdDistNamefromDistrictbyStateIdResult> objListState = new List<sp_GetDistIdDistNamefromDistrictbyStateIdResult>();
            returndbml<sp_GetDistIdDistNamefromDistrictbyStateIdResult> objreturndbmlState = new returndbml<sp_GetDistIdDistNamefromDistrictbyStateIdResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetDistIdDistNamefromDistrictbyStateId", ID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetDistIdDistNamefromDistrictbyStateIdResult objState = new sp_GetDistIdDistNamefromDistrictbyStateIdResult();
                        ConvertTableToList<sp_GetDistIdDistNamefromDistrictbyStateIdResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetEmployeeDetailbySrnoCompIdBranchIDResult>))]
      //   [Route("api/GetEmployeeDetail")]
      //  [HttpGet]
        public returndbml<sp_GetEmployeeDetailbySrnoCompIdBranchIDResult> GetEmployeeDetail(string prefixText, string CompID, string BranchId)
        {
            List<sp_GetEmployeeDetailbySrnoCompIdBranchIDResult> objListState = new List<sp_GetEmployeeDetailbySrnoCompIdBranchIDResult>();
            returndbml<sp_GetEmployeeDetailbySrnoCompIdBranchIDResult> objreturndbmlState = new returndbml<sp_GetEmployeeDetailbySrnoCompIdBranchIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetEmployeeDetailbyCompIdBranchID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetEmployeeDetailbySrnoCompIdBranchIDResult objState = new sp_GetEmployeeDetailbySrnoCompIdBranchIDResult();
                        ConvertTableToList<sp_GetEmployeeDetailbySrnoCompIdBranchIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetMaxVNo")]
       //  [HttpGet]
        public returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult> GetMaxVNo(string prefixText, string CompID, string BranchId)
        {
            List<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult> objListState = new List<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>();
            returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult> objreturndbmlState = new returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetMaxVNofromEmployeeRegistrationbycompidBranchID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult objState = new sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult();
                        ConvertTableToList<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetMaxSNId")]
        public returndbml<sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult> GetMaxSNId(string prefixText, string CompID, string BranchId)
        {
            List<sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult> objListState = new List<sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult>();
            returndbml<sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult> objreturndbmlState = new returndbml<sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult objState = new sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult();
                        ConvertTableToList<sp_GetMaxSNIdfromEmployeeRegistrationbycompidBranchIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult>))]
       //   [Route("api/GetCodeByName")]
        public returndbml<sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult> GetCodeByName(string CNAME, string CompID, string BranchId)
        {
            List<sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult> objListState = new List<sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult>();
            returndbml<sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult> objreturndbmlState = new returndbml<sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult objState = new sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult();
                        ConvertTableToList<sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult>))]
       //   [Route("api/GetMaxSubOfficeID")]
        public returndbml<sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult> GetMaxSubOfficeID(string CNAME, string CompID, string BranchId)
        {
            List<sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult> objListState = new List<sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult>();
            returndbml<sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult> objreturndbmlState = new returndbml<sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetCodeByNamefromEmployeeRegistrationbyNamecompidBranchID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult objState = new sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult();
                        ConvertTableToList<sp_GetMaxSubOfficeIDfromEmployeeRegistrationbySubGroupcompidBranchIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetEmployeeDetailbyCompIdBranchIDResult>))]
       //   [Route("api/InsertIntoDatabase")]
      //     [HttpPost]
        public List<FormSubmision> InsertIntoDatabase(InsertEmployee objlist)
        //public returndbml InsertIntoDatabase(InsertEmployee ObjList)
        {

            int RowAffect = 0;

            if (objlist.Address == null)
            {
                objlist.Address = "";
            }
            if (objlist.ContactNo == null)
            {
                objlist.ContactNo = "0";
            }
            if (objlist.EmailId == null)
            {
                objlist.ContactNo = "";
            }
            if (objlist.FatherName == null)
            {
                objlist.FatherName = "";
            }
            if (objlist.Gender == null)
            {
                objlist.Gender = "0";
            }
            if (objlist.HindiName == null)
            {
                objlist.HindiName = "";
            }
            if (objlist.LocAddress == null || objlist.LocAddress == "")
            {
                objlist.LocAddress = "0";
            }
            if (objlist.LocCityID == null || objlist.LocCityID == "")
            {
                objlist.LocCityID = "0";
            }
            if (objlist.LocStateID == null || objlist.LocStateID == "")
            {
                objlist.LocStateID = "0";
            }
            if (objlist.MobileNo == null)
            {
                objlist.MobileNo = "0";
            }
            if (objlist.ParAddress == null || objlist.ParAddress == "")
            {
                objlist.ParAddress = "0";
            }
            if (objlist.ParCityID == null || objlist.ParCityID == "")
            {
                objlist.ParCityID = "0";
            }
            if (objlist.SubGroupID == null || objlist.SubGroupID == "")
            {
                objlist.SubGroupID = "0";
            }
            if (objlist.Sno == null)
            {
                objlist.Sno = "0";
            }
            if (objlist.Code == null)
            {
                objlist.Code = "0";
            }
            if (objlist.CobinationCode == null)
            {
                objlist.CobinationCode = "0";
            }
            if (objlist.UnderBrachMaxID == null)
            {
                objlist.UnderBrachMaxID = "0";
            }
            if (objlist.FatherName == null)
            {
                objlist.FatherName = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();



                        using (SqlCommand cmd = new SqlCommand("insert_EmployeeRegistration", con))
                        {



                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@Id", objlist.Id);
                            cmd.Parameters.AddWithValue("@UserName", objlist.UserName);
                            cmd.Parameters.AddWithValue("@Password", objlist.Password);
                            cmd.Parameters.AddWithValue("@Name", objlist.Name);
                            cmd.Parameters.AddWithValue("@Address", objlist.Address);
                            cmd.Parameters.AddWithValue("@MobileNo", objlist.MobileNo);
                            cmd.Parameters.AddWithValue("@ContactNo", objlist.ContactNo);
                            cmd.Parameters.AddWithValue("@EmailId", objlist.EmailId);
                            cmd.Parameters.AddWithValue("@Status", objlist.Status);
                            cmd.Parameters.AddWithValue("@UserType", objlist.UserType);
                            cmd.Parameters.AddWithValue("@Designation", objlist.Designation);
                            cmd.Parameters.AddWithValue("@Salary", objlist.Salary);

                            cmd.Parameters.AddWithValue("@IsActive", objlist.IsActive);
                            cmd.Parameters.AddWithValue("@ParStateID", objlist.ParStateID);
                            cmd.Parameters.AddWithValue("@ParCityID", objlist.ParCityID);
                            cmd.Parameters.AddWithValue("@ParAddress", objlist.ParAddress);
                            cmd.Parameters.AddWithValue("@LocStateID", objlist.LocStateID);
                            cmd.Parameters.AddWithValue("@LocCityID", objlist.LocCityID);
                            cmd.Parameters.AddWithValue("@LocAddress", objlist.LocAddress);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@DepartId", objlist.DepartId);
                            cmd.Parameters.AddWithValue("@compid", objlist.compid);
                            cmd.Parameters.AddWithValue("@Sno", objlist.Sno);
                            cmd.Parameters.AddWithValue("@HindiName", objlist.HindiName);
                            cmd.Parameters.AddWithValue("@UserTypeID", objlist.UserTypeID);
                            cmd.Parameters.AddWithValue("@FatherName", objlist.FatherName);
                            cmd.Parameters.AddWithValue("@UnderGroup", objlist.UnderGroup);
                            cmd.Parameters.AddWithValue("@Code", objlist.Code);
                            cmd.Parameters.AddWithValue("@CobinationCode", objlist.CobinationCode);
                            cmd.Parameters.AddWithValue("@UnderBrachMaxID", objlist.UnderBrachMaxID);
                            cmd.Parameters.AddWithValue("@Gender", objlist.Gender);
                            cmd.Parameters.AddWithValue("@DesigID", objlist.DesigID);
                            cmd.Parameters.AddWithValue("@Dob", DateTime.ParseExact(objlist.Dob, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@OfiiceBranchID", objlist.OfiiceBranchID);
                            cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);

                            cmd.Transaction = objTrans;

                            RowAffect = cmd.ExecuteNonQuery();




                        }

                        if (RowAffect > 0)
                        {

                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.Name

            });
            return objDept;


            //returndbml objreturn = new returndbml();
            //// ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            //DbCommand dbCommond = null;
            //DbTransaction trans;
            //DbConnection con;
            //Database db = new SqlDatabase(Connection);
            //con = db.CreateConnection();
            //con.Open();
            //trans = con.BeginTransaction();
            //try
            //{
            //    dbCommond = db.GetStoredProcCommand("insert_EmployeeRegistration");
            //    foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
            //    {
            //        if (ValidColumn(PropInfoCol.Name))
            //        {
            //            DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);

            //            if (PropInfoCol.Name == "Dob")
            //            {
            //                //DateTime TempDate = Convert.ToDateTime(PropInfoCol.GetValue(ObjList, null).ToString());
            //                string CurrentDate = string.Format("{0:dd-MM-yyyy}", PropInfoCol.GetValue(ObjList, null));

            //                db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, DateTime.ParseExact(CurrentDate.ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // dbt
            //            }
            //            else
            //            {
            //                db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null));


            //            }
            //        }
            //    }
            //    db.ExecuteNonQuery(dbCommond, trans);
            //    trans.Commit();
            //    objreturn.StatusId = 1;
            //    objreturn.Status = "Seccessfully";



            //}
            //catch (Exception ex)
            //{
            //    objreturn.StatusId = 99;
            //    objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            //    trans.Rollback();
            //}
            //finally { con.Close(); }
            //return objreturn;
        }


        [ResponseType(typeof(returndbml<sp_GetEmployeeDetailbyCompIdBranchIDResult>))]
       //   [Route("api/insertEmployeeAddressDetail")]
        public returndbml<EmployeeAddressDetail> insertEmployeeAddressDetail(EmployeeAddressDetail ObjList)
        {
            returndbml<EmployeeAddressDetail> objreturn = new returndbml<EmployeeAddressDetail>();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();
            try
            {
                dbCommond = db.GetStoredProcCommand("sp_insert_EmployeeAddressDetail");
                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null));
                    }
                }
                db.ExecuteNonQuery(dbCommond, trans);
                trans.Commit();
                objreturn.StatusId = 1;
                objreturn.Status = "Seccessfully";

            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }


        [ResponseType(typeof(returndbml<sp_select_Gander_Master_TBResult>))]
       //   [Route("api/FillDropdownListGender")]
       //  [HttpGet]
        public returndbml<sp_select_Gander_Master_TBResult> FillDropdownListGender()
        {
            List<sp_select_Gander_Master_TBResult> objListState = new List<sp_select_Gander_Master_TBResult>();
            returndbml<sp_select_Gander_Master_TBResult> objreturndbmlState = new returndbml<sp_select_Gander_Master_TBResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_Gander_Master_TB");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_Gander_Master_TBResult objState = new sp_select_Gander_Master_TBResult();
                        ConvertTableToList<sp_select_Gander_Master_TBResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        [ResponseType(typeof(returndbml<sp_select_Gander_Master_TBResult>))]
       //   [Route("api/FillDropdownListDepartment")]
       //  [HttpGet]
        public returndbml<FILLDepartmentComboResult> FillDropdownListDepartment()
        {
            List<FILLDepartmentComboResult> objListState = new List<FILLDepartmentComboResult>();
            returndbml<FILLDepartmentComboResult> objreturndbmlState = new returndbml<FILLDepartmentComboResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FILLDepartmentCombo");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FILLDepartmentComboResult objState = new FILLDepartmentComboResult();
                        ConvertTableToList<FILLDepartmentComboResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetDistIdDistNamefromDistrictbyStateIdResult>))]
       //   [Route("api/FillEmpDesinnation")]
       //  [HttpGet]

        public returndbml<FILLEmpDesignationComboResult> FillEmpDesinnation(string ID)
        {
            List<FILLEmpDesignationComboResult> objListState = new List<FILLEmpDesignationComboResult>();
            returndbml<FILLEmpDesignationComboResult> objreturndbmlState = new returndbml<FILLEmpDesignationComboResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FILLEmpDesignationCombo", ID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FILLEmpDesignationComboResult objState = new FILLEmpDesignationComboResult();
                        ConvertTableToList<FILLEmpDesignationComboResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetDistIdDistNamefromDistrictbyStateIdResult>))]
       //   [Route("api/FillOfficeBranch")]
       //  [HttpGet]

        public returndbml<FILLOfficeBranchComboResult> FillOfficeBranch(string ID)
        {
            List<FILLOfficeBranchComboResult> objListState = new List<FILLOfficeBranchComboResult>();
            returndbml<FILLOfficeBranchComboResult> objreturndbmlState = new returndbml<FILLOfficeBranchComboResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FILLOfficeBranchCombo", ID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FILLOfficeBranchComboResult objState = new FILLOfficeBranchComboResult();
                        ConvertTableToList<FILLOfficeBranchComboResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_select_StatesResult>))]
       //   [Route("api/FillDropdownListState")]
       //  [HttpGet]
        public returndbml<sp_select_StatesResult> FillDropdownListState()
        {
            List<sp_select_StatesResult> objListState = new List<sp_select_StatesResult>();
            returndbml<sp_select_StatesResult> objreturndbmlState = new returndbml<sp_select_StatesResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_States");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_StatesResult objState = new sp_select_StatesResult();
                        ConvertTableToList<sp_select_StatesResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetUnderEmployeebycompIdStateIdResult>))]
       //   [Route("api/FillDropdownListUnderEmployee")]
       //  [HttpGet]
        public returndbml<sp_GetUnderEmployeebycompIdStateIdResult> FillDropdownListUnderEmployee(string prefixText, string CompID, string BranchId)
        {
            List<sp_GetUnderEmployeebycompIdStateIdResult> objListState = new List<sp_GetUnderEmployeebycompIdStateIdResult>();
            returndbml<sp_GetUnderEmployeebycompIdStateIdResult> objreturndbmlState = new returndbml<sp_GetUnderEmployeebycompIdStateIdResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetUnderEmployeebycompIdStateId", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetUnderEmployeebycompIdStateIdResult objState = new sp_GetUnderEmployeebycompIdStateIdResult();
                        ConvertTableToList<sp_GetUnderEmployeebycompIdStateIdResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetUserTypebycompIdStateIdResult>))]
       //   [Route("api/FillDropdownListUserType")]
       //  [HttpGet]
        public returndbml<sp_GetUserTypebycompIdStateIdResult> FillDropdownListUserType(string prefixText, string CompID, string BranchId)
        {
            List<sp_GetUserTypebycompIdStateIdResult> objListState = new List<sp_GetUserTypebycompIdStateIdResult>();
            returndbml<sp_GetUserTypebycompIdStateIdResult> objreturndbmlState = new returndbml<sp_GetUserTypebycompIdStateIdResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetUserTypebycompIdStateId", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetUserTypebycompIdStateIdResult objState = new sp_GetUserTypebycompIdStateIdResult();
                        ConvertTableToList<sp_GetUserTypebycompIdStateIdResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetEmployeeDetailbyCompIdBranchIDResult>))]
       //   [Route("api/GetEmployeeDetailbySrno")]
       //  [HttpGet]
        public returndbml<sp_GetEmployeeDetailbySrnoResult> GetEmployeeDetailbySrno(string Srno)
        {
            List<sp_GetEmployeeDetailbySrnoResult> objListState = new List<sp_GetEmployeeDetailbySrnoResult>();
            returndbml<sp_GetEmployeeDetailbySrnoResult> objreturndbmlState = new returndbml<sp_GetEmployeeDetailbySrnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetEmployeeDetailbySrno", Srno);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetEmployeeDetailbySrnoResult objState = new sp_GetEmployeeDetailbySrnoResult();
                        ConvertTableToList<sp_GetEmployeeDetailbySrnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetUserTypebycompIdStateIdResult>))]
       //   [Route("api/CheckLoginPassword")]
       //  [HttpGet]
        public returndbml<sp_GetloginpasswordResult> CheckLoginPassword(string UserName, string Password)
        {
            List<sp_GetloginpasswordResult> objListState = new List<sp_GetloginpasswordResult>();
            returndbml<sp_GetloginpasswordResult> objreturndbmlState = new returndbml<sp_GetloginpasswordResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_Getloginpassword", UserName, Password);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetloginpasswordResult objState = new sp_GetloginpasswordResult();
                        ConvertTableToList<sp_GetloginpasswordResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetEmployeeDetailbyCompIdBranchIDResult>))]
       //   [Route("api/GetOfficeBranchDetail")]
       //  [HttpGet]
        public returndbml<sp_GetOfficeBranchDetailbyCompIdBranchIDResult> GetOfficeBranchDetailbyCompIdBranchID(string prefixText, string CompID, string BranchId)
        {
            List<sp_GetOfficeBranchDetailbyCompIdBranchIDResult> objListState = new List<sp_GetOfficeBranchDetailbyCompIdBranchIDResult>();
            returndbml<sp_GetOfficeBranchDetailbyCompIdBranchIDResult> objreturndbmlState = new returndbml<sp_GetOfficeBranchDetailbyCompIdBranchIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetOfficeBranchDetailbyCompIdBranchID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetOfficeBranchDetailbyCompIdBranchIDResult objState = new sp_GetOfficeBranchDetailbyCompIdBranchIDResult();
                        ConvertTableToList<sp_GetOfficeBranchDetailbyCompIdBranchIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        #region Branch Master
        //[ResponseType(typeof(returndbml))]
        //[Route("api/InsertIntoBrachMaster")]
        //[HttpPost]
        //public returndbml InsertIntoBrachMaster(InsertBranch ObjList)
        //{
        //    returndbml objreturn = new returndbml();
        //    // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
        //    DbCommand dbCommond = null;
        //    DbTransaction trans;
        //    DbConnection con;
        //    Database db = new SqlDatabase(Connection);
        //    con = db.CreateConnection();
        //    con.Open();
        //    trans = con.BeginTransaction();
        //    try
        //    {
        //        dbCommond = db.GetStoredProcCommand("sp_insertBranchMaster");
        //        foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
        //        {
        //            if (ValidColumn(PropInfoCol.Name))
        //            {
        //                DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);

        //                //if (PropInfoCol.Name == "CurrentDate")
        //                //{
        //                //    //DateTime TempDate = Convert.ToDateTime(PropInfoCol.GetValue(ObjList, null).ToString());
        //                //    //string CurrentDate = string.Format("{0:dd-MM-yyyy}", TempDate);

        //                //    //db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, DateTime.ParseExact(CurrentDate.ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // dbt
        //                //    db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, DateTime.ParseExact(PropInfoCol.GetValue(ObjList, null).ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // dbt
        //                //}
        //                //else
        //                //{
        //                    db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null));
        //                //}

        //            }
        //        }
        //        db.ExecuteNonQuery(dbCommond, trans);
        //        trans.Commit();
        //        objreturn.StatusId = 1;
        //        objreturn.Status = "Seccessfully";

        //    }
        //    catch (Exception ex)
        //    {
        //        objreturn.StatusId = 99;
        //        objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
        //        trans.Rollback();
        //    }
        //    finally { con.Close(); }
        //    return objreturn;
        //}


        public static int ReturnBranchID;

       //   [Route("api/InsertIntoBrachMaster")]
      //     [HttpPost]
        public List<FormSubmision> InsertIntoBrachMaster(InsertBranch objlist)
        {
            int RowAffect = 0;

            if (objlist.Address == null)
            {
                objlist.Address = "";
            }
            if (objlist.BasicValue == null)
            {
                objlist.BasicValue = "";
            }
            if (objlist.BranchPrefix == null)
            {
                objlist.BranchPrefix = "";
            }
            if (objlist.CobinationCode == null)
            {
                objlist.CobinationCode = "";
            }
            if (objlist.Code == null)
            {
                objlist.Code = "";
            }

            if (objlist.ColumnMoney == null)
            {
                objlist.ColumnMoney = "0";
            }
            if (objlist.ColumnVar1 == null)
            {
                objlist.ColumnVar1 = "";
            }
            if (objlist.ColumnVar2 == null)
            {
                objlist.ColumnVar2 = "";
            }
            if (objlist.CreateByUserId == null)
            {
                objlist.CreateByUserId = "";
            }

            if (objlist.EmailId == null)
            {
                objlist.EmailId = "";
            }
            if (objlist.HindiName == null)
            {
                objlist.HindiName = "";
            }
            if (objlist.IsActive == null)
            {
                objlist.IsActive = "";
            }
            //if (objlist.MeetingDate == null)
            //{
            //    objlist.MeetingDate = "";
            //}
            //if (objlist.MeetingTime == null)
            //{
            //    objlist.MeetingTime = "";
            //}
            if (objlist.MobileNo == null)
            {
                objlist.MobileNo = "";
            }
            if (objlist.ModifyByUserId == null)
            {
                objlist.ModifyByUserId = "";
            }

            if (objlist.OfficeType == null)
            {
                objlist.OfficeType = "";
            }
            if (objlist.Status == null)
            {
                objlist.Status = "";
            }
            if (objlist.SubBranchName == null)
            {
                objlist.SubBranchName = "";
            }
            if (objlist.SyncDownLoadStatus == null)
            {
                objlist.SyncDownLoadStatus = "";
            }
            if (objlist.SyncUpLoadStatus == null)
            {
                objlist.SyncUpLoadStatus = "";
            }
            if (objlist.UnderBrachMaxID == null)
            {
                objlist.UnderBrachMaxID = "";
            }
            if (objlist.UnderBrachName == null)
            {
                objlist.UnderBrachName = "";
            }
            if (objlist.Vtype == null)
            {
                objlist.Vtype = "";
            }
            if (objlist.MeetingTime == null)
            {
                objlist.MeetingTime = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        using (SqlCommand cmd = new SqlCommand("sp_insertBranchMaster", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;

                            cmd.Parameters.AddWithValue("@SrNo", objlist.SrNo);
                            cmd.Parameters.AddWithValue("@ID", objlist.ID);
                            cmd.Parameters.AddWithValue("@SubBranchName", objlist.SubBranchName);
                            cmd.Parameters.AddWithValue("@UnderBrachName", objlist.UnderBrachName);
                            cmd.Parameters.AddWithValue("@OfficeType", objlist.OfficeType);
                            cmd.Parameters.AddWithValue("@Code", objlist.Code);
                            cmd.Parameters.AddWithValue("@CobinationCode", objlist.CobinationCode);
                            cmd.Parameters.AddWithValue("@UnderBrachMaxID", objlist.UnderBrachMaxID);
                            cmd.Parameters.AddWithValue("@Sno", objlist.Sno);
                            cmd.Parameters.AddWithValue("@IsActive", objlist.IsActive);
                            cmd.Parameters.AddWithValue("@CurrentDate", DateTime.ParseExact(objlist.MeetingDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@CreateByUserId", objlist.CreateByUserId);
                            cmd.Parameters.AddWithValue("@ModifyDate", DateTime.ParseExact(objlist.MeetingDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@ModifyByUserId", objlist.ModifyByUserId);
                            cmd.Parameters.AddWithValue("@ColumnVar1", objlist.ColumnVar1);
                            cmd.Parameters.AddWithValue("@ColumnVar2", objlist.ColumnVar2);
                            cmd.Parameters.AddWithValue("@ColumnDate1", DateTime.ParseExact(objlist.MeetingDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@ColumnInt1", objlist.ColumnInt1);
                            cmd.Parameters.AddWithValue("@ColumnInt2", objlist.ColumnInt2);
                            cmd.Parameters.AddWithValue("@ColumnMoney", objlist.ColumnMoney);
                            cmd.Parameters.AddWithValue("@Status", objlist.Status);
                            cmd.Parameters.AddWithValue("@BasicValue", objlist.BasicValue);
                            cmd.Parameters.AddWithValue("@SyncToken", objlist.SyncToken);
                            cmd.Parameters.AddWithValue("@BranchPrefix", objlist.BranchPrefix);
                            cmd.Parameters.AddWithValue("@HindiName", objlist.HindiName);
                            cmd.Parameters.AddWithValue("@App_TransactionNo", objlist.AppTransactionNo);
                            cmd.Parameters.AddWithValue("@SyncDownLoad_Status", objlist.SyncDownLoadStatus);
                            cmd.Parameters.AddWithValue("@SyncUpLoad_Status", objlist.SyncUpLoadStatus);
                            cmd.Parameters.AddWithValue("@SyncBranchID", objlist.SyncBranchID);
                            cmd.Parameters.AddWithValue("@Vtype", objlist.Vtype);
                            cmd.Parameters.AddWithValue("@Address", objlist.Address);
                            cmd.Parameters.AddWithValue("@MobileNo", objlist.MobileNo);
                            cmd.Parameters.AddWithValue("@EmailId", objlist.EmailId);
                            cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.MeetingDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@MeetingTime", objlist.MeetingTime);
                            cmd.Parameters.AddWithValue("@MeetingType", objlist.MeetingType);
                            cmd.Parameters.AddWithValue("@MeetingDateB", DateTime.ParseExact(objlist.MeetingDateB, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                            cmd.Parameters.AddWithValue("@Compid", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@UnderEmpID", objlist.UnderEmpID);

                            SqlParameter parm = new SqlParameter("@ReturnBranchID", SqlDbType.Int);
                            parm.Direction = ParameterDirection.ReturnValue;
                            cmd.Parameters.Add(parm);



                            cmd.Transaction = objTrans;

                            RowAffect = cmd.ExecuteNonQuery();

                            ReturnBranchID = Convert.ToInt32(parm.Value);

                        }




                        if (RowAffect > 0)
                        {

                            objTrans.Commit();


                            using (SqlConnection Connect = new SqlConnection(Connection))
                            {

                                if (Connect.State == ConnectionState.Open)
                                {
                                    Connect.Close();
                                }
                                Connect.Open();


                                using (SqlCommand cmd = new SqlCommand("InsertBasicLedger", Connect))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", ReturnBranchID);

                                    RowIns = cmd.ExecuteNonQuery();

                                }
                            }

                            if (RowIns > 0)
                            {


                                using (SqlConnection Conn = new SqlConnection(Connection))
                                {

                                    if (Conn.State == ConnectionState.Open)
                                    {
                                        Conn.Close();
                                    }
                                    Conn.Open();


                                    using (SqlCommand cmd = new SqlCommand("GetBasicLedger", Conn))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", ReturnBranchID);

                                        SqlDataAdapter daa = new SqlDataAdapter(cmd);
                                        DataTable DT = new DataTable();
                                        daa.Fill(DT);
                                        if (DT.Rows.Count > 0)
                                        {


                                            for (int K = 0; K < DT.Rows.Count; K++)
                                            {

                                                string ldname = DT.Rows[K]["LdName"].ToString();
                                                string Branchid = DT.Rows[K]["BranchID"].ToString();
                                                string Compid = DT.Rows[K]["Compid"].ToString();



                                                using (SqlConnection ConA = new SqlConnection(Connection))
                                                {

                                                    if (ConA.State == ConnectionState.Open)
                                                    {
                                                        ConA.Close();
                                                    }
                                                    ConA.Open();


                                                    using (SqlCommand cmdd = new SqlCommand("UpdateBasicLedger", ConA))
                                                    {
                                                        cmdd.CommandType = CommandType.StoredProcedure;
                                                        cmdd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                        cmdd.Parameters.AddWithValue("@BranchID", ReturnBranchID);
                                                        cmdd.Parameters.AddWithValue("@LdName", ldname);

                                                        int ff = cmdd.ExecuteNonQuery();

                                                    }
                                                }






                                            }



                                        }

                                    }
                                }


                                using (SqlConnection ConnI = new SqlConnection(Connection))
                                {

                                    if (ConnI.State == ConnectionState.Open)
                                    {
                                        ConnI.Close();
                                    }
                                    ConnI.Open();

                                    using (SqlCommand cmd = new SqlCommand("InsertBasicPlane", ConnI))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", ReturnBranchID);
                                        int TT = cmd.ExecuteNonQuery();

                                    }
                                }

                                using (SqlConnection ConnIB = new SqlConnection(Connection))
                                {

                                    if (ConnIB.State == ConnectionState.Open)
                                    {
                                        ConnIB.Close();
                                    }
                                    ConnIB.Open();

                                    using (SqlCommand cmd = new SqlCommand("InsertBasicMembershipCharge", ConnIB))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", ReturnBranchID);
                                        int TTR = cmd.ExecuteNonQuery();

                                    }
                                }










                            }








                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.SubBranchName

            });
            return objDept;
        }




        [ResponseType(typeof(returndbml<sp_select_BranchMasterResult>))]
       //   [Route("api/GetBrachMasterDetail")]
       //  [HttpGet]
        public returndbml<sp_select_BranchMasterbySrNoResult> GetBrachMasterDetail(string prefixText, string CompID, string BranchId)
        {
            List<sp_select_BranchMasterbySrNoResult> objListState = new List<sp_select_BranchMasterbySrNoResult>();
            returndbml<sp_select_BranchMasterbySrNoResult> objreturndbmlState = new returndbml<sp_select_BranchMasterbySrNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_BranchMaster", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_BranchMasterbySrNoResult objState = new sp_select_BranchMasterbySrNoResult();
                        ConvertTableToList<sp_select_BranchMasterbySrNoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_BranchMasterbySrNoResult>))]
       //   [Route("api/GetBrachMasterDetailbySno")]
       //  [HttpGet]
        public returndbml<sp_select_BranchMasterbySrNoResult> select_BranchMasterbySrNo(string Srno)
        {
            List<sp_select_BranchMasterbySrNoResult> objListState = new List<sp_select_BranchMasterbySrNoResult>();
            returndbml<sp_select_BranchMasterbySrNoResult> objreturndbmlState = new returndbml<sp_select_BranchMasterbySrNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_BranchMasterbySrNo", Srno);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_BranchMasterbySrNoResult objState = new sp_select_BranchMasterbySrNoResult();
                        ConvertTableToList<sp_select_BranchMasterbySrNoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_select_BranchMasterbySrNoResult>))]
       //   [Route("api/GetSubBranchNamebyCompID")]
       //  [HttpGet]
        public returndbml<sp_select_SubBranchNamebyCompIDResult> GetSubBranchNamebyCompID(string CompID)
        {
            List<sp_select_SubBranchNamebyCompIDResult> objListState = new List<sp_select_SubBranchNamebyCompIDResult>();
            returndbml<sp_select_SubBranchNamebyCompIDResult> objreturndbmlState = new returndbml<sp_select_SubBranchNamebyCompIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_SubBranchNamebyCompID", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_SubBranchNamebyCompIDResult objState = new sp_select_SubBranchNamebyCompIDResult();
                        ConvertTableToList<sp_select_SubBranchNamebyCompIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        #endregion

        #region  Company Master
        [ResponseType(typeof(returndbml))]
       //   [Route("api/InsertIntoCompanyMaster")]
      //     [HttpPost]
        public returndbml InsertIntoCompanyMaster(sp_select_CompanyMasterbySrnoResult ObjList)
        {
            returndbml objreturn = new returndbml();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();
            try
            {
                dbCommond = db.GetStoredProcCommand("sp_insertCompanyMaster");
                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null));
                    }
                }
                db.ExecuteNonQuery(dbCommond, trans);
                trans.Commit();
                objreturn.StatusId = 1;
                objreturn.Status = "Seccessfully";

            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }


        [ResponseType(typeof(returndbml<sp_select_CompanyMasterbySrnoResult>))]
       //   [Route("api/GetCompanyMasterDetail")]
       //  [HttpGet]
        public returndbml<sp_select_CompanyMasterbySrnoResult> GetCompanyMasterDetail(string prefixText, string CompID, string BranchId)
        {
            List<sp_select_CompanyMasterbySrnoResult> objListState = new List<sp_select_CompanyMasterbySrnoResult>();
            returndbml<sp_select_CompanyMasterbySrnoResult> objreturndbmlState = new returndbml<sp_select_CompanyMasterbySrnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_CompanyMaster", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_CompanyMasterbySrnoResult objState = new sp_select_CompanyMasterbySrnoResult();
                        ConvertTableToList<sp_select_CompanyMasterbySrnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_CompanyMasterbySnoResult>))]
       //   [Route("api/GetCompanyMasterDetailbySno")]
       //  [HttpGet]
        public returndbml<sp_select_CompanyMasterbySnoResult> GetCompanyMasterDetailbySno(string Srno)
        {
            List<sp_select_CompanyMasterbySnoResult> objListState = new List<sp_select_CompanyMasterbySnoResult>();
            returndbml<sp_select_CompanyMasterbySnoResult> objreturndbmlState = new returndbml<sp_select_CompanyMasterbySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_BranchMasterbySrNo", Srno);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_CompanyMasterbySnoResult objState = new sp_select_CompanyMasterbySnoResult();
                        ConvertTableToList<sp_select_CompanyMasterbySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_CompanyNamebyCompanyNameResult>))]
       //   [Route("api/GetCompanyNamebyCompName")]
       //  [HttpGet]
        public returndbml<sp_select_CompanyNamebyCompanyNameResult> GetCompanyNamebyCompName()
        {
            List<sp_select_CompanyNamebyCompanyNameResult> objListState = new List<sp_select_CompanyNamebyCompanyNameResult>();
            returndbml<sp_select_CompanyNamebyCompanyNameResult> objreturndbmlState = new returndbml<sp_select_CompanyNamebyCompanyNameResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_CompanyNamebyCompanyName");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_CompanyNamebyCompanyNameResult objState = new sp_select_CompanyNamebyCompanyNameResult();
                        ConvertTableToList<sp_select_CompanyNamebyCompanyNameResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        #endregion

        #region  Zonal Master
        [ResponseType(typeof(returndbml))]
       //   [Route("api/InsertIntoZonalMaster")]
      //     [HttpPost]
        public returndbml InsertIntoZonalMaster(sp_select_ZonalOfficebySnoResult ObjList)
        {
            returndbml objreturn = new returndbml();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();
            try
            {
                dbCommond = db.GetStoredProcCommand("sp_insertZonalofficehMaster");
                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);

                        //if (PropInfoCol.Name == "CurrentDate")
                        //{
                        //    //DateTime TempDate = Convert.ToDateTime(PropInfoCol.GetValue(ObjList, null).ToString());
                        //    //string CurrentDate = string.Format("{0:dd-MM-yyyy}", TempDate);

                        //    //db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, DateTime.ParseExact(CurrentDate.ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // dbt

                        //    db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, DateTime.ParseExact(PropInfoCol.GetValue(ObjList, null).ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // dbt
                        //}
                        //else
                        //{
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null));
                        //}

                    }
                }


                db.ExecuteNonQuery(dbCommond, trans);
                trans.Commit();
                objreturn.StatusId = 1;
                objreturn.Status = "Seccessfully";

            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }


        [ResponseType(typeof(returndbml<sp_select_BranchMasterResult>))]
       //   [Route("api/GetZonalMasterDetail")]
       //  [HttpGet]
        public List<sp_select_ZonalOfficebySnoResult> GetZonalMasterDetail(string prefixText, string CompID, string BranchId)
        {
            List<sp_select_ZonalOfficebySnoResult> objListState = new List<sp_select_ZonalOfficebySnoResult>();
            returndbml<sp_select_ZonalOfficebySnoResult> objreturndbmlState = new returndbml<sp_select_ZonalOfficebySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_ZonalOffice", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_ZonalOfficebySnoResult objState = new sp_select_ZonalOfficebySnoResult();
                        ConvertTableToList<sp_select_ZonalOfficebySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objListState;
        }

        [ResponseType(typeof(returndbml<sp_select_BranchMasterbySrNoResult>))]
       //   [Route("api/GetZonalMasterDetailbySno")]
       //  [HttpGet]
        public returndbml<sp_select_ZonalOfficebySnoResult> sp_select_ZonalMasterbySno(string Srno)
        {
            List<sp_select_ZonalOfficebySnoResult> objListState = new List<sp_select_ZonalOfficebySnoResult>();
            returndbml<sp_select_ZonalOfficebySnoResult> objreturndbmlState = new returndbml<sp_select_ZonalOfficebySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_ZonalOfficebySno", Srno);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_ZonalOfficebySnoResult objState = new sp_select_ZonalOfficebySnoResult();
                        ConvertTableToList<sp_select_ZonalOfficebySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_select_BranchMasterbySrNoResult>))]
       //   [Route("api/GetZonallOfficeMasterSubBranchNamebyCompID")]
       //  [HttpGet]
        public returndbml<select_ZonallOfficeMasterSubBranchNamebyCompIDResult> GetZonallOfficeMasterSubBranchNamebyCompID(string CompID)
        {
            List<select_ZonallOfficeMasterSubBranchNamebyCompIDResult> objListState = new List<select_ZonallOfficeMasterSubBranchNamebyCompIDResult>();
            returndbml<select_ZonallOfficeMasterSubBranchNamebyCompIDResult> objreturndbmlState = new returndbml<select_ZonallOfficeMasterSubBranchNamebyCompIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("select_ZonallOfficeMasterSubBranchNamebyCompID", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        select_ZonallOfficeMasterSubBranchNamebyCompIDResult objState = new select_ZonallOfficeMasterSubBranchNamebyCompIDResult();
                        ConvertTableToList<select_ZonallOfficeMasterSubBranchNamebyCompIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }




        #endregion


        #region  Regional Master
        [ResponseType(typeof(returndbml))]
       //   [Route("api/InsertIntoRegionallMaster")]
      //     [HttpPost]
        //public returndbml InsertIntoRegionalMaster(InsertOfficeBranch ObjList)
        //{
        //    returndbml objreturn = new returndbml();
        //    // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
        //    DbCommand dbCommond = null;
        //    DbTransaction trans;
        //    DbConnection con;
        //    Database db = new SqlDatabase(Connection);
        //    con = db.CreateConnection();
        //    con.Open();
        //    trans = con.BeginTransaction();
        //    try
        //    {
        //        dbCommond = db.GetStoredProcCommand("sp_insert_Regional_Office_Master");

        //        foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
        //        {
        //            if (ValidColumn(PropInfoCol.Name))
        //            {
        //                DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);

        //                if (PropInfoCol.Name == "CurrentDate")
        //                {


        //                    db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, DateTime.ParseExact(PropInfoCol.GetValue(ObjList, null).ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // dbt
        //                }
        //                else
        //                {
        //                    db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null));
        //                }
        //            }


        //        }

        //        db.ExecuteNonQuery(dbCommond, trans);
        //        trans.Commit();
        //        objreturn.StatusId = 1;
        //        objreturn.Status = "Seccessfully";

        //    }
        //    catch (Exception ex)
        //    {
        //        objreturn.StatusId = 99;
        //        objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
        //        trans.Rollback();
        //    }
        //    finally { con.Close(); }
        //    return objreturn;
        //}
        public returndbml InsertIntoRegionalMaster(sp_select_RegionalOfficebySnoResult ObjList)
        {
            returndbml objreturn = new returndbml();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();
            try
            {
                dbCommond = db.GetStoredProcCommand("sp_insert_Regional_Office_Master");

                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);

                        //if (PropInfoCol.Name == "CurrentDate")
                        //{


                        //    db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, DateTime.ParseExact(PropInfoCol.GetValue(ObjList, null).ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // dbt
                        //}

                        //else
                        //{
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null));
                        //}
                    }


                }

                db.ExecuteNonQuery(dbCommond, trans);
                trans.Commit();
                objreturn.StatusId = 1;
                objreturn.Status = "Seccessfully";

            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }


        [ResponseType(typeof(returndbml<sp_select_RegionalOfficebySnoResult>))]
       //   [Route("api/GetRegionalMasterDetail")]
       //  [HttpGet]
        public List<sp_select_RegionalOfficebySnoResult> GetRegionalMasterDetail(string prefixText, string CompID, string BranchId)
        {
            List<sp_select_RegionalOfficebySnoResult> objListState = new List<sp_select_RegionalOfficebySnoResult>();
            returndbml<sp_select_RegionalOfficebySnoResult> objreturndbmlState = new returndbml<sp_select_RegionalOfficebySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_RegionalOffice", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });

                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_RegionalOfficebySnoResult objState = new sp_select_RegionalOfficebySnoResult();
                        ConvertTableToList<sp_select_RegionalOfficebySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                //else
                //{
                //    objreturndbmlState.StatusId = 2;
                //    objreturndbmlState = null;
                //}
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objListState;
        }

        [ResponseType(typeof(returndbml<sp_select_RegionalOfficeResult>))]
       //   [Route("api/GetRegionalMasterDetailbySno")]
       //  [HttpGet]
        public returndbml<sp_select_RegionalOfficeResult> GetRegionalMasterDetailbySno(string Srno)
        {
            List<sp_select_RegionalOfficeResult> objListState = new List<sp_select_RegionalOfficeResult>();
            returndbml<sp_select_RegionalOfficeResult> objreturndbmlState = new returndbml<sp_select_RegionalOfficeResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_RegionalOfficebySno", Srno);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_RegionalOfficeResult objState = new sp_select_RegionalOfficeResult();
                        ConvertTableToList<sp_select_RegionalOfficeResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<select_RegionalOfficeMaster_SubNamebyCompIDResult>))]
       //   [Route("api/GetRegionalOfficeMasterSubNamebyCompID")]
       //  [HttpGet]
        public returndbml<select_RegionalOfficeMaster_SubNamebyCompIDResult> GetRegionalOfficeMasterSubNamebyCompID(string CompID)
        {
            List<select_RegionalOfficeMaster_SubNamebyCompIDResult> objListState = new List<select_RegionalOfficeMaster_SubNamebyCompIDResult>();
            returndbml<select_RegionalOfficeMaster_SubNamebyCompIDResult> objreturndbmlState = new returndbml<select_RegionalOfficeMaster_SubNamebyCompIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("select_RegionalOfficeMaster_SubNamebyCompID", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        select_RegionalOfficeMaster_SubNamebyCompIDResult objState = new select_RegionalOfficeMaster_SubNamebyCompIDResult();
                        ConvertTableToList<select_RegionalOfficeMaster_SubNamebyCompIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        #endregion

        #region Designation Master

        [ResponseType(typeof(returndbml))]
       //   [Route("api/InsertIntoDesignationlMaster")]
      //     [HttpPost]
        public returndbml InsertIntoDesignationlMaster(sp_select_DesignationMasterbySrnoResult ObjList)
        {
            returndbml objreturn = new returndbml();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();
            try
            {
                dbCommond = db.GetStoredProcCommand("sp_insertDesignationMaster");
                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null));
                    }
                }
                db.ExecuteNonQuery(dbCommond, trans);
                trans.Commit();
                objreturn.StatusId = 1;
                objreturn.Status = "Seccessfully";

            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }


        [ResponseType(typeof(returndbml<sp_select_DesignationMasterbySrnoResult>))]
       //   [Route("api/GetDesignationMasterDetail")]
       //  [HttpGet]
        public returndbml<sp_select_DesignationMasterbySrnoResult> GetDesignationMasterDetail(string prefixText, string CompID, string BranchId)
        {
            List<sp_select_DesignationMasterbySrnoResult> objListState = new List<sp_select_DesignationMasterbySrnoResult>();
            returndbml<sp_select_DesignationMasterbySrnoResult> objreturndbmlState = new returndbml<sp_select_DesignationMasterbySrnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_DesignationMaster", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_DesignationMasterbySrnoResult objState = new sp_select_DesignationMasterbySrnoResult();
                        ConvertTableToList<sp_select_DesignationMasterbySrnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_DesignationMasterResult>))]
       //   [Route("api/GetDesignationMasterDetailbySno")]
       //  [HttpGet]
        public returndbml<sp_select_DesignationMasterResult> GetDesignationMasterDetailbySno(string Srno)
        {
            List<sp_select_DesignationMasterResult> objListState = new List<sp_select_DesignationMasterResult>();
            returndbml<sp_select_DesignationMasterResult> objreturndbmlState = new returndbml<sp_select_DesignationMasterResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_DesigtionMnaasterbySrno", Srno);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_DesignationMasterResult objState = new sp_select_DesignationMasterResult();
                        ConvertTableToList<sp_select_DesignationMasterResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_SubDesignationbyCompIDResult>))]
       //   [Route("api/GetSubDesignationNamebyCompID")]
       //  [HttpGet]
        public returndbml<sp_select_SubDesignationbyCompIDResult> GetSubDesignationNamebyCompID(string CompID)
        {
            List<sp_select_SubDesignationbyCompIDResult> objListState = new List<sp_select_SubDesignationbyCompIDResult>();
            returndbml<sp_select_SubDesignationbyCompIDResult> objreturndbmlState = new returndbml<sp_select_SubDesignationbyCompIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_SubDesignationbyCompID", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_SubDesignationbyCompIDResult objState = new sp_select_SubDesignationbyCompIDResult();
                        ConvertTableToList<sp_select_SubDesignationbyCompIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_select_DepartmentNamebyCompIDResult>))]
       //   [Route("api/GetDepartmentNamebyCompID")]
       //  [HttpGet]
        public returndbml<sp_select_DepartmentNamebyCompIDResult> GetDepartmentNamebyCompID(string CompID)
        {
            List<sp_select_DepartmentNamebyCompIDResult> objListState = new List<sp_select_DepartmentNamebyCompIDResult>();
            returndbml<sp_select_DepartmentNamebyCompIDResult> objreturndbmlState = new returndbml<sp_select_DepartmentNamebyCompIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_DepartmentNamebyCompID", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_DepartmentNamebyCompIDResult objState = new sp_select_DepartmentNamebyCompIDResult();
                        ConvertTableToList<sp_select_DepartmentNamebyCompIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        #endregion


        #region OfficeBranch

        [ResponseType(typeof(returndbml))]
       //   [Route("api/insertintoofficeBranchMaster")]
      //     [HttpPost]
        public returndbml insertintoofficeBranchMaster(sp_select_OfficeBranchbySnoResult ObjList)
        {
            returndbml objreturn = new returndbml();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();
            try
            {
                dbCommond = db.GetStoredProcCommand("sp_insertofficeBranchMaster");
                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null)); // dbt
                    }
                }
                try
                {

                    db.ExecuteNonQuery(dbCommond, trans);
                }
                catch (Exception)
                {


                }
                trans.Commit();
                objreturn.StatusId = 1;
                objreturn.Status = "Seccessfully";

            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }


        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/Getofficebranch_SubBranchName")]
       //  [HttpGet]
        public returndbml<select_officebranch_SubBranchNameResult> Getofficebranch_SubBranchName()
        {
            List<select_officebranch_SubBranchNameResult> objListState = new List<select_officebranch_SubBranchNameResult>();
            returndbml<select_officebranch_SubBranchNameResult> objreturndbmlState = new returndbml<select_officebranch_SubBranchNameResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("select_officebranch_SubBranchName");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        select_officebranch_SubBranchNameResult objState = new select_officebranch_SubBranchNameResult();
                        ConvertTableToList<select_officebranch_SubBranchNameResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<select_officebranch_EmpRegistrationbyCompIDResult>))]
       //   [Route("api/Getofficebranch_EmpRegistrationbyCompID")]
       //  [HttpGet]
        public returndbml<select_officebranch_EmpRegistrationbyCompIDResult> Getofficebranch_EmpRegistrationbyCompID(string CompID)
        {
            List<select_officebranch_EmpRegistrationbyCompIDResult> objListState = new List<select_officebranch_EmpRegistrationbyCompIDResult>();
            returndbml<select_officebranch_EmpRegistrationbyCompIDResult> objreturndbmlState = new returndbml<select_officebranch_EmpRegistrationbyCompIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("select_officebranch_EmpRegistrationbyCompID", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        select_officebranch_EmpRegistrationbyCompIDResult objState = new select_officebranch_EmpRegistrationbyCompIDResult();
                        ConvertTableToList<select_officebranch_EmpRegistrationbyCompIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_select_OfficeBranchbySnoResult>))]
       //   [Route("api/GetofficebranchrDetail")]
       //  [HttpGet]
        public returndbml<sp_select_OfficeBranchbySnoResult> GetofficebranchrDetail(string prefixText, string CompID, string BranchId)
        {
            List<sp_select_OfficeBranchbySnoResult> objListState = new List<sp_select_OfficeBranchbySnoResult>();
            returndbml<sp_select_OfficeBranchbySnoResult> objreturndbmlState = new returndbml<sp_select_OfficeBranchbySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_OfficeBranch", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_OfficeBranchbySnoResult objState = new sp_select_OfficeBranchbySnoResult();
                        ConvertTableToList<sp_select_OfficeBranchbySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        #endregion

        #region EmployeeRegistration

       //   [Route("api/CheckDublicateUserName")]
       //  [HttpGet]
        public returndbml<CheckDublicateSubGroupNameResult> CheckDublicateUserName(string UserName, string CompID, string BranchId)
        {
            List<CheckDublicateSubGroupNameResult> objListState = new List<CheckDublicateSubGroupNameResult>();
            returndbml<CheckDublicateSubGroupNameResult> objreturndbmlState = new returndbml<CheckDublicateSubGroupNameResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckDublicateUserName", CompID, BranchId, UserName);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        CheckDublicateSubGroupNameResult objState = new CheckDublicateSubGroupNameResult();
                        ConvertTableToList<CheckDublicateSubGroupNameResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/CheckDublicateEmpMobileNo")]
       //  [HttpGet]
        public returndbml<CheckDublicateSubGroupNameResult> CheckDublicateEmpMobileNo(string MobileNo, string CompID, string BranchId)
        {
            List<CheckDublicateSubGroupNameResult> objListState = new List<CheckDublicateSubGroupNameResult>();
            returndbml<CheckDublicateSubGroupNameResult> objreturndbmlState = new returndbml<CheckDublicateSubGroupNameResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckDublicateEmpMobileNo", CompID, BranchId, MobileNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        CheckDublicateSubGroupNameResult objState = new CheckDublicateSubGroupNameResult();
                        ConvertTableToList<CheckDublicateSubGroupNameResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult>))]
       //   [Route("api/sp_selectID_UserType_UserType_MasterbyCompIdBranchID")]
       //  [HttpGet]
        public returndbml<sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult> sp_selectID_UserType_UserType_MasterbyCompIdBranchID(string CompID, string BranchID)
        {
            List<sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult> objListState = new List<sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult>();
            returndbml<sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult> objreturndbmlState = new returndbml<sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_selectID_UserType_UserType_MasterbyCompIdBranchID", CompID, BranchID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult objState = new sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult();
                        ConvertTableToList<sp_selectID_UserType_UserType_MasterbyCompIdBranchIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_selectDistinct_OfficeTypebyCompIdResult>))]
       //   [Route("api/sp_selectDistinctOfficeTypebyCompId")]
       //  [HttpGet]
        public returndbml<sp_selectDistinct_OfficeTypebyCompIdResult> sp_selectDistinctOfficeTypebyCompId(string CompID)
        {
            List<sp_selectDistinct_OfficeTypebyCompIdResult> objListState = new List<sp_selectDistinct_OfficeTypebyCompIdResult>();
            returndbml<sp_selectDistinct_OfficeTypebyCompIdResult> objreturndbmlState = new returndbml<sp_selectDistinct_OfficeTypebyCompIdResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_selectDistinct OfficeTypebyCompId", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_selectDistinct_OfficeTypebyCompIdResult objState = new sp_selectDistinct_OfficeTypebyCompIdResult();
                        ConvertTableToList<sp_selectDistinct_OfficeTypebyCompIdResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_selectSubBranchNameSnobycompIdOfficeTypeResult>))]
       //   [Route("api/sp_selectSubBranchNameSnobycompIdOfficeType")]
       //  [HttpGet]
        public returndbml<sp_selectSubBranchNameSnobycompIdOfficeTypeResult> sp_selectSubBranchNameSnobycompIdOfficeType(string CompID, string officeType)
        {
            List<sp_selectSubBranchNameSnobycompIdOfficeTypeResult> objListState = new List<sp_selectSubBranchNameSnobycompIdOfficeTypeResult>();
            returndbml<sp_selectSubBranchNameSnobycompIdOfficeTypeResult> objreturndbmlState = new returndbml<sp_selectSubBranchNameSnobycompIdOfficeTypeResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_selectSubBranchNameSnobycompIdOfficeType", CompID, officeType);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_selectSubBranchNameSnobycompIdOfficeTypeResult objState = new sp_selectSubBranchNameSnobycompIdOfficeTypeResult();
                        ConvertTableToList<sp_selectSubBranchNameSnobycompIdOfficeTypeResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        #endregion

        #region SubGroupMaster

        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/selectIDsubgroup")]
       //  [HttpGet]
        public returndbml<selectIDsubgroupResult> selectIDsubgroup()
        {
            List<selectIDsubgroupResult> objListState = new List<selectIDsubgroupResult>();
            returndbml<selectIDsubgroupResult> objreturndbmlState = new returndbml<selectIDsubgroupResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("selectIDsubgroup");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        selectIDsubgroupResult objState = new selectIDsubgroupResult();
                        ConvertTableToList<selectIDsubgroupResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/GetSubgroups")]
       //  [HttpGet]
        public returndbml<selectIDsubgroupResult> GetSubgroups(string CompID, string BranchId)
        {
            List<selectIDsubgroupResult> objListState = new List<selectIDsubgroupResult>();
            returndbml<selectIDsubgroupResult> objreturndbmlState = new returndbml<selectIDsubgroupResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("selectAllsubgroup", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        selectIDsubgroupResult objState = new selectIDsubgroupResult();
                        ConvertTableToList<selectIDsubgroupResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/GetAllLedgerAoutoComplete")]
       //  [HttpGet]
        public returndbml<GetLedgerDetailbySnoResult> GetAllLedgerAoutoComplete(string prefixText, string CompID, string BranchId)
        {
            List<GetLedgerDetailbySnoResult> objListState = new List<GetLedgerDetailbySnoResult>();
            returndbml<GetLedgerDetailbySnoResult> objreturndbmlState = new returndbml<GetLedgerDetailbySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("selectAllNonMemberLedgerAoutoComplete", prefixText, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLedgerDetailbySnoResult objState = new GetLedgerDetailbySnoResult();
                        ConvertTableToList<GetLedgerDetailbySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/selectSubgroupNature")]
       //  [HttpGet]
        public returndbml<selectSubgroupNatureResult> selectSubgroupNature(string SubGroupName)
        {
            List<selectSubgroupNatureResult> objListState = new List<selectSubgroupNatureResult>();
            returndbml<selectSubgroupNatureResult> objreturndbmlState = new returndbml<selectSubgroupNatureResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("[selectSubgroupNature]", SubGroupName);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        selectSubgroupNatureResult objState = new selectSubgroupNatureResult();
                        ConvertTableToList<selectSubgroupNatureResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/selectSubgroupNatureBySubgroupID")]
       //  [HttpGet]
        public returndbml<selectSubgroupNatureResult> selectSubgroupNatureBySubgroupID(string SubGroupName)
        {
            List<selectSubgroupNatureResult> objListState = new List<selectSubgroupNatureResult>();
            returndbml<selectSubgroupNatureResult> objreturndbmlState = new returndbml<selectSubgroupNatureResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("[selectSubgroupNatureBySubGroupID]", SubGroupName);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        selectSubgroupNatureResult objState = new selectSubgroupNatureResult();
                        ConvertTableToList<selectSubgroupNatureResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/GetMaxVNoSubGroupbyCompIDBranchID")]
       //  [HttpGet]
        public returndbml<GetMaxVNoSubGroupbyCompIDBranchIDResult> GetMaxVNoSubGroupbyCompIDBranchID(int CompId, int BranchId)
        {
            List<GetMaxVNoSubGroupbyCompIDBranchIDResult> objListState = new List<GetMaxVNoSubGroupbyCompIDBranchIDResult>();
            returndbml<GetMaxVNoSubGroupbyCompIDBranchIDResult> objreturndbmlState = new returndbml<GetMaxVNoSubGroupbyCompIDBranchIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMaxVNoSubGroupbyCompIDBranchID", CompId, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetMaxVNoSubGroupbyCompIDBranchIDResult objState = new GetMaxVNoSubGroupbyCompIDBranchIDResult();
                        ConvertTableToList<GetMaxVNoSubGroupbyCompIDBranchIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_select_OfficeBranchbySnoResult>))]
       //   [Route("api/GetSubGroupDetail")]
       //  [HttpGet]
        public returndbml<GetSubGroupDetailbySnoResult> GetSubGroupDetail(string prefixText, string CompID, string BranchId)
        {
            List<GetSubGroupDetailbySnoResult> objListState = new List<GetSubGroupDetailbySnoResult>();
            returndbml<GetSubGroupDetailbySnoResult> objreturndbmlState = new returndbml<GetSubGroupDetailbySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetSubGroupDetail", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetSubGroupDetailbySnoResult objState = new GetSubGroupDetailbySnoResult();
                        ConvertTableToList<GetSubGroupDetailbySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_OfficeBranchbySnoResult>))]
       //   [Route("api/CheckDublicateSubGroupName")]
       //  [HttpGet]
        public returndbml<CheckDublicateSubGroupNameResult> CheckDublicateSubGroupName(string SubGroupName, string CompID, string BranchId)
        {
            List<CheckDublicateSubGroupNameResult> objListState = new List<CheckDublicateSubGroupNameResult>();
            returndbml<CheckDublicateSubGroupNameResult> objreturndbmlState = new returndbml<CheckDublicateSubGroupNameResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckDublicateSubGroupName", CompID, BranchId, SubGroupName);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        CheckDublicateSubGroupNameResult objState = new CheckDublicateSubGroupNameResult();
                        ConvertTableToList<CheckDublicateSubGroupNameResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_OfficeBranchbySnoResult>))]
       //   [Route("api/CheckDublicateSubGroupPrefix")]
       //  [HttpGet]
        public returndbml<CheckDublicateSubGroupPrefixResult> CheckDublicateSubGroupPrefix(string GroupPrefix, string CompID, string BranchId)
        {
            List<CheckDublicateSubGroupPrefixResult> objListState = new List<CheckDublicateSubGroupPrefixResult>();
            returndbml<CheckDublicateSubGroupPrefixResult> objreturndbmlState = new returndbml<CheckDublicateSubGroupPrefixResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckDublicateSubGroupPrefix", CompID, BranchId, GroupPrefix);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        CheckDublicateSubGroupPrefixResult objState = new CheckDublicateSubGroupPrefixResult();
                        ConvertTableToList<CheckDublicateSubGroupPrefixResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml))]
       //   [Route("api/insertSubGroupMaster")]
      //     [HttpPost]
        public returndbml insertSubGroupMaster(GetSubGroupDetailbySnoResult ObjList)
        {
            returndbml objreturn = new returndbml();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();
            try
            {
                dbCommond = db.GetStoredProcCommand("sp_insertSubGroupMaster");
                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null)); // dbt
                    }
                }
                try
                {

                    db.ExecuteNonQuery(dbCommond, trans);
                }
                catch (Exception ex)
                {


                }
                trans.Commit();
                objreturn.StatusId = 1;
                objreturn.Status = "Seccessfully";

            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }

        #endregion

        #region Member Open

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetMaxVNoMemberOpen")]
       //  [HttpGet]
        public returndbml<GetMaxSNIdMemberOpenResult> GetMaxVNoMemberOpen(string prefixText, string CompID, string BranchId)
        {
            List<GetMaxSNIdMemberOpenResult> objListState = new List<GetMaxSNIdMemberOpenResult>();
            returndbml<GetMaxSNIdMemberOpenResult> objreturndbmlState = new returndbml<GetMaxSNIdMemberOpenResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMaxVNoMemberOpen", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetMaxSNIdMemberOpenResult objState = new GetMaxSNIdMemberOpenResult();
                        ConvertTableToList<GetMaxSNIdMemberOpenResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetMemberAccIntrestRate")]
       //  [HttpGet]
        public returndbml<GetMemberACCIntrestRateResult> GetMemberAccIntrestRate(string CompID, string BranchId)
        {
            List<GetMemberACCIntrestRateResult> objListState = new List<GetMemberACCIntrestRateResult>();
            returndbml<GetMemberACCIntrestRateResult> objreturndbmlState = new returndbml<GetMemberACCIntrestRateResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberACCIntrestRate", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetMemberACCIntrestRateResult objState = new GetMemberACCIntrestRateResult();
                        ConvertTableToList<GetMemberACCIntrestRateResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/SP_SelectLedgerByLdName")]
       //  [HttpGet]
        public returndbml<SP_SelectLedgerByLdNameResult> SP_SelectLedgerByLdName(string CompID, string BranchId)
        {
            List<SP_SelectLedgerByLdNameResult> objListState = new List<SP_SelectLedgerByLdNameResult>();
            returndbml<SP_SelectLedgerByLdNameResult> objreturndbmlState = new returndbml<SP_SelectLedgerByLdNameResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectLedgerByLdName", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectLedgerByLdNameResult objState = new SP_SelectLedgerByLdNameResult();
                        ConvertTableToList<SP_SelectLedgerByLdNameResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetPosting")]
       //  [HttpGet]
        public returndbml<GetPostingResult> GetPosting()
        {
            List<GetPostingResult> objListState = new List<GetPostingResult>();
            returndbml<GetPostingResult> objreturndbmlState = new returndbml<GetPostingResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetPosting", '2', '2');
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetPostingResult objState = new GetPostingResult();
                        ConvertTableToList<GetPostingResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetRelation")]
       //  [HttpGet]
        public returndbml<GetRelationResult> GetRelation()
        {
            List<GetRelationResult> objListState = new List<GetRelationResult>();
            returndbml<GetRelationResult> objreturndbmlState = new returndbml<GetRelationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetRelation", "2", "2");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetRelationResult objState = new GetRelationResult();
                        ConvertTableToList<GetRelationResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/SelectCategory")]
       //  [HttpGet]
        public returndbml<SelectCategoryResult> SelectCategory()
        {
            List<SelectCategoryResult> objListState = new List<SelectCategoryResult>();
            returndbml<SelectCategoryResult> objreturndbmlState = new returndbml<SelectCategoryResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectCategory");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectCategoryResult objState = new SelectCategoryResult();
                        ConvertTableToList<SelectCategoryResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/CheckLoginPasswordNew")]
       //  [HttpGet]
        public returndbml<sp_GetloginpasswordResult> CheckLoginPasswordNew(string UserName, string Password)
        {
            List<sp_GetloginpasswordResult> objListState = new List<sp_GetloginpasswordResult>();
            returndbml<sp_GetloginpasswordResult> objreturndbmlState = new returndbml<sp_GetloginpasswordResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_Getloginpassword", UserName, Password);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_GetloginpasswordResult objState = new sp_GetloginpasswordResult();
                        ConvertTableToList<sp_GetloginpasswordResult>(dr, ref objState);
                        objState.UserName = dr["UserName"].ToString();
                        objState.UserType = dr["UserType"].ToString();
                        objState.Id = Convert.ToInt32(dr["Id"].ToString());
                        objState.UserName = dr["UserName"].ToString();
                        objState.Name = dr["Name"].ToString();
                        objState.MobileNo = dr["MobileNo"].ToString();
                        objState.compid = Convert.ToInt32(dr["compid"].ToString());
                        objState.BranchID = Convert.ToInt32(dr["BranchID"].ToString());
                        objState.Sno = Convert.ToInt32(dr["Sno"].ToString());


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/SelectEducatioin")]
       //  [HttpGet]
        public returndbml<SP_SelectEducatioinResult> SelectEducatioin()
        {
            List<SP_SelectEducatioinResult> objListState = new List<SP_SelectEducatioinResult>();
            returndbml<SP_SelectEducatioinResult> objreturndbmlState = new returndbml<SP_SelectEducatioinResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectEducatioin");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectEducatioinResult objState = new SP_SelectEducatioinResult();
                        ConvertTableToList<SP_SelectEducatioinResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/SelectOccupation")]
       //  [HttpGet]
        public returndbml<SelectOccupationResult> SelectOccupation()
        {
            List<SelectOccupationResult> objListState = new List<SelectOccupationResult>();
            returndbml<SelectOccupationResult> objreturndbmlState = new returndbml<SelectOccupationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectOccupation");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectOccupationResult objState = new SelectOccupationResult();
                        ConvertTableToList<SelectOccupationResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/SelectDesgnation")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> SelectDesgnation()
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectDesgnation");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        ConvertTableToList<SelectDesgnationResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/FillDocsType")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillDocsType()
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectDocsType");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        ConvertTableToList<SelectDesgnationResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillFinancialYearCombo")]
       //  [HttpGet]
        public returndbml<GetFinencialYearResult> FillFinancialYearCombo(string CompID)
        {
            List<GetFinencialYearResult> objListState = new List<GetFinencialYearResult>();
            returndbml<GetFinencialYearResult> objreturndbmlState = new returndbml<GetFinencialYearResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillFinancialYearCombo", CompID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetFinencialYearResult objState = new GetFinencialYearResult();
                        ConvertTableToList<GetFinencialYearResult>(dr, ref objState);
                        objState.Fyid = Convert.ToInt32(dr["FyId"].ToString());
                        objState.HindiName = dr["FyYear"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/FillFinancialYearForFyOpen")]
       //  [HttpGet]
        public returndbml<GetFinencialYearResult> FillFinancialYearForFyOpen(string CompID, string BranchId)
        {
            List<GetFinencialYearResult> objListState = new List<GetFinencialYearResult>();
            returndbml<GetFinencialYearResult> objreturndbmlState = new returndbml<GetFinencialYearResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillFinancialYearForFyOpen", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetFinencialYearResult objState = new GetFinencialYearResult();
                        ConvertTableToList<GetFinencialYearResult>(dr, ref objState);
                        objState.Fyid = Convert.ToInt32(dr["FyId"].ToString());
                        objState.HindiName = dr["FyYear"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetFinancialYearDetailByFyID")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetFinancialYearDetailByFyID(string CompID, string BranchId, string Fyid)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFinancialYearDetailByFyID", CompID, BranchId, Fyid);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.Status = dr["Status"].ToString();
                        objState.MaturityDate = dr["FyYearTo"].ToString();
                        //ConvertTableToList<Department>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetFinancialYearDetailByFyIDBranchID")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetFinancialYearDetailByFyIDBranchID(string CompID, string BranchId, string Fyid)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFinancialYearDetailByFyIDBranchID", CompID, BranchId, Fyid);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.Status = dr["Status"].ToString();
                        objState.MaturityDate = dr["FyYearTo"].ToString();
                        //ConvertTableToList<Department>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/ProfitandLossForInterestRecieve")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> ProfitandLossForInterestRecieve(string CompID, string BranchId, string Fyid, string FromDate, string Todate)
        {

            if (FromDate == null || FromDate == "" || ToDate == null || Todate == "")
            {

            }
            else
            {
                FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                TDate = DateTime.ParseExact(Todate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);


            }


            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_ProfitandLossForInterestRecieve", CompID, BranchId, FDate, TDate, Fyid);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.ChargeName = dr["GpName"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.LdName = dr["LdNames"].ToString();
                        objState.ClosingBal = Convert.ToDouble(dr["cls"].ToString());
                        objState.LoanPeriod = dr["Count"].ToString();
                        //ConvertTableToList<Department>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {

                    FechLedgerDetail objState = new FechLedgerDetail();
                    objState.ChargeName = "";
                    objState.AccNo = "";
                    objState.LdName = "";
                    objState.ClosingBal = 0;
                    //ConvertTableToList<Department>(dr, ref objState);
                    objListState.Add(objState);


                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/ProfitandLossForIncomeANDExpanse")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> ProfitandLossForIncomeANDExpanse(string CompID, string BranchId, string Fyid, string FromDate, string Todate)
        {

            if (FromDate == null || FromDate == "" || ToDate == null || Todate == "")
            {

            }
            else
            {
                FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                TDate = DateTime.ParseExact(Todate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);


            }


            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_ProfitandLossForInterestRecieveANDExpanse", CompID, BranchId, FDate, TDate, Fyid);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.ChargeName = dr["GpName"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.LdName = dr["LdNames"].ToString();
                        objState.ClosingBal = Convert.ToDouble(dr["cls"].ToString());
                        objState.LoanPeriod = dr["Count"].ToString();
                        objState.SubGroupCode = dr["SubGroupCode"].ToString();
                        //ConvertTableToList<Department>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {

                    FechLedgerDetail objState = new FechLedgerDetail();
                    objState.ChargeName = "";
                    objState.AccNo = "";
                    objState.LdName = "";
                    objState.ClosingBal = 0;
                    //ConvertTableToList<Department>(dr, ref objState);
                    objListState.Add(objState);


                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/ProfitandLossForInterestIndirect")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> ProfitandLossForInterestIndirect(string CompID, string BranchId, string Fyid, string FromDate, string Todate)
        {

            if (FromDate == null || FromDate == "" || ToDate == null || Todate == "")
            {

            }
            else
            {
                FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                TDate = DateTime.ParseExact(Todate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);


            }


            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_ProfitandLossForIndirect", CompID, BranchId, FDate, TDate, Fyid);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.ChargeName = dr["GpName"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.LdName = dr["LdNames"].ToString();
                        objState.ClosingBal = Convert.ToDouble(dr["cls"].ToString());
                        objState.LoanPeriod = dr["Count"].ToString();
                        //ConvertTableToList<Department>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    FechLedgerDetail objState = new FechLedgerDetail();
                    objState.ChargeName = "";
                    objState.AccNo = "";
                    objState.LdName = "";
                    objState.ClosingBal = 0;
                    objListState.Add(objState);

                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/FillComboAccCategory")]
       //  [HttpGet]
        public returndbml<FillComboAccCategoryResult> FillComboAccCategory(string CompID, string BranchId)
        {
            List<FillComboAccCategoryResult> objListState = new List<FillComboAccCategoryResult>();
            returndbml<FillComboAccCategoryResult> objreturndbmlState = new returndbml<FillComboAccCategoryResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillComboAccCategory", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FillComboAccCategoryResult objState = new FillComboAccCategoryResult();
                        ConvertTableToList<FillComboAccCategoryResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/SelectAjent")]
       //  [HttpGet]
        public returndbml<SelectAjentResult> SelectAjent(string CompID, string BranchId)
        {
            List<SelectAjentResult> objListState = new List<SelectAjentResult>();
            returndbml<SelectAjentResult> objreturndbmlState = new returndbml<SelectAjentResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectAjent");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectAjentResult objState = new SelectAjentResult();
                        ConvertTableToList<SelectAjentResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }



        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/SelectState")]
       //  [HttpGet]
        public returndbml<sp_select_StatesResult> SelectState(string CompID, string BranchId)
        {
            List<sp_select_StatesResult> objListState = new List<sp_select_StatesResult>();
            returndbml<sp_select_StatesResult> objreturndbmlState = new returndbml<sp_select_StatesResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_select_States");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_select_StatesResult objState = new sp_select_StatesResult();
                        ConvertTableToList<sp_select_StatesResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetNonMemberLedgerDetail")]
       //  [HttpGet]
        public returndbml<GetLedgerDetailbySnoResult> GetNonMemberLedgerDetail(string prefixText, string CompID, string BranchId)
        {
            List<GetLedgerDetailbySnoResult> objListState = new List<GetLedgerDetailbySnoResult>();
            returndbml<GetLedgerDetailbySnoResult> objreturndbmlState = new returndbml<GetLedgerDetailbySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetNonMemberLedgerDetail", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLedgerDetailbySnoResult objState = new GetLedgerDetailbySnoResult();
                        ConvertTableToList<GetLedgerDetailbySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetAllBranchID")]
       //  [HttpGet]
        public returndbml<GetLedgerDetailbySnoResult> GetAllBranchID(string CompID, string BranchId)
        {
            List<GetLedgerDetailbySnoResult> objListState = new List<GetLedgerDetailbySnoResult>();
            returndbml<GetLedgerDetailbySnoResult> objreturndbmlState = new returndbml<GetLedgerDetailbySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAllBranchID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLedgerDetailbySnoResult objState = new GetLedgerDetailbySnoResult();
                        objState.BranchID = Convert.ToInt32(dr["BranchID"].ToString());
                        objState.LdName = dr["SubBranchName"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetAllBranchIDForOpening")]
       //  [HttpGet]
        public returndbml<GetLedgerDetailbySnoResult> GetAllBranchIDForOpening(string CompID, string BranchId, string FyId)
        {
            List<GetLedgerDetailbySnoResult> objListState = new List<GetLedgerDetailbySnoResult>();
            returndbml<GetLedgerDetailbySnoResult> objreturndbmlState = new returndbml<GetLedgerDetailbySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAllBranchIDForOpening", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLedgerDetailbySnoResult objState = new GetLedgerDetailbySnoResult();
                        objState.BranchID = Convert.ToInt32(dr["BranchID"].ToString());
                        objState.LdName = dr["SubBranchName"].ToString();
                        objState.LMobileNo = dr["PNDLDate"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetLedgerDetail")]
       //  [HttpGet]
        public returndbml<GetLedgerDetailbySnoResult> GetLedgerDetail(string prefixText, string CompID, string BranchId)
        {
            List<GetLedgerDetailbySnoResult> objListState = new List<GetLedgerDetailbySnoResult>();
            returndbml<GetLedgerDetailbySnoResult> objreturndbmlState = new returndbml<GetLedgerDetailbySnoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLedgerDetail", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLedgerDetailbySnoResult objState = new GetLedgerDetailbySnoResult();
                        ConvertTableToList<GetLedgerDetailbySnoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/CheckDublicateLedger")]
       //  [HttpGet]
        public returndbml<CheckDublicateLedgerResult> CheckDublicateLedger(string prefixText, string CompID, string BranchId)
        {
            List<CheckDublicateLedgerResult> objListState = new List<CheckDublicateLedgerResult>();
            returndbml<CheckDublicateLedgerResult> objreturndbmlState = new returndbml<CheckDublicateLedgerResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckDublicateLedger", CompID, BranchId, prefixText);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        CheckDublicateLedgerResult objState = new CheckDublicateLedgerResult();
                        ConvertTableToList<CheckDublicateLedgerResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/fetchLedgerId")]
       //  [HttpGet]
        public returndbml<fetchLedgerIdResult> fetchLedgerId(string prefixText, string CompID, string BranchId)
        {
            List<fetchLedgerIdResult> objListState = new List<fetchLedgerIdResult>();
            returndbml<fetchLedgerIdResult> objreturndbmlState = new returndbml<fetchLedgerIdResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("fetchLedgerId", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        fetchLedgerIdResult objState = new fetchLedgerIdResult();
                        ConvertTableToList<fetchLedgerIdResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/FetchClosingBalance")]
       //  [HttpGet]
        public returndbml<Department> FetchClosingBalance(string CompID, string LedgerId, string FyId, string amt, string BranchId)
        {
            List<Department> objListState = new List<Department>();
            returndbml<Department> objreturndbmlState = new returndbml<Department>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_FetchClosingBal", LedgerId, FyId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        Department objState = new Department();
                        objState.ClosingBal = dr["cl"].ToString();
                        objState.ClosingNature = dr["CloseNature"].ToString();
                        //ConvertTableToList<Department>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {

                    Department dd = new Department();
                    dd.ClosingBal = "0";
                    dd.ClosingNature = "";
                    dd.amt = amt;
                    objListState.Add(dd);
                    objreturndbmlState.returndbmllist = objListState;
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() +
                    ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/FetchClosingBalanceNonMember")]
       //  [HttpGet]
        public returndbml<Department> FetchClosingBalanceNonMember(string CompID, string LedgerId, string FyId, string amt, string BranchId)
        {
            List<Department> objListState = new List<Department>();
            returndbml<Department> objreturndbmlState = new returndbml<Department>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_FetchClosingBal", LedgerId, FyId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        Department objState = new Department();
                        objState.ClosingBal = dr["cl"].ToString();
                        objState.ClosingNature = dr["CloseNature"].ToString();
                        //ConvertTableToList<Department>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {

                    Department dd = new Department();
                    dd.ClosingBal = "0";
                    dd.ClosingNature = "";
                    dd.amt = amt;
                    objListState.Add(dd);
                    objreturndbmlState.returndbmllist = objListState;
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() +
                    ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/FetchClosingBalanceDateBetween")]
       //  [HttpGet]
        public returndbml<Department> FetchClosingBalanceDateBetween(string CompID, string LedgerId, string FyId, string amt, string BranchId, string FromDate, string ToDate)
        {
            List<Department> objListState = new List<Department>();
            returndbml<Department> objreturndbmlState = new returndbml<Department>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetCashBookTotal", LedgerId, FyId, CompID, BranchId, FromDate, ToDate);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        Department objState = new Department();
                        objState.ClosingBal = dr["closingBal"].ToString();
                        objState.ClosingNature = dr["CloseNature"].ToString();
                        //ConvertTableToList<Department>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {

                    Department dd = new Department();
                    dd.ClosingBal = "0";
                    dd.ClosingNature = "";
                    dd.amt = amt;
                    objListState.Add(dd);
                    objreturndbmlState.returndbmllist = objListState;
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() +
                    ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetLedgerMemberShipDetail")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetLedgerMemberShipDetail(string AccNoAcategory, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMembershipChargesDetail", CompID, BranchId, AccNoAcategory);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.MemberShipCharges = dr["Member_Ship_Charges"].ToString();
                        objState.Date = DateTime.Parse(dr[3].ToString());
                        objState.LedgerId = dr["LedgerId"].ToString();
                        objState.ChargeName = dr["ChargeName"].ToString();
                        objState.Compulsoryamt = dr["Compulsoryamt"].ToString();
                        objState.Savingamt = dr["Savingamt"].ToString();
                        objState.AmtShare = dr["AmtShare"].ToString();
                        objState.SrNo = dr["SrNo"].ToString();
                        objState.ShareQty = dr["ShareQty"].ToString();
                        objState.SubGrpPkid = dr["SubGroupCode"].ToString();
                        objState.Nature = dr["Groupprifix"].ToString();
                        objState.LedgerType = dr["LedgerType"].ToString();
                        //   ConvertTableToList<FechLedgerDetail>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetNextMemberID")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> GetNextMemberID(string Prefix, string CompID, string BranchId, string FyID)
        {
            List<GetNextMemberNoResult> objListState = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlState = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetNextMemberNo", CompID, BranchId, Prefix, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objState = new GetNextMemberNoResult();
                        objState.NextMemberNo = dr[0].ToString();
                        objState.NextMeNo = dr[1].ToString();
                        objState.CompBranchCode = dr[2].ToString();
                        objState.CompBranchFyCode = dr[3].ToString();
                        // ConvertTableToList<GetNextMemberNoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<SP_SelectNonMemberLedgerResult>))]
       //   [Route("api/SP_SelectNonMemberLedger")]
       //  [HttpGet]
        public returndbml<SP_SelectNonMemberLedgerResult> SP_SelectNonMemberLedger(string CompID, string BranchId)
        {
            List<SP_SelectNonMemberLedgerResult> objListLedger = new List<SP_SelectNonMemberLedgerResult>();
            returndbml<SP_SelectNonMemberLedgerResult> objreturndbmlLedger = new returndbml<SP_SelectNonMemberLedgerResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectNonMemberLedger", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectNonMemberLedgerResult objLed = new SP_SelectNonMemberLedgerResult();
                        ConvertTableToList<SP_SelectNonMemberLedgerResult>(dr, ref objLed);
                        objListLedger.Add(objLed);
                    }
                    objreturndbmlLedger.StatusId = 1;
                    objreturndbmlLedger.returndbmllist = objListLedger;
                }
                else
                {
                    objreturndbmlLedger.StatusId = 2;
                    objreturndbmlLedger = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlLedger.StatusId = 99;
                objreturndbmlLedger.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlLedger;
        }


       //   [Route("api/FillProduct")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillProduct(string CompID, string BranchId)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectProduct", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillBranchCombo")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillBranchCombo(string CompID, string BranchId, string EmpID)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillBranchByEmpID", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objLed.ProductId = Convert.ToInt32(dr["Sno"].ToString());
                        objLed.ProductName = dr["SubBranchName"].ToString();
                        objListProduct.Add(objLed);


                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    SP_SelectProductResult objLed = new SP_SelectProductResult();

                    //objLed.ProductId = 0;
                    //objLed.ProductName = "";
                    //objListProduct.Add(objLed);
                    //objreturndbmlProduct.returndbmllist = objListProduct;

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillMemberAccount")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillMemberAccount(string CompID, string BranchId, string EmpID)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillMemberAccount", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objLed.ProductId = Convert.ToInt32(dr["Sno"].ToString());
                        objLed.ProductName = dr["SubGroupName"].ToString();
                        objListProduct.Add(objLed);


                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    SP_SelectProductResult objLed = new SP_SelectProductResult();

                    //objLed.ProductId = 0;
                    //objLed.ProductName = "";
                    //objListProduct.Add(objLed);
                    //objreturndbmlProduct.returndbmllist = objListProduct;

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillLoanTypeUnderLoanAcc")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillLoanTypeUnderLoanAcc(string CompID, string BranchId, string EmpID)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillLoanTypeUnderLoanAcc", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objLed.ProductId = Convert.ToInt32(dr["Sno"].ToString());
                        objLed.ProductName = dr["SubGroupName"].ToString();
                        objListProduct.Add(objLed);


                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    SP_SelectProductResult objLed = new SP_SelectProductResult();

                    //objLed.ProductId = 0;
                    //objLed.ProductName = "";
                    //objListProduct.Add(objLed);
                    //objreturndbmlProduct.returndbmllist = objListProduct;

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillRigionalOfficeCombo")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillRigionalOfficeCombo(string CompID, string BranchId, string EmpID)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillRigionalOfficeCombo", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objLed.ProductId = Convert.ToInt32(dr["Sno"].ToString());
                        objLed.ProductName = dr["SubBranchName"].ToString();
                        objListProduct.Add(objLed);


                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    SP_SelectProductResult objLed = new SP_SelectProductResult();

                    //objLed.ProductId = 0;
                    //objLed.ProductName = "";
                    //objListProduct.Add(objLed);
                    //objreturndbmlProduct.returndbmllist = objListProduct;

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillRigionalOfficeComboForManager")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillRigionalOfficeComboForManager(string CompID, string BranchId, string EmpID)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillRigionalOfficeComboForManager", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objLed.ProductId = Convert.ToInt32(dr["Sno"].ToString());
                        objLed.ProductName = dr["SubBranchName"].ToString();
                        objListProduct.Add(objLed);


                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    SP_SelectProductResult objLed = new SP_SelectProductResult();

                    //objLed.ProductId = 0;
                    //objLed.ProductName = "";
                    //objListProduct.Add(objLed);
                    //objreturndbmlProduct.returndbmllist = objListProduct;

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillUnderEmployeebyCombiCode")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillUnderEmployeebyCombiCode(string CompID, string BranchId, string EmpID)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillUnderEmployeebyCombiCode", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objLed.ProductId = Convert.ToInt32(dr["Sno"].ToString());
                        objLed.ProductName = dr["SubBranchName"].ToString();
                        objListProduct.Add(objLed);


                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    SP_SelectProductResult objLed = new SP_SelectProductResult();

                    //objLed.ProductId = 0;
                    //objLed.ProductName = "";
                    //objListProduct.Add(objLed);
                    //objreturndbmlProduct.returndbmllist = objListProduct;

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillUnderBranchbyRO")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillUnderBranchbyRO(string CompID, string BranchId, string EmpID, string RegionalID)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillUnderBranchbyRO", CompID, BranchId, EmpID, RegionalID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objLed.ProductId = Convert.ToInt32(dr["Sno"].ToString());
                        objLed.ProductName = dr["SubBranchName"].ToString();
                        objListProduct.Add(objLed);


                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    SP_SelectProductResult objLed = new SP_SelectProductResult();

                    //objLed.ProductId = 0;
                    //objLed.ProductName = "";
                    //objListProduct.Add(objLed);
                    //objreturndbmlProduct.returndbmllist = objListProduct;

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillFYYearCombo")]
       //  [HttpGet]
        public returndbml<SP_SelectProductResult> FillFYYearCombo(string CompID, string BranchId)
        {
            List<SP_SelectProductResult> objListProduct = new List<SP_SelectProductResult>();
            returndbml<SP_SelectProductResult> objreturndbmlProduct = new returndbml<SP_SelectProductResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillFyYearCombo", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectProductResult objLed = new SP_SelectProductResult();
                        ConvertTableToList<SP_SelectProductResult>(dr, ref objLed);
                        objLed.ProductId = Convert.ToInt32(dr["FyId"].ToString());
                        objLed.ProductName = dr["FyYear"].ToString();
                        objListProduct.Add(objLed);


                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    SP_SelectProductResult objLed = new SP_SelectProductResult();

                    //objLed.ProductId = 0;
                    //objLed.ProductName = "";
                    //objListProduct.Add(objLed);
                    //objreturndbmlProduct.returndbmllist = objListProduct;

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/UpdateSessionBranchIDFyID")]
       //  [HttpGet]
        public returndbml<GetMemberDetail> UpdateSessionBranchIDFyID(string BranchId, string FyID, string BranchName, string FinancialYear, string FyFromDate, string FyToDate)
        {
            List<GetMemberDetail> objListProduct = new List<GetMemberDetail>();
            returndbml<GetMemberDetail> objreturndbmlProduct = new returndbml<GetMemberDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                //DbCommand dbCommond = null;
                //dbCommond = dbState.GetStoredProcCommand("FillBranchByEmpID", BranchId, FyID);
                //dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                //if (dsState.Tables["State"].Rows.Count > 0)
                //{
                //    foreach (DataRow dr in dsState.Tables["State"].Rows)
                //    {
                GetMemberDetail objLed = new GetMemberDetail();
                //ConvertTableToList<GetMemberDetail>(dr, ref objLed);


                objLed.FyId = FyID;
                objLed.BranchID = BranchId;

                objListProduct.Add(objLed);


                //}
                objreturndbmlProduct.StatusId = 1;
                objreturndbmlProduct.returndbmllist = objListProduct;
                //}
                //else
                //{
                //    SP_SelectProductResult objLed = new SP_SelectProductResult();

                //    //objLed.ProductId = 0;
                //    //objLed.ProductName = "";
                //    //objListProduct.Add(objLed);
                //    //objreturndbmlProduct.returndbmllist = objListProduct;

                //    objreturndbmlProduct.StatusId = 2;
                //    objreturndbmlProduct = null;
                //}
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillPlanScheme")]
       //  [HttpGet]
        public returndbml<SP_SelectSchemeResult> FillPlanScheme(string CompID, string BranchId)
        {
            List<SP_SelectSchemeResult> objListScheme = new List<SP_SelectSchemeResult>();
            returndbml<SP_SelectSchemeResult> objreturndbmlPlanScheme = new returndbml<SP_SelectSchemeResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectScheme", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectSchemeResult objLed = new SP_SelectSchemeResult();
                        ConvertTableToList<SP_SelectSchemeResult>(dr, ref objLed);
                        objListScheme.Add(objLed);
                    }
                    objreturndbmlPlanScheme.StatusId = 1;
                    objreturndbmlPlanScheme.returndbmllist = objListScheme;
                }
                else
                {
                    objreturndbmlPlanScheme.StatusId = 2;
                    objreturndbmlPlanScheme = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlPlanScheme.StatusId = 99;
                objreturndbmlPlanScheme.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlPlanScheme;
        }
       //   [Route("api/FillIntrestType")]
       //  [HttpGet]
        public returndbml<SP_SelectSchemeResult> FillIntrestType(string CompID, string BranchId)
        {
            List<SP_SelectSchemeResult> objListScheme = new List<SP_SelectSchemeResult>();
            returndbml<SP_SelectSchemeResult> objreturndbmlPlanScheme = new returndbml<SP_SelectSchemeResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectIntrestType", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SP_SelectSchemeResult objLed = new SP_SelectSchemeResult();
                        ConvertTableToList<SP_SelectSchemeResult>(dr, ref objLed);
                        objListScheme.Add(objLed);
                    }
                    objreturndbmlPlanScheme.StatusId = 1;
                    objreturndbmlPlanScheme.returndbmllist = objListScheme;
                }
                else
                {
                    objreturndbmlPlanScheme.StatusId = 2;
                    objreturndbmlPlanScheme = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlPlanScheme.StatusId = 99;
                objreturndbmlPlanScheme.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlPlanScheme;
        }
        public static string ProductName;
        public static string BtnText;
        public static string Interest;
        public static string PlaneId;
        public static string AccType = "";
        public static int RowIns = 0;
        public static string MemberPrefix;
        [ResponseType(typeof(returndbml))]
       //   [Route("api/insertPlan")]
      //     [HttpPost]

        public returndbml insertPlan(SelectPlaneByPlanIDResult ObjList)
        {
            returndbml objreturn = new returndbml();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbTransaction transs;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();

            try
            {
                dbCommond = db.GetStoredProcCommand("SP_PlaneNameInsert");
                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null)); // dbt

                        if (PropInfoCol.Name == "ProductName")
                        {
                            ProductName = PropInfoCol.GetValue(ObjList, null).ToString();

                        }
                        if (PropInfoCol.Name == "BtnText")
                        {
                            BtnText = PropInfoCol.GetValue(ObjList, null).ToString();

                        }




                    }
                }


                try
                {
                    int RowAffect = 0;
                    RowAffect = db.ExecuteNonQuery(dbCommond, trans);
                    if (RowAffect > 0)
                    {
                        RowIns++;
                    }
                }

                catch (Exception ex)
                {


                }





                if (BtnText == "Update")
                {
                    if (ProductName == "Loan")
                    {

                        dbCommond = db.GetStoredProcCommand("sp_UpdateFloationInterest");
                        foreach (PropertyInfo PropInfoColm in ObjList.GetType().GetProperties())
                        {
                            if (ValidColumn(PropInfoColm.Name))
                            {

                                DbType dbtt = ConvertNullableIntoDatatype(PropInfoColm);
                                if (PropInfoColm.Name == "Interest")
                                {
                                    db.AddInParameter(dbCommond, PropInfoColm.Name.ToString(), dbtt, PropInfoColm.GetValue(ObjList, null)); // dbt
                                }
                                if (PropInfoColm.Name == "PlaneId")
                                {
                                    db.AddInParameter(dbCommond, PropInfoColm.Name.ToString(), dbtt, PropInfoColm.GetValue(ObjList, null)); // dbt
                                }


                            }
                        }

                        try
                        {
                            int RowAffect = 0;
                            RowAffect = db.ExecuteNonQuery(dbCommond, trans);
                        }
                        catch (Exception ex)
                        {


                        }



                    }
                    if (ProductName == "Saving")
                    {
                        AccType = "Saving Account";

                    }
                    else if (ProductName == "Compulsory")
                    {

                        AccType = "Compulsory Account";
                    }
                    else
                    {
                        AccType = "";

                    }
                    if (AccType == "")
                    {


                    }
                    else
                    {
                        dbCommond = db.GetStoredProcCommand("sp_UpdateInterestRate");
                        foreach (PropertyInfo PropInfoColm in ObjList.GetType().GetProperties())
                        {
                            if (ValidColumn(PropInfoColm.Name))
                            {

                                DbType dbtt = ConvertNullableIntoDatatype(PropInfoColm);
                                if (PropInfoColm.Name == "Interest")
                                {
                                    db.AddInParameter(dbCommond, PropInfoColm.Name.ToString(), dbtt, PropInfoColm.GetValue(ObjList, null)); // dbt
                                }
                                if (PropInfoColm.Name == "ProductName")
                                {
                                    db.AddInParameter(dbCommond, PropInfoColm.Name.ToString(), dbtt, AccType); // dbt
                                }


                            }
                        }
                        try
                        {
                            int RowAffect = 0;
                            RowAffect = db.ExecuteNonQuery(dbCommond, trans);
                        }
                        catch (Exception ex)
                        {


                        }

                    }



                }

                if (RowIns > 0)
                {
                    trans.Commit();
                    objreturn.StatusId = 1;
                    objreturn.Status = "Seccessfully";
                }


            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }



        //[ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
        //[Route("api/InsertMemberOpen")]
        //[HttpGet]






        //public List<FormSubmision> InsertMemberDetail(string MemberNo, string MaxVNo, string NextNo, string MemberID, string OpeningDate, string AccCategoryID,
        //  string AgentID, string IntroducerNo, string IntroducerName, string FirstName, string LastName, string FHName, string Email, string DOB, string Gender,
        //  string CategoryID, string EducationID, string OccupationID, string PANNo, string AdharNo, string EmpID, string PresentState, string PresentDistrict, string PresentAddress,
        //  string PresentMobile, string ParmanantState, string ParmanantDistrict, string ParmanantAddress, string ParmanantMobile, string DesignationID, string PostingID, string RelativeName,
        //  string JoiningDate, string RetirementDate, string RelationID, int NoofShare, string ShareAmt, string ShareTotal, string CompulsoryCBXValue, string CompulsoryOPAmt,
        //  string ShavingOpeningAmt, string GrandTotalAmt, string CustomerBankName, string BankACNo, string BranchName, string IFSC, string NomineeName, string NomineeRelationID, string NomineeDOB,
        //  string TransTypeID, string TransTypeText, string DetucteeBankID, string DetucteeBankText, string NomineeBankName, string NomineeBranch, string ChequeNo, string CompId,
        //  string BranchId, string Fyid, string UserId, string UId, string AppTransNo, int TblRowNo, string GetTblChargesType, string GetTblChargesAmt, string GetTblChargesLedID, string MemberPhoto,
        //  string MemberSignature, string ShavingIntrest, string CoumpolseryIntrest, string TotalTblCharges, string ChargesClosingBal, string ChargesClosingNature, string TblRowCount)
        //{

        // string appmax="";
        // double TotalShaving;

        //TotalShaving = (double.Parse(ShavingOpeningAmt) + Convert.ToDouble(TotalTblCharges) + double.Parse(ShareTotal) + double.Parse(CompulsoryOPAmt));

        //    if (TblRowNo == 0)
        //    {

        //        AppTransactionNoClass app = new AppTransactionNoClass();
        //        appmax = app.Max_AppTransactionNo(CompId, Fyid, BranchId);

        //        //Recipt BR = new Recipt();
        //        //Vno = BR.GetMaxVoucher(CompID, BranchId, Fyid, StudentSessionID);
        //        //MxVNoInt = BR.GetMaxVoucherSrNo(CompID, BranchId, Fyid, StudentSessionID);

        //        //Recipt BA = new Recipt();
        //        //MaxRSrNo = BA.GetMaxSr(CompID, BranchId, Fyid);
        //        //AppTransNo = "";

        //        //SubStustus++;
        //    }
        //    else
        //    {


        //    }


        //    using (SqlConnection CN = new SqlConnection(Connection))
        //    {
        //        using (SqlCommand cmd1 = new SqlCommand("CheckDublicateMember", CN))
        //        {

        //            CN.Open();
        //            cmd1.CommandType = CommandType.StoredProcedure;
        //            cmd1.Parameters.AddWithValue("@CompId", CompId);
        //            cmd1.Parameters.AddWithValue("@BranchId", BranchId);
        //            cmd1.Parameters.AddWithValue("@MEMBERACCNO", MemberID);



        //            SqlDataAdapter da = new SqlDataAdapter(cmd1);
        //            DataTable dt = new DataTable();
        //            da.Fill(dt);

        //            if (dt.Rows.Count > 0)
        //            {




        //                List<FormSubmision> objDept = new List<FormSubmision>();
        //                objDept.Add(new FormSubmision
        //                {
        //                    ReturnStaus = "False",


        //                });
        //                return objDept;




        //            }
        //            else
        //            {


        //                using (SqlConnection con = new SqlConnection(Connection))
        //                {
        //                    SqlTransaction objTrans = null;



        //                    try
        //                    {
        //                        con.Open();
        //                        objTrans = con.BeginTransaction();


        //                        if (TblRowNo == 0)
        //                        {

        //                            using (SqlCommand cmd = new SqlCommand("SP_InsertProfessional1", con))
        //                            {
        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@DesignationName", DesignationID);
        //                                cmd.Parameters.AddWithValue("@BatchNo", EmpID);
        //                                cmd.Parameters.AddWithValue("@JoiningDate", DateTime.ParseExact(JoiningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@RetiredDate", DateTime.ParseExact(RetirementDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@Relative", RelativeName);
        //                                cmd.Parameters.AddWithValue("@Relation", RelationID);
        //                                cmd.Parameters.AddWithValue("@Position", PostingID);
        //                                cmd.Parameters.AddWithValue("@Office", "0");
        //                                cmd.Parameters.AddWithValue("@Field", "0");
        //                                cmd.Parameters.AddWithValue("@nmId", MemberID);
        //                                cmd.Parameters.AddWithValue("@DetucteeBank", DetucteeBankID);
        //                                cmd.Parameters.AddWithValue("@Column1", "");
        //                                cmd.Parameters.AddWithValue("@Column2", 0);
        //                                cmd.Parameters.AddWithValue("@Columnsdate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                                cmd.Transaction = objTrans;
        //                                int rowaffected1 = cmd.ExecuteNonQuery();
        //                                if (rowaffected1 > 0)
        //                                {

        //                                }
        //                                else
        //                                {

        //                                }


        //                            }

        //                            using (SqlCommand cmd = new SqlCommand("SP_InsertCustomerBank", con))
        //                            {
        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@BankName", CustomerBankName);
        //                                cmd.Parameters.AddWithValue("@AccountNumber", BankACNo);
        //                                cmd.Parameters.AddWithValue("@BranchName", BranchName);
        //                                cmd.Parameters.AddWithValue("@Ifsc", IFSC);
        //                                cmd.Parameters.AddWithValue("@nmId", MemberID);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                                cmd.Transaction = objTrans;
        //                                int rowaffected3 = cmd.ExecuteNonQuery();
        //                                if (rowaffected3 > 0)
        //                                {
        //                                }
        //                                else
        //                                {
        //                                }


        //                            }

        //                            using (SqlCommand cmd = new SqlCommand("SP_InsertLoacal", con))
        //                            {

        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@PAddress", ParmanantAddress);
        //                                if (ParmanantState == null || ParmanantState == "")
        //                                {
        //                                    cmd.Parameters.AddWithValue("@PState", 0);
        //                                }
        //                                else
        //                                {
        //                                    cmd.Parameters.AddWithValue("@PState", ParmanantState);
        //                                }

        //                                if (ParmanantDistrict == null || ParmanantDistrict == "")
        //                                {
        //                                    cmd.Parameters.AddWithValue("@PDistrict", 0);
        //                                    cmd.Parameters.AddWithValue("@PCity", 0);
        //                                }
        //                                else
        //                                {
        //                                    cmd.Parameters.AddWithValue("@PDistrict", ParmanantDistrict);
        //                                    cmd.Parameters.AddWithValue("@PCity", ParmanantDistrict);
        //                                }



        //                                cmd.Parameters.AddWithValue("@PPhoneNo", ParmanantMobile);
        //                                cmd.Parameters.AddWithValue("@PMobileNo", ParmanantMobile);
        //                                cmd.Parameters.AddWithValue("@LAddress", PresentAddress);

        //                                if (PresentState == null || PresentState == "")
        //                                {
        //                                    cmd.Parameters.AddWithValue("@LState", 0);
        //                                }
        //                                else
        //                                {
        //                                    cmd.Parameters.AddWithValue("@LState", PresentState);
        //                                }


        //                                if (PresentDistrict == null || PresentDistrict == "")
        //                                {
        //                                    cmd.Parameters.AddWithValue("@LDistrict", 0);

        //                                    cmd.Parameters.AddWithValue("@LCity", 0);
        //                                }
        //                                else
        //                                {
        //                                    cmd.Parameters.AddWithValue("@LDistrict", PresentDistrict);

        //                                    cmd.Parameters.AddWithValue("@LCity", PresentDistrict);
        //                                }

        //                                cmd.Parameters.AddWithValue("@LPhoneNo", PresentMobile);
        //                                cmd.Parameters.AddWithValue("@LMobileNo", PresentMobile);
        //                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                                cmd.Transaction = objTrans;
        //                                int i = cmd.ExecuteNonQuery();
        //                                if (i == 1)
        //                                {

        //                                }
        //                                else
        //                                {
        //                                }

        //                            }


        //                            using (SqlCommand cmd = new SqlCommand("SP_InsertNewMeberAccount", con))
        //                            {
        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@Tyepeofac", "Single");
        //                                cmd.Parameters.AddWithValue("@IntroducerName", IntroducerName);
        //                                cmd.Parameters.AddWithValue("@IntroducerNumber", IntroducerNo);
        //                                cmd.Parameters.AddWithValue("@FirstName", FirstName);
        //                                cmd.Parameters.AddWithValue("@LastName", LastName);
        //                                cmd.Parameters.AddWithValue("@FatherName", FHName);
        //                                cmd.Parameters.AddWithValue("@EmailId", Email);
        //                                cmd.Parameters.AddWithValue("@Dob", DateTime.ParseExact(DOB, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@Gender", Gender);
        //                                cmd.Parameters.AddWithValue("@Categories", CategoryID);
        //                                cmd.Parameters.AddWithValue("@Education", EducationID);
        //                                cmd.Parameters.AddWithValue("@MeritalStatus", "");
        //                                cmd.Parameters.AddWithValue("@Occupation", OccupationID);
        //                                cmd.Parameters.AddWithValue("@PanNo", PANNo);
        //                                cmd.Parameters.AddWithValue("@AdharNo", AdharNo);
        //                                cmd.Parameters.AddWithValue("@MEMBER_ACCNO", MemberID);
        //                                cmd.Parameters.AddWithValue("@Member_OpeningDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

        //                                if (MemberPhoto.Length > 0)
        //                                {

        //                                    cmd.Parameters.AddWithValue("@PhotoPath", MemberPhoto);

        //                                    cmd.Parameters.AddWithValue("@Photo", DBNull.Value);
        //                                    cmd.Parameters["@Photo"].SqlDbType = SqlDbType.Image;
        //                                }
        //                                else
        //                                {

        //                                    cmd.Parameters.AddWithValue("@Photo", DBNull.Value);
        //                                    cmd.Parameters["@Photo"].SqlDbType = SqlDbType.Image;

        //                                    cmd.Parameters.AddWithValue("@PhotoPath", "");


        //                                }
        //                                if (MemberSignature.Length > 0)
        //                                {

        //                                    cmd.Parameters.AddWithValue("@SignaturePath", MemberSignature);
        //                                    cmd.Parameters.AddWithValue("@MemberSignature", DBNull.Value);
        //                                    cmd.Parameters["@MemberSignature"].SqlDbType = SqlDbType.Image;


        //                                }
        //                                else
        //                                {
        //                                    cmd.Parameters.AddWithValue("@MemberSignature", DBNull.Value);
        //                                    cmd.Parameters["@MemberSignature"].SqlDbType = SqlDbType.Image;
        //                                    cmd.Parameters.AddWithValue("@SignaturePath", "");
        //                                }
        //                                cmd.Parameters.AddWithValue("@MemberNO", MemberNo);
        //                                cmd.Parameters.AddWithValue("@Membercat", AccCategoryID);
        //                                cmd.Parameters.AddWithValue("@NextMemberNo", NextNo);
        //                                cmd.Parameters.AddWithValue("@Compid", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);


        //                                cmd.Transaction = objTrans;
        //                                cmd.ExecuteNonQuery();

        //                            }


        //                            using (SqlCommand cmd = new SqlCommand("SP_InsertNomineeDetails", con))
        //                            {

        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@NomineeName", NomineeName);
        //                                cmd.Parameters.AddWithValue("@Relation", NomineeRelationID);
        //                                cmd.Parameters.AddWithValue("@DoB", DateTime.ParseExact(NomineeDOB, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

        //                                cmd.Transaction = objTrans;
        //                                int i = cmd.ExecuteNonQuery();
        //                                if (i == 1)
        //                                {

        //                                }
        //                                else
        //                                {
        //                                }


        //                            }


        //                            using (SqlCommand cmd = new SqlCommand("InsertSavingAcc", con))
        //                            {

        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
        //                                cmd.Parameters.AddWithValue("@OpeningAmount", ShavingOpeningAmt);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

        //                                cmd.Transaction = objTrans;
        //                                int i = cmd.ExecuteNonQuery();
        //                                if (i == 1)
        //                                {

        //                                }
        //                                else
        //                                {
        //                                }


        //                            }
        //                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,GpName,status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID)", con))
        //                            {
        //                                cmd.Parameters.AddWithValue("@GpName", "Saving Account");
        //                                cmd.Parameters.AddWithValue("@InterestRate", ShavingIntrest);
        //                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
        //                                cmd.Parameters.AddWithValue("@Nature", "Credit");
        //                                cmd.Parameters.AddWithValue("@UserId", UserId);
        //                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@OpeningBal", ShavingOpeningAmt);
        //                                cmd.Parameters.AddWithValue("@EmailId", Email);
        //                                cmd.Parameters.AddWithValue("@LdName", FirstName + " " + LastName);
        //                                cmd.Parameters.AddWithValue("@AccNo", "SB" + MemberID.Substring(2, MemberID.Length - 2));
        //                                cmd.Parameters.AddWithValue("@AccType", "Saving Account");
        //                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

        //                                cmd.Parameters.AddWithValue("@AgentId", AgentID);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);


        //                                cmd.Transaction = objTrans;
        //                                cmd.ExecuteNonQuery();


        //                            }
        //                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,GpName,status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID)", con))
        //                            {

        //                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
        //                                cmd.Parameters.AddWithValue("@Nature", "Credit");
        //                                cmd.Parameters.AddWithValue("@GpName", "Share Account");
        //                                cmd.Parameters.AddWithValue("@UserId", UserId);
        //                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@OpeningBal", ShareTotal);
        //                                cmd.Parameters.AddWithValue("@LdName", FirstName + " " + LastName);
        //                                cmd.Parameters.AddWithValue("@EmailId", Email);
        //                                cmd.Parameters.AddWithValue("@AccNo", "SH" + MemberID.Substring(2, MemberID.Length - 2));
        //                                cmd.Parameters.AddWithValue("@AccType", "Share Account");
        //                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

        //                                cmd.Parameters.AddWithValue("@AgentId", AgentID);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

        //                                cmd.Transaction = objTrans;
        //                                cmd.ExecuteNonQuery();


        //                            }

        //                            if (CompulsoryCBXValue == "Yes")
        //                            {
        //                                using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID)", con))
        //                                {
        //                                    cmd.Parameters.AddWithValue("@MemberId", MemberID);
        //                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
        //                                    cmd.Parameters.AddWithValue("@GpName", "Compulsory Account");
        //                                    cmd.Parameters.AddWithValue("@InterestRate", CoumpolseryIntrest);
        //                                    cmd.Parameters.AddWithValue("@UserId", UserId);
        //                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                    cmd.Parameters.AddWithValue("@LdName", FirstName + " " + LastName);
        //                                    cmd.Parameters.AddWithValue("@OpeningBal", CompulsoryOPAmt);
        //                                    cmd.Parameters.AddWithValue("@EmailId", Email);
        //                                    cmd.Parameters.AddWithValue("@AccNo", "CP" + MemberID.Substring(2, MemberID.Length - 2));
        //                                    cmd.Parameters.AddWithValue("@AccType", "Compulsory Account");
        //                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                    cmd.Parameters.AddWithValue("@AgentId", AgentID);
        //                                    cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);

        //                                    cmd.Transaction = objTrans;
        //                                    cmd.ExecuteNonQuery();

        //                                }
        //                                using (SqlCommand cmd = new SqlCommand("SP_InsertCompulasry", con))
        //                                {
        //                                    cmd.CommandType = CommandType.StoredProcedure;
        //                                    cmd.Parameters.AddWithValue("@MemberId", MemberID);
        //                                    cmd.Parameters.AddWithValue("@TransactionType", TransTypeID);
        //                                    cmd.Parameters.AddWithValue("@OpeningAmount", CompulsoryOPAmt);
        //                                    cmd.Parameters.AddWithValue("@BankName", CustomerBankName);
        //                                    cmd.Parameters.AddWithValue("@BranchName", BranchName);
        //                                    cmd.Parameters.AddWithValue("@Cheque", ChequeNo);
        //                                    cmd.Parameters.AddWithValue("@NomineeName", NomineeName);
        //                                    cmd.Parameters.AddWithValue("@NomineeRelation", NomineeRelationID);
        //                                    cmd.Parameters.AddWithValue("@AccNo", "CP" + MemberID.Substring(2, MemberID.Length - 2));
        //                                    cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                                    cmd.Transaction = objTrans;
        //                                    cmd.ExecuteNonQuery();

        //                                }
        //                            }

        //                            using (SqlCommand cmd = new SqlCommand("sp_InsertSahre", con))
        //                            {
        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@LedgerId", "SH" + MemberID.Substring(2, MemberID.Length - 2));
        //                                cmd.Parameters.AddWithValue("@Amount", NoofShare);
        //                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@Particular", "Account Open");
        //                                cmd.Parameters.AddWithValue("@SharePrice", "");
        //                                cmd.Parameters.AddWithValue("@ShareQty", NoofShare);
        //                                cmd.Parameters.AddWithValue("@TranType", "Sale");
        //                                cmd.Parameters.AddWithValue("@TransactionId", MaxVNo);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                                cmd.Transaction = objTrans;
        //                                cmd.ExecuteNonQuery();

        //                            }

        //                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
        //                            {
        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@VType", "R");
        //                                cmd.Parameters.AddWithValue("@Nature", "Credit");
        //                                cmd.Parameters.AddWithValue("@Particular", "By " + TransTypeText);
        //                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@FY", Fyid);
        //                                cmd.Parameters.AddWithValue("@UserId", UserId);
        //                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@Amount", ShareTotal);
        //                                cmd.Parameters.AddWithValue("@ClosingBal", ShareTotal);
        //                                cmd.Parameters.AddWithValue("@BankName", NomineeBankName);
        //                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
        //                                cmd.Parameters.AddWithValue("@BranchName", NomineeBankName);
        //                                cmd.Parameters.AddWithValue("@CheckNumber", ChequeNo);
        //                                cmd.Parameters.AddWithValue("@Narration", "Share");
        //                                cmd.Parameters.AddWithValue("@LedgerId", "SH" + MemberID.Substring(2, MemberID.Length - 2));
        //                                cmd.Parameters.AddWithValue("@VNo", MaxVNo);
        //                                cmd.Parameters.AddWithValue("@LedgerAccNo", TransTypeID);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

        //                                cmd.Transaction = objTrans;
        //                                cmd.ExecuteNonQuery();

        //                            }

        //                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
        //                            {
        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@VType", "R");
        //                                cmd.Parameters.AddWithValue("@Nature", "Credit");
        //                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@Amount", (Convert.ToDouble(ShavingOpeningAmt)));
        //                                cmd.Parameters.AddWithValue("@BankName", NomineeBankName);
        //                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
        //                                cmd.Parameters.AddWithValue("@ClosingBal", (Convert.ToDouble(ShavingOpeningAmt)));
        //                                cmd.Parameters.AddWithValue("@FY", Fyid);
        //                                cmd.Parameters.AddWithValue("@Particular", "By " + TransTypeText);
        //                                cmd.Parameters.AddWithValue("@UserId", UserId);
        //                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@BranchName", NomineeBranch);
        //                                cmd.Parameters.AddWithValue("@CheckNumber", ChequeNo);
        //                                cmd.Parameters.AddWithValue("@Narration", "Saving");
        //                                cmd.Parameters.AddWithValue("@LedgerId", "SB" + MemberID.Substring(2, MemberID.Length - 2));
        //                                cmd.Parameters.AddWithValue("@VNo", MaxVNo);
        //                                cmd.Parameters.AddWithValue("@LedgerAccNo", TransTypeID);
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                                cmd.Transaction = objTrans;
        //                                cmd.ExecuteNonQuery();

        //                            }

        //                            if (CompulsoryCBXValue == "Yes")
        //                            {

        //                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
        //                                {
        //                                    cmd.CommandType = CommandType.StoredProcedure;
        //                                    cmd.Parameters.AddWithValue("@VType", "R");
        //                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
        //                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
        //                                    cmd.Parameters.AddWithValue("@Particular", "By " + TransTypeText);
        //                                    cmd.Parameters.AddWithValue("@FY", Fyid);
        //                                    cmd.Parameters.AddWithValue("@UserId", UserId);
        //                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                    cmd.Parameters.AddWithValue("@Amount", CompulsoryOPAmt);
        //                                    cmd.Parameters.AddWithValue("@ClosingBal", CompulsoryOPAmt);
        //                                    cmd.Parameters.AddWithValue("@BankName", NomineeBankName);
        //                                    cmd.Parameters.AddWithValue("@BranchName", NomineeBranch);
        //                                    cmd.Parameters.AddWithValue("@CheckNumber", ChequeNo);
        //                                    cmd.Parameters.AddWithValue("@Narration", "Compulsory");
        //                                    cmd.Parameters.AddWithValue("@LedgerId", "CP" + MemberID.Substring(2, MemberID.Length - 2));
        //                                    cmd.Parameters.AddWithValue("@VNo", MaxVNo);
        //                                    cmd.Parameters.AddWithValue("@LedgerAccNo", TransTypeID);
        //                                    cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                                    cmd.Transaction = objTrans;
        //                                    cmd.ExecuteNonQuery();
        //                                }
        //                            }


        //                        }
        //                        else
        //                        {
        //                        }

        //                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
        //                        {
        //                            cmd.CommandType = CommandType.StoredProcedure;
        //                            cmd.Parameters.AddWithValue("@VType", "R");
        //                            cmd.Parameters.AddWithValue("@Nature", "Credit");
        //                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                            cmd.Parameters.AddWithValue("@Amount", GetTblChargesAmt);
        //                            cmd.Parameters.AddWithValue("@Particular", "By " + "ME" + MemberID.Substring(2, MemberID.Length - 2));
        //                            if (ChargesClosingBal == "" || ChargesClosingBal == null)
        //                            {
        //                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
        //                            }
        //                            else
        //                            {
        //                                cmd.Parameters.AddWithValue("@ClosingBal", ChargesClosingBal);
        //                            }
        //                            cmd.Parameters.AddWithValue("@CloseNature", ChargesClosingNature);
        //                            cmd.Parameters.AddWithValue("@BankName", NomineeBankName);
        //                            cmd.Parameters.AddWithValue("@BranchName", NomineeBranch);
        //                            cmd.Parameters.AddWithValue("@CheckNumber", ChequeNo);
        //                            cmd.Parameters.AddWithValue("@Narration", "Opening Charges For " + MemberID);
        //                            cmd.Parameters.AddWithValue("@LedgerId", GetTblChargesLedID);
        //                            cmd.Parameters.AddWithValue("@FY", Fyid);
        //                            cmd.Parameters.AddWithValue("@UserId", UserId);
        //                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                            cmd.Parameters.AddWithValue("@VNo", MaxVNo);
        //                            cmd.Parameters.AddWithValue("@LedgerAccNo", TransTypeID);
        //                            cmd.Parameters.AddWithValue("@CompID", CompId);
        //                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                            cmd.Transaction = objTrans;
        //                            cmd.ExecuteNonQuery();

        //                        }


        //                        if (TblRowNo == Convert.ToInt32(TblRowCount) - 1)
        //                        {
        //                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
        //                            {
        //                                cmd.CommandType = CommandType.StoredProcedure;
        //                                cmd.Parameters.AddWithValue("@VType", "R");
        //                                cmd.Parameters.AddWithValue("@Nature", "Debit");
        //                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@Amount", TotalShaving);
        //                                cmd.Parameters.AddWithValue("@BankName", NomineeBankName);
        //                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
        //                                cmd.Parameters.AddWithValue("@Particular", "To " + "Member Open " + MemberID);
        //                                cmd.Parameters.AddWithValue("@ClosingBal", TotalShaving);
        //                                cmd.Parameters.AddWithValue("@BranchName", NomineeBranch);
        //                                cmd.Parameters.AddWithValue("@CheckNumber", ChequeNo);
        //                                cmd.Parameters.AddWithValue("@Narration", "Saving");
        //                                cmd.Parameters.AddWithValue("@FY", Fyid);
        //                                cmd.Parameters.AddWithValue("@UserId", UserId);
        //                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
        //                                cmd.Parameters.AddWithValue("@LedgerId", TransTypeID);
        //                                cmd.Parameters.AddWithValue("@VNo", MaxVNo);
        //                                cmd.Parameters.AddWithValue("@LedgerAccNo", "SB" + MemberID.Substring(2, MemberID.Length - 2));
        //                                cmd.Parameters.AddWithValue("@CompID", CompId);
        //                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
        //                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
        //                                cmd.Transaction = objTrans;
        //                                cmd.ExecuteNonQuery();

        //                            }
        //                        }
        //                        if (TblRowNo == 0)
        //                        {

        //                            AppTransactionNoClass appt = new AppTransactionNoClass();
        //                            int wer = appt.Insert_AppTransaction("R", appmax, CompId, Fyid, BranchId, "");
        //                        }
        //                        objTrans.Commit();

        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        objTrans.Rollback();

        //                    }
        //                    finally
        //                    {

        //                    }

        //                }



        //                List<FormSubmision> objDept = new List<FormSubmision>();
        //                objDept.Add(new FormSubmision
        //                {
        //                    ReturnStaus = "True",
        //                    //SendVNo = Vno
        //                    SendVNo = appmax

        //                });
        //                return objDept;






        //            }
        //            //return objDept;

        //        }

        //    }


        //    //List<FormSubmision> objDep = new List<FormSubmision>();

        //  //  return objDep;

        //}


        public static string AppTransSrNo;
        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/InsertLedger")]
      //     [HttpPost]
        public List<FormSubmision> InsertLedger(InsertMemberRegistration objlist)
        {
            DateTime OpDate;
            DateTime DateTime;
            objlist.CheckLdName = Regex.Replace(objlist.LdName, @"\s", "");

            if (objlist.DateTime == null)
            {
                objlist.DateTime = DateTime.Now.ToString("dd-MM-yyyy");
                //DateTime = DateTime.ParseExact(DateTime.Now.ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                //DateTime = DateTime.ParseExact(DateTime.Now.ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture);
            }
            if (objlist.HindiName == null)
            {
                objlist.HindiName = "";
            }

            if (objlist.OpeningDate == null)
            {
                objlist.OpeningDate = DateTime.Now.ToString("dd-MM-yyyy");

                //OpDate = DateTime.ParseExact(DateTime.Now.ToString(), @"dd-MM-yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                //OpDate = DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
            }
            if (objlist.AccNo == null)
            {
                objlist.AccNo = "";
            }
            if (objlist.Sno == null)
            {
                objlist.Sno = "";
            }
            if (objlist.OpeningBal == null || objlist.OpeningBal == "")
            {
                objlist.OpeningBal = "0";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                            MxVo = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "R");
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                        }

                        if (objlist.AllBranch == "Yes")
                        {



                            using (SqlCommand cmd = new SqlCommand("InsertLedger", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@AccNo", objlist.AccNo);
                                cmd.Parameters.AddWithValue("@LdName ", objlist.LdName);
                                cmd.Parameters.AddWithValue("@GpName", objlist.GpName);
                                cmd.Parameters.AddWithValue("@HindiName", objlist.HindiName);
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.OpeningBal);
                                cmd.Parameters.AddWithValue("@Nature ", objlist.Nature);
                                cmd.Parameters.AddWithValue("@UserId ", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime  ", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@OpeningDate ", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));


                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@compid", objlist.Compid);
                                cmd.Parameters.AddWithValue("@Sno", objlist.Sno);
                                cmd.Parameters.AddWithValue("@CheckLdName", objlist.CheckLdName);
                                cmd.Parameters.AddWithValue("@Status", objlist.Status);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.Add("@ReturnAccNo", SqlDbType.VarChar, 500);
                                cmd.Parameters["@ReturnAccNo"].Direction = ParameterDirection.Output;

                                cmd.Transaction = objTrans;

                                cmd.ExecuteNonQuery();
                                objlist.AccNo = cmd.Parameters["@ReturnAccNo"].Value.ToString();




                            }
                            using (SqlCommand cmd = new SqlCommand("sp_InsertVoucher", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", objlist.Nature);
                                cmd.Parameters.AddWithValue("@Amount", objlist.OpeningBal);
                                cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.LdName + "");
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.Nature);
                                cmd.Parameters.AddWithValue("@BankName", "");
                                cmd.Parameters.AddWithValue("@BranchName", "");
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.OpeningBal);
                                cmd.Parameters.AddWithValue("@CheckNumber", "");
                                cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));


                                cmd.Parameters.AddWithValue("@Narration", "Opening Balance");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                cmd.Parameters.AddWithValue("@Vno", MxVo);
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));


                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                cmd.Transaction = objTrans;
                                int RowAffect = cmd.ExecuteNonQuery();


                                if (RowAffect > 0)
                                {
                                    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    int wer = appt.Insert_AppTransaction("R", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    objTrans.Commit();
                                }

                            }
                        }
                        else
                        {
                            using (SqlCommand cmd = new SqlCommand("InsertLedger", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@AccNo", objlist.AccNo);
                                cmd.Parameters.AddWithValue("@LdName ", objlist.LdName);
                                cmd.Parameters.AddWithValue("@GpName", objlist.GpName);
                                cmd.Parameters.AddWithValue("@HindiName", objlist.HindiName);
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.OpeningBal);
                                cmd.Parameters.AddWithValue("@Nature ", objlist.Nature);
                                cmd.Parameters.AddWithValue("@UserId ", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime  ", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@OpeningDate ", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));


                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@compid", objlist.Compid);
                                cmd.Parameters.AddWithValue("@Sno", objlist.Sno);
                                cmd.Parameters.AddWithValue("@CheckLdName", objlist.CheckLdName);
                                cmd.Parameters.AddWithValue("@Status", objlist.Status);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.Add("@ReturnAccNo", SqlDbType.VarChar, 500);
                                cmd.Parameters["@ReturnAccNo"].Direction = ParameterDirection.Output;

                                cmd.Transaction = objTrans;

                                cmd.ExecuteNonQuery();
                                objlist.AccNo = cmd.Parameters["@ReturnAccNo"].Value.ToString();




                            }
                            using (SqlCommand cmd = new SqlCommand("sp_InsertVoucher", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", objlist.Nature);
                                cmd.Parameters.AddWithValue("@Amount", objlist.OpeningBal);
                                cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.LdName + "");
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.Nature);
                                cmd.Parameters.AddWithValue("@BankName", "");
                                cmd.Parameters.AddWithValue("@BranchName", "");
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.OpeningBal);
                                cmd.Parameters.AddWithValue("@CheckNumber", "");
                                cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));


                                cmd.Parameters.AddWithValue("@Narration", "Opening Balance");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                cmd.Parameters.AddWithValue("@Vno", MxVo);
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));


                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                cmd.Transaction = objTrans;
                                int RowAffect = cmd.ExecuteNonQuery();


                                if (RowAffect > 0)
                                {
                                    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    int wer = appt.Insert_AppTransaction("R", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    objTrans.Commit();
                                }

                            }
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.AccNo

            });
            return objDept;
        }

        public static string appmax;
        public static string MemberID;
        public static string MxVo;
        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/InsertMemberOpen")]
      //     [HttpPost]
        public List<FormSubmision> InsertMemberDetail(InsertMemberOpen objlist)
        {


            double TotalShaving;
            if (objlist.ShavingIntrest == null || objlist.ShavingIntrest == "")
            {
                objlist.ShavingIntrest = "0";
            }
            if (objlist.AccType == null)
            {
                objlist.AccType = "";
            }
            if (objlist.OpeningDate == null)
            {
                objlist.OpeningDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AdharNo == null)
            {
                objlist.AdharNo = "";

            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.BankACNo == null)
            {
                objlist.BankACNo = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChargesClosingBal == null)
            {

                objlist.ChargesClosingBal = "0";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.CompulsoryOPAmt == null)
            {
                objlist.CompulsoryOPAmt = "0";
            }
            if (objlist.CoumpolseryIntrest == null)
            {
                objlist.CoumpolseryIntrest = "0";
            }
            if (objlist.CustomerBankName == null)
            {
                objlist.CustomerBankName = "";
            }
            if (objlist.DOB == null)
            {
                objlist.DOB = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.Email == null)
            {
                objlist.Email = "";

            }
            if (objlist.EmpID == null)
            {
                objlist.EmpID = "";
            }
            if (objlist.FHName == null)
            {
                objlist.FHName = "";

            }
            if (objlist.IFSC == null)
            {
                objlist.IFSC = "";
            }
            if (objlist.IntroducerName == null)
            {
                objlist.IntroducerName = "";

            }
            if (objlist.IntroducerNo == null)
            {
                objlist.IntroducerNo = "";

            }
            if (objlist.JoiningDate == null)
            {
                objlist.JoiningDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.MemberPhoto == null)
            {
                objlist.MemberPhoto = "";
            }
            if (objlist.MemberSignature == null)
            {
                objlist.MemberSignature = "";
            }
            if (objlist.NomineeBankName == null)
            {
                objlist.NomineeBankName = "";

            }
            if (objlist.NomineeName == null)
            {
                objlist.NomineeName = "";
            }
            if (objlist.NomineeBranch == null)
            {
                objlist.NomineeBranch = "";
            }
            if (objlist.RetirementDate == null)
            {
                objlist.RetirementDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.NomineeDOB == null)
            {
                objlist.NomineeDOB = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.PANNo == null)
            {
                objlist.PANNo = "";
            }
            if (objlist.RelativeName == null)
            {
                objlist.RelativeName = "";
            }
            if (objlist.ChargesClosingNature == null)
            {
                objlist.ChargesClosingNature = "";
            }
            if (objlist.ParmanantAddress == null)
            {
                objlist.ParmanantAddress = "";
            }
            if (objlist.ParmanantMobile == null)
            {
                objlist.ParmanantMobile = "0";
            }
            if (objlist.PresentAddress == null)
            {
                objlist.PresentAddress = "";
            }
            if (objlist.PresentMobile == null)
            {
                objlist.PresentMobile = "0";
            }
            if (objlist.ParmanantState == null)
            {
                objlist.ParmanantState = "0";
            }
            if (objlist.ParmanantDistrict == null)
            {
                objlist.ParmanantDistrict = "0";
            }
            if (objlist.PresentState == null)
            {
                objlist.PresentState = "0";

            }
            if (objlist.PresentDistrict == null)
            {
                objlist.PresentDistrict = "0";
            }
            if (objlist.RelativeName == null)
            {
                objlist.RelativeName = "";
            }
            if (objlist.CompBranchCode == null)
            {
                objlist.CompBranchCode = "0";
            }
            if (objlist.CompBranchFyCode == null)
            {
                objlist.CompBranchFyCode = "0";
            }
            if (objlist.GrandTotal == null || objlist.GrandTotal == "")
            {
                objlist.GrandTotal = "0";
            }

            objlist.MemberID = "";



            if (objlist.TblRowNo == 0)
            {

                AppTransactionNoClass app = new AppTransactionNoClass();
                appmax = app.Max_AppTransactionNo(objlist.CompId, objlist.Fyid, objlist.BranchId);

                MxVo = app.GetMaxVNo(objlist.CompId, objlist.BranchId, "R");

                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.CompId, objlist.Fyid, objlist.BranchId);

                //Recipt BR = new Recipt();
                //Vno = BR.GetMaxVoucher(CompID, BranchId, Fyid, StudentSessionID);
                //MxVNoInt = BR.GetMaxVoucherSrNo(CompID, BranchId, Fyid, StudentSessionID);

                //Recipt BA = new Recipt();
                //MaxRSrNo = BA.GetMaxSr(CompID, BranchId, Fyid);
                //AppTransNo = "";

                //SubStustus++;
            }
            else
            {


            }











            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        if (objlist.SubGroupCode == "100")
                        {
                            MemberPrefix = objlist.SubGroupPrifix;






                            using (SqlCommand cmd = new SqlCommand("SP_InsertNewMeberAccount", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@Tyepeofac", "Single");
                                cmd.Parameters.AddWithValue("@IntroducerName", objlist.IntroducerName);
                                cmd.Parameters.AddWithValue("@IntroducerNumber", objlist.IntroducerNo);
                                cmd.Parameters.AddWithValue("@FirstName", objlist.FirstName);
                                cmd.Parameters.AddWithValue("@LastName", objlist.LastName);
                                cmd.Parameters.AddWithValue("@FatherName", objlist.FHName);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@Dob", DateTime.ParseExact(objlist.DOB, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.DOB, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Gender", objlist.Gender);
                                cmd.Parameters.AddWithValue("@Categories", objlist.CategoryID);
                                cmd.Parameters.AddWithValue("@Education", objlist.EducationID);
                                cmd.Parameters.AddWithValue("@MeritalStatus", "");
                                cmd.Parameters.AddWithValue("@Occupation", objlist.OccupationID);
                                cmd.Parameters.AddWithValue("@PanNo", objlist.PANNo);
                                cmd.Parameters.AddWithValue("@AdharNo", objlist.AdharNo);
                                cmd.Parameters.AddWithValue("@MEMBER_ACCNO", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@Member_OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));

                                if (objlist.MemberPhoto.Length > 0)
                                {

                                    cmd.Parameters.AddWithValue("@PhotoPath", objlist.MemberPhoto);

                                    cmd.Parameters.AddWithValue("@Photo", DBNull.Value);
                                    cmd.Parameters["@Photo"].SqlDbType = SqlDbType.Image;
                                }
                                else
                                {

                                    cmd.Parameters.AddWithValue("@Photo", DBNull.Value);
                                    cmd.Parameters["@Photo"].SqlDbType = SqlDbType.Image;

                                    cmd.Parameters.AddWithValue("@PhotoPath", "");


                                }
                                if (objlist.MemberSignature.Length > 0)
                                {

                                    cmd.Parameters.AddWithValue("@SignaturePath", objlist.MemberSignature);
                                    cmd.Parameters.AddWithValue("@MemberSignature", DBNull.Value);
                                    cmd.Parameters["@MemberSignature"].SqlDbType = SqlDbType.Image;


                                }

                                else
                                {
                                    cmd.Parameters.AddWithValue("@MemberSignature", DBNull.Value);
                                    cmd.Parameters["@MemberSignature"].SqlDbType = SqlDbType.Image;
                                    cmd.Parameters.AddWithValue("@SignaturePath", "");
                                }
                                cmd.Parameters.AddWithValue("@MemberNO", objlist.MemberNo);
                                cmd.Parameters.AddWithValue("@Membercat", objlist.AccCategoryID);
                                cmd.Parameters.AddWithValue("@NextMemberNo", objlist.NextNo);
                                cmd.Parameters.AddWithValue("@Compid", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.Add("@ReturnMemberID", SqlDbType.VarChar, 500);
                                cmd.Parameters["@ReturnMemberID"].Direction = ParameterDirection.Output;

                                cmd.Transaction = objTrans;

                                cmd.ExecuteNonQuery();
                                objlist.MemberID = cmd.Parameters["@ReturnMemberID"].Value.ToString();

                                MemberID = objlist.MemberID;
                            }



                            using (SqlCommand cmd = new SqlCommand("SP_InsertProfessional1", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@DesignationName", objlist.DesignationID);
                                cmd.Parameters.AddWithValue("@BatchNo", objlist.EmpID);
                                cmd.Parameters.AddWithValue("@JoiningDate", DateTime.ParseExact(objlist.JoiningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@RetiredDate", DateTime.ParseExact(objlist.RetirementDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.RetirementDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Relative", objlist.RelativeName);
                                cmd.Parameters.AddWithValue("@Relation", objlist.RelationID);
                                cmd.Parameters.AddWithValue("@Position", objlist.PostingID);
                                cmd.Parameters.AddWithValue("@Office", "0");
                                cmd.Parameters.AddWithValue("@Field", "0");
                                cmd.Parameters.AddWithValue("@nmId", MemberID);
                                cmd.Parameters.AddWithValue("@DetucteeBank", objlist.DetucteeBankID);
                                cmd.Parameters.AddWithValue("@Column1", "");
                                cmd.Parameters.AddWithValue("@Column2", 0);
                                cmd.Parameters.AddWithValue("@Columnsdate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Transaction = objTrans;
                                int rowaffected1 = cmd.ExecuteNonQuery();
                                if (rowaffected1 > 0)
                                {

                                }
                                else
                                {

                                }


                            }

                            using (SqlCommand cmd = new SqlCommand("SP_InsertCustomerBank", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@BankName", objlist.CustomerBankName);
                                cmd.Parameters.AddWithValue("@AccountNumber", objlist.BankACNo);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@Ifsc", objlist.IFSC);
                                cmd.Parameters.AddWithValue("@nmId", MemberID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Transaction = objTrans;
                                int rowaffected3 = cmd.ExecuteNonQuery();
                                if (rowaffected3 > 0)
                                {
                                }
                                else
                                {
                                }


                            }

                            using (SqlCommand cmd = new SqlCommand("SP_InsertLoacal", con))
                            {

                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@PAddress", objlist.ParmanantAddress);
                                if (objlist.ParmanantState == null || objlist.ParmanantState == "")
                                {
                                    cmd.Parameters.AddWithValue("@PState", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PState", objlist.ParmanantState);
                                }

                                if (objlist.ParmanantDistrict == null || objlist.ParmanantDistrict == "")
                                {
                                    cmd.Parameters.AddWithValue("@PDistrict", 0);
                                    cmd.Parameters.AddWithValue("@PCity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PDistrict", objlist.ParmanantDistrict);
                                    cmd.Parameters.AddWithValue("@PCity", objlist.ParmanantDistrict);
                                }



                                cmd.Parameters.AddWithValue("@PPhoneNo", objlist.ParmanantMobile);
                                cmd.Parameters.AddWithValue("@PMobileNo", objlist.ParmanantMobile);
                                cmd.Parameters.AddWithValue("@LAddress", objlist.PresentAddress);

                                if (objlist.PresentState == null || objlist.PresentState == "")
                                {
                                    cmd.Parameters.AddWithValue("@LState", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LState", objlist.PresentState);
                                }


                                if (objlist.PresentDistrict == null || objlist.PresentDistrict == "")
                                {
                                    cmd.Parameters.AddWithValue("@LDistrict", 0);

                                    cmd.Parameters.AddWithValue("@LCity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LDistrict", objlist.PresentDistrict);

                                    cmd.Parameters.AddWithValue("@LCity", objlist.PresentDistrict);
                                }

                                cmd.Parameters.AddWithValue("@LPhoneNo", objlist.PresentMobile);
                                cmd.Parameters.AddWithValue("@LMobileNo", objlist.PresentMobile);
                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Transaction = objTrans;
                                int i = cmd.ExecuteNonQuery();
                                if (i == 1)
                                {

                                }
                                else
                                {
                                }

                            }




                            using (SqlCommand cmd = new SqlCommand("SP_InsertNomineeDetails", con))
                            {

                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                                cmd.Parameters.AddWithValue("@Relation", objlist.NomineeRelationID);
                                cmd.Parameters.AddWithValue("@DoB", DateTime.ParseExact(objlist.NomineeDOB, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.NomineeDOB, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                cmd.Transaction = objTrans;
                                int i = cmd.ExecuteNonQuery();
                                if (i == 1)
                                {

                                }
                                else
                                {
                                }


                            }










                        }
                        else if (objlist.SubGroupCode == "101")
                        {
                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,GpName,status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                            {

                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@GpName", "Share Account");
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@LdName", objlist.FirstName + " " + objlist.LastName);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@AccType", "Share Account");
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));

                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@SubGoupID", objlist.GetTblChargesLedID);
                                cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();


                            }
                            //using (SqlCommand cmd = new SqlCommand("sp_InsertSahre", con))
                            //{
                            //    cmd.CommandType = CommandType.StoredProcedure;
                            //    cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                            //    cmd.Parameters.AddWithValue("@Amount",objlist.GetTblChargesAmt);
                            //    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.Parse(objlist.OpeningDate)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            //    cmd.Parameters.AddWithValue("@Particular", "Account Open");
                            //    cmd.Parameters.AddWithValue("@SharePrice", (Convert.ToDouble(objlist.GetTblChargesAmt) / Convert.ToInt32(objlist.NoofShare)));
                            //    cmd.Parameters.AddWithValue("@ShareQty", objlist.NoofShare);
                            //    cmd.Parameters.AddWithValue("@TranType", "Sale");
                            //    cmd.Parameters.AddWithValue("@TransactionId", objlist.MaxVNo);
                            //    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            //    cmd.Transaction = objTrans;
                            //    cmd.ExecuteNonQuery();

                            //}

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransTypeText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "Share");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                        }
                        else if (objlist.SubGroupCode == "102")
                        {

                            //using (SqlCommand cmd = new SqlCommand("InsertSavingAcc", con))
                            //{

                            //    cmd.CommandType = CommandType.StoredProcedure;
                            //    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            //    cmd.Parameters.AddWithValue("@OpeningAmount", objlist.GetTblChargesAmt);
                            //    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                            //    cmd.Transaction = objTrans;
                            //    int i = cmd.ExecuteNonQuery();
                            //    if (i == 1)
                            //    {

                            //    }
                            //    else
                            //    {
                            //    }


                            //}
                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,GpName,status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                            {
                                cmd.Parameters.AddWithValue("@GpName", "Saving Account");
                                cmd.Parameters.AddWithValue("@InterestRate", objlist.ShavingIntrest);
                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@LdName", objlist.FirstName + " " + objlist.LastName);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@AccType", "Saving Account");
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));

                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@SubGoupID", objlist.GetTblChargesLedID);
                                cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();


                            }

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@ClosingBal", (Convert.ToDouble(objlist.ShavingOpeningAmt)));
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransTypeText);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "Saving");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                        }

                        else if (objlist.SubGroupCode == "103")
                        {
                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                            {
                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@GpName", "Compulsory Account");
                                cmd.Parameters.AddWithValue("@InterestRate", objlist.CoumpolseryIntrest);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LdName", objlist.FirstName + " " + objlist.LastName);
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@AccType", "Compulsory Account");
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@SubGoupID", objlist.GetTblChargesLedID);
                                cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                            //using (SqlCommand cmd = new SqlCommand("SP_InsertCompulasry", con))
                            //{
                            //    cmd.CommandType = CommandType.StoredProcedure;
                            //    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            //    cmd.Parameters.AddWithValue("@TransactionType", objlist.TransTypeID);
                            //    cmd.Parameters.AddWithValue("@OpeningAmount", objlist.GetTblChargesAmt);
                            //    cmd.Parameters.AddWithValue("@BankName", objlist.CustomerBankName);
                            //    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                            //    cmd.Parameters.AddWithValue("@Cheque", objlist.ChequeNo);
                            //    cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                            //    cmd.Parameters.AddWithValue("@NomineeRelation", objlist.NomineeRelationID);
                            //    cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                            //    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            //    cmd.Transaction = objTrans;
                            //    cmd.ExecuteNonQuery();

                            //}
                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransTypeText);
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "Compulsory");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();
                            }






                        }
                        else if (objlist.SubGroupCode == "111")
                        {
                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                            {
                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@GpName", "LIC Account");
                                cmd.Parameters.AddWithValue("@InterestRate", objlist.CoumpolseryIntrest);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LdName", objlist.FirstName + " " + objlist.LastName);
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@AccType", "LIC Account");
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@SubGoupID", objlist.GetTblChargesLedID);
                                cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "Opening Balance For New Member");
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "LIC");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();
                            }


                        }
                        else
                        {

                            if (Convert.ToDouble(objlist.GetTblChargesAmt) > 0)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "R");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                    cmd.Parameters.AddWithValue("@Particular", "By " + MemberID);
                                    if (objlist.ChargesClosingBal == "" || objlist.ChargesClosingBal == null)
                                    {
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.ChargesClosingBal);
                                    }
                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ChargesClosingNature);
                                    cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", "Opening Charges For " + MemberID);
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.GetTblChargesLedID);
                                    cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@VNo", MxVo);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();

                                }
                            }
                        }


                        if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRowCount) - 1)
                        {
                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Debit");
                                //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GrandTotal);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "To " + "Member Open " + MemberID);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.GrandTotal);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "Saving");
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", "102" + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                        }


                        if (objlist.SubGroupCode != "100" && objlist.AccType == "subgroup")
                        {


                            using (SqlCommand cmd = new SqlCommand("SP_InsertAllAccount", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@MemberId", MemberID);
                                cmd.Parameters.AddWithValue("@TransactionType", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@OpeningAmount", Convert.ToDouble(objlist.GetTblChargesAmt));
                                cmd.Parameters.AddWithValue("@Transactionid", MxVo);

                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                                if (objlist.SubGroupCode == "101")
                                {
                                    cmd.Parameters.AddWithValue("@Particular", "Account Open");
                                    cmd.Parameters.AddWithValue("@SharePrice", (Convert.ToDouble(objlist.GetTblChargesAmt) / Convert.ToInt32(objlist.NoofShare)));
                                    cmd.Parameters.AddWithValue("@Amount", Convert.ToDouble(objlist.GetTblChargesAmt));

                                    cmd.Parameters.AddWithValue("@ShareQty", objlist.NoofShare);
                                    cmd.Parameters.AddWithValue("@TransType", "Sale");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Particular", "Account Open");
                                    cmd.Parameters.AddWithValue("@SharePrice", "0");
                                    cmd.Parameters.AddWithValue("@ShareQty", "0");
                                    cmd.Parameters.AddWithValue("@TransType", "");
                                    cmd.Parameters.AddWithValue("@Amount", Convert.ToDouble(objlist.GetTblChargesAmt));
                                }



                                cmd.Parameters.AddWithValue("@BankName", objlist.CustomerBankName);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@Cheque", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                                cmd.Parameters.AddWithValue("@NomineeRelation", objlist.NomineeRelationID);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@AccType", objlist.SubGroupCode);
                                cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.SubGroupPrifix + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@MemberIdDisplay", MemberPrefix + MemberID.Substring(3, MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@FyID", objlist.Fyid);




                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }

                        }

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("R", appmax, objlist.CompId, objlist.Fyid, objlist.BranchId, "", AppTransSrNo);
                        }
                        objTrans.Commit();

                    }
                    catch (Exception ex)
                    {
                        objTrans.Rollback();

                    }
                    finally
                    {

                    }

                }



                List<FormSubmision> objDept = new List<FormSubmision>();
                objDept.Add(new FormSubmision
                {
                    ReturnStaus = "True",
                    //SendVNo = Vno
                    SendVNo = MemberID

                });
                return objDept;




            }


            //List<FormSubmision> objDep = new List<FormSubmision>();

            //  return objDep;

        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/InsertMemberDetailOpeningBal")]
      //     [HttpPost]
        public List<FormSubmision> InsertMemberDetailOpeningBal(InsertMemberOpen objlist)
        {


            double TotalShaving;

            if (objlist.ShavingIntrest == null || objlist.ShavingIntrest == "")
            {
                objlist.ShavingIntrest = "0";
            }
            if (objlist.AccType == null)
            {
                objlist.AccType = "";
            }
            if (objlist.OpeningDate == null)
            {
                objlist.OpeningDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AdharNo == null)
            {
                objlist.AdharNo = "";

            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.BankACNo == null)
            {
                objlist.BankACNo = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChargesClosingBal == null)
            {

                objlist.ChargesClosingBal = "0";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.CompulsoryOPAmt == null)
            {
                objlist.CompulsoryOPAmt = "0";
            }
            if (objlist.CoumpolseryIntrest == null)
            {
                objlist.CoumpolseryIntrest = "0";
            }
            if (objlist.CustomerBankName == null)
            {
                objlist.CustomerBankName = "";
            }
            if (objlist.DOB == null)
            {
                objlist.DOB = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.Email == null)
            {
                objlist.Email = "";

            }
            if (objlist.EmpID == null)
            {
                objlist.EmpID = "";
            }
            if (objlist.FHName == null)
            {
                objlist.FHName = "";

            }
            if (objlist.IFSC == null)
            {
                objlist.IFSC = "";
            }
            if (objlist.IntroducerName == null)
            {
                objlist.IntroducerName = "";

            }
            if (objlist.IntroducerNo == null)
            {
                objlist.IntroducerNo = "";

            }
            if (objlist.JoiningDate == null)
            {
                objlist.JoiningDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.MemberPhoto == null)
            {
                objlist.MemberPhoto = "";
            }
            if (objlist.MemberSignature == null)
            {
                objlist.MemberSignature = "";
            }
            if (objlist.NomineeBankName == null)
            {
                objlist.NomineeBankName = "";

            }
            if (objlist.NomineeName == null)
            {
                objlist.NomineeName = "";
            }
            if (objlist.NomineeBranch == null)
            {
                objlist.NomineeBranch = "";
            }
            if (objlist.RetirementDate == null)
            {
                objlist.RetirementDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.NomineeDOB == null)
            {
                objlist.NomineeDOB = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.PANNo == null)
            {
                objlist.PANNo = "";
            }
            if (objlist.RelativeName == null)
            {
                objlist.RelativeName = "";
            }
            if (objlist.ChargesClosingNature == null)
            {
                objlist.ChargesClosingNature = "";
            }
            if (objlist.ParmanantAddress == null)
            {
                objlist.ParmanantAddress = "";
            }
            if (objlist.ParmanantMobile == null)
            {
                objlist.ParmanantMobile = "0";
            }
            if (objlist.PresentAddress == null)
            {
                objlist.PresentAddress = "";
            }
            if (objlist.PresentMobile == null)
            {
                objlist.PresentMobile = "0";
            }
            if (objlist.ParmanantState == null)
            {
                objlist.ParmanantState = "0";
            }
            if (objlist.ParmanantDistrict == null)
            {
                objlist.ParmanantDistrict = "0";
            }
            if (objlist.PresentState == null)
            {
                objlist.PresentState = "0";

            }
            if (objlist.PresentDistrict == null)
            {
                objlist.PresentDistrict = "0";
            }
            if (objlist.RelativeName == null)
            {
                objlist.RelativeName = "";
            }
            if (objlist.CompBranchCode == null)
            {
                objlist.CompBranchCode = "0";
            }
            if (objlist.CompBranchFyCode == null)
            {
                objlist.CompBranchFyCode = "0";
            }
            if (objlist.GrandTotal == null || objlist.GrandTotal == "")
            {
                objlist.GrandTotal = "0";
            }
            if (objlist.TransTypeID == null)
            {
                objlist.TransTypeID = "0";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "0";
            }
            if (objlist.NomineeBankName == null)
            {
                objlist.NomineeBankName = "";
            }
            if (objlist.NomineeBranch == null)
            {
                objlist.NomineeBranch = "";
            }

            if (objlist.TblRowNo == 0)
            {

                AppTransactionNoClass app = new AppTransactionNoClass();
                appmax = app.Max_AppTransactionNo(objlist.CompId, objlist.Fyid, objlist.BranchId);

                MxVo = app.GetMaxVNo(objlist.CompId, objlist.BranchId, "R");

                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.CompId, objlist.Fyid, objlist.BranchId);

                //Recipt BR = new Recipt();
                //Vno = BR.GetMaxVoucher(CompID, BranchId, Fyid, StudentSessionID);
                //MxVNoInt = BR.GetMaxVoucherSrNo(CompID, BranchId, Fyid, StudentSessionID);

                //Recipt BA = new Recipt();
                //MaxRSrNo = BA.GetMaxSr(CompID, BranchId, Fyid);
                //AppTransNo = "";

                //SubStustus++;
            }
            else
            {


            }











            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        if (objlist.SubGroupCode == "100")
                        {
                            MemberPrefix = objlist.SubGroupPrifix;






                            using (SqlCommand cmd = new SqlCommand("SP_InsertNewMeberAccountForOpeningBal", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@Tyepeofac", "Single");
                                cmd.Parameters.AddWithValue("@IntroducerName", objlist.IntroducerName);
                                cmd.Parameters.AddWithValue("@IntroducerNumber", objlist.IntroducerNo);
                                cmd.Parameters.AddWithValue("@FirstName", objlist.FirstName);
                                cmd.Parameters.AddWithValue("@LastName", objlist.LastName);
                                cmd.Parameters.AddWithValue("@FatherName", objlist.FHName);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@Dob", DateTime.ParseExact(objlist.DOB, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.DOB, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Gender", objlist.Gender);
                                cmd.Parameters.AddWithValue("@Categories", objlist.CategoryID);
                                cmd.Parameters.AddWithValue("@Education", objlist.EducationID);
                                cmd.Parameters.AddWithValue("@MeritalStatus", "");
                                cmd.Parameters.AddWithValue("@Occupation", objlist.OccupationID);
                                cmd.Parameters.AddWithValue("@PanNo", objlist.PANNo);
                                cmd.Parameters.AddWithValue("@AdharNo", objlist.AdharNo);
                                cmd.Parameters.AddWithValue("@MEMBER_ACCNO", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@Member_OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));

                                if (objlist.MemberPhoto.Length > 0)
                                {

                                    cmd.Parameters.AddWithValue("@PhotoPath", objlist.MemberPhoto);

                                    cmd.Parameters.AddWithValue("@Photo", DBNull.Value);
                                    cmd.Parameters["@Photo"].SqlDbType = SqlDbType.Image;
                                }
                                else
                                {

                                    cmd.Parameters.AddWithValue("@Photo", DBNull.Value);
                                    cmd.Parameters["@Photo"].SqlDbType = SqlDbType.Image;

                                    cmd.Parameters.AddWithValue("@PhotoPath", "");


                                }
                                if (objlist.MemberSignature.Length > 0)
                                {

                                    cmd.Parameters.AddWithValue("@SignaturePath", objlist.MemberSignature);
                                    cmd.Parameters.AddWithValue("@MemberSignature", DBNull.Value);
                                    cmd.Parameters["@MemberSignature"].SqlDbType = SqlDbType.Image;


                                }

                                else
                                {
                                    cmd.Parameters.AddWithValue("@MemberSignature", DBNull.Value);
                                    cmd.Parameters["@MemberSignature"].SqlDbType = SqlDbType.Image;
                                    cmd.Parameters.AddWithValue("@SignaturePath", "");
                                }
                                cmd.Parameters.AddWithValue("@MemberNO", objlist.MemberNo);
                                cmd.Parameters.AddWithValue("@Membercat", objlist.AccCategoryID);
                                cmd.Parameters.AddWithValue("@NextMemberNo", objlist.NextNo);
                                cmd.Parameters.AddWithValue("@Compid", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);


                                cmd.Transaction = objTrans;

                                cmd.ExecuteNonQuery();

                            }



                            using (SqlCommand cmd = new SqlCommand("SP_InsertProfessional1", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@DesignationName", objlist.DesignationID);
                                cmd.Parameters.AddWithValue("@BatchNo", objlist.EmpID);
                                cmd.Parameters.AddWithValue("@JoiningDate", DateTime.ParseExact(objlist.JoiningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@RetiredDate", DateTime.ParseExact(objlist.RetirementDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.RetirementDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Relative", objlist.RelativeName);
                                cmd.Parameters.AddWithValue("@Relation", objlist.RelationID);
                                cmd.Parameters.AddWithValue("@Position", objlist.PostingID);
                                cmd.Parameters.AddWithValue("@Office", "0");
                                cmd.Parameters.AddWithValue("@Field", "0");
                                cmd.Parameters.AddWithValue("@nmId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@DetucteeBank", objlist.DetucteeBankID);
                                cmd.Parameters.AddWithValue("@Column1", "");
                                cmd.Parameters.AddWithValue("@Column2", 0);
                                cmd.Parameters.AddWithValue("@Columnsdate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Transaction = objTrans;
                                int rowaffected1 = cmd.ExecuteNonQuery();
                                if (rowaffected1 > 0)
                                {

                                }
                                else
                                {

                                }


                            }

                            using (SqlCommand cmd = new SqlCommand("SP_InsertCustomerBank", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@BankName", objlist.CustomerBankName);
                                cmd.Parameters.AddWithValue("@AccountNumber", objlist.BankACNo);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@Ifsc", objlist.IFSC);
                                cmd.Parameters.AddWithValue("@nmId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Transaction = objTrans;
                                int rowaffected3 = cmd.ExecuteNonQuery();
                                if (rowaffected3 > 0)
                                {
                                }
                                else
                                {
                                }


                            }

                            using (SqlCommand cmd = new SqlCommand("SP_InsertLoacal", con))
                            {

                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@PAddress", objlist.ParmanantAddress);
                                if (objlist.ParmanantState == null || objlist.ParmanantState == "")
                                {
                                    cmd.Parameters.AddWithValue("@PState", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PState", objlist.ParmanantState);
                                }

                                if (objlist.ParmanantDistrict == null || objlist.ParmanantDistrict == "")
                                {
                                    cmd.Parameters.AddWithValue("@PDistrict", 0);
                                    cmd.Parameters.AddWithValue("@PCity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@PDistrict", objlist.ParmanantDistrict);
                                    cmd.Parameters.AddWithValue("@PCity", objlist.ParmanantDistrict);
                                }



                                cmd.Parameters.AddWithValue("@PPhoneNo", objlist.ParmanantMobile);
                                cmd.Parameters.AddWithValue("@PMobileNo", objlist.ParmanantMobile);
                                cmd.Parameters.AddWithValue("@LAddress", objlist.PresentAddress);

                                if (objlist.PresentState == null || objlist.PresentState == "")
                                {
                                    cmd.Parameters.AddWithValue("@LState", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LState", objlist.PresentState);
                                }


                                if (objlist.PresentDistrict == null || objlist.PresentDistrict == "")
                                {
                                    cmd.Parameters.AddWithValue("@LDistrict", 0);

                                    cmd.Parameters.AddWithValue("@LCity", 0);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LDistrict", objlist.PresentDistrict);

                                    cmd.Parameters.AddWithValue("@LCity", objlist.PresentDistrict);
                                }

                                cmd.Parameters.AddWithValue("@LPhoneNo", objlist.PresentMobile);
                                cmd.Parameters.AddWithValue("@LMobileNo", objlist.PresentMobile);
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Transaction = objTrans;
                                int i = cmd.ExecuteNonQuery();
                                if (i == 1)
                                {

                                }
                                else
                                {
                                }

                            }




                            using (SqlCommand cmd = new SqlCommand("SP_InsertNomineeDetails", con))
                            {

                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                                cmd.Parameters.AddWithValue("@Relation", objlist.NomineeRelationID);
                                cmd.Parameters.AddWithValue("@DoB", DateTime.ParseExact(objlist.NomineeDOB, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.NomineeDOB, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                cmd.Transaction = objTrans;
                                int i = cmd.ExecuteNonQuery();
                                if (i == 1)
                                {

                                }
                                else
                                {
                                }


                            }










                        }
                        else if (objlist.SubGroupCode == "101")
                        {
                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,GpName,status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                            {

                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@GpName", "Share Account");
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@LdName", objlist.FirstName + " " + objlist.LastName);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@AccType", "Share Account");
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));

                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@SubGoupID", objlist.GetTblChargesLedID);
                                cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();


                            }
                            //using (SqlCommand cmd = new SqlCommand("sp_InsertSahre", con))
                            //{
                            //    cmd.CommandType = CommandType.StoredProcedure;
                            //    cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                            //    cmd.Parameters.AddWithValue("@Amount",objlist.GetTblChargesAmt);
                            //    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.Parse(objlist.OpeningDate)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            //    cmd.Parameters.AddWithValue("@Particular", "Account Open");
                            //    cmd.Parameters.AddWithValue("@SharePrice", (Convert.ToDouble(objlist.GetTblChargesAmt) / Convert.ToInt32(objlist.NoofShare)));
                            //    cmd.Parameters.AddWithValue("@ShareQty", objlist.NoofShare);
                            //    cmd.Parameters.AddWithValue("@TranType", "Sale");
                            //    cmd.Parameters.AddWithValue("@TransactionId", objlist.MaxVNo);
                            //    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            //    cmd.Transaction = objTrans;
                            //    cmd.ExecuteNonQuery();

                            //}

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "Opening Balance For New Member");
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "Share");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                        }
                        else if (objlist.SubGroupCode == "102")
                        {

                            //using (SqlCommand cmd = new SqlCommand("InsertSavingAcc", con))
                            //{

                            //    cmd.CommandType = CommandType.StoredProcedure;
                            //    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            //    cmd.Parameters.AddWithValue("@OpeningAmount", objlist.GetTblChargesAmt);
                            //    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                            //    cmd.Transaction = objTrans;
                            //    int i = cmd.ExecuteNonQuery();
                            //    if (i == 1)
                            //    {

                            //    }
                            //    else
                            //    {
                            //    }


                            //}
                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,GpName,status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                            {
                                cmd.Parameters.AddWithValue("@GpName", "Saving Account");
                                cmd.Parameters.AddWithValue("@InterestRate", objlist.ShavingIntrest);
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@LdName", objlist.FirstName + " " + objlist.LastName);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@AccType", "Saving Account");
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));

                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@SubGoupID", objlist.GetTblChargesLedID);
                                cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();


                            }

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@ClosingBal", (Convert.ToDouble(objlist.GetTblChargesAmt)));
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@Particular", "Opening Balance For New Member");
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "Saving");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                        }

                        else if (objlist.SubGroupCode == "103")
                        {
                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                            {
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@GpName", "Compulsory Account");
                                cmd.Parameters.AddWithValue("@InterestRate", objlist.CoumpolseryIntrest);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LdName", objlist.FirstName + " " + objlist.LastName);
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@AccType", "Compulsory Account");
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@SubGoupID", objlist.GetTblChargesLedID);
                                cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                            //using (SqlCommand cmd = new SqlCommand("SP_InsertCompulasry", con))
                            //{
                            //    cmd.CommandType = CommandType.StoredProcedure;
                            //    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            //    cmd.Parameters.AddWithValue("@TransactionType", objlist.TransTypeID);
                            //    cmd.Parameters.AddWithValue("@OpeningAmount", objlist.GetTblChargesAmt);
                            //    cmd.Parameters.AddWithValue("@BankName", objlist.CustomerBankName);
                            //    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                            //    cmd.Parameters.AddWithValue("@Cheque", objlist.ChequeNo);
                            //    cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                            //    cmd.Parameters.AddWithValue("@NomineeRelation", objlist.NomineeRelationID);
                            //    cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                            //    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            //    cmd.Transaction = objTrans;
                            //    cmd.ExecuteNonQuery();

                            //}
                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "Opening Balance For New Member");
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "Compulsory");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();
                            }






                        }
                        else if (objlist.SubGroupCode == "111")
                        {
                            using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                            {
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@GpName", "LIC Account");
                                cmd.Parameters.AddWithValue("@InterestRate", objlist.CoumpolseryIntrest);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LdName", objlist.FirstName + " " + objlist.LastName);
                                cmd.Parameters.AddWithValue("@OpeningBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@EmailId", objlist.Email);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@AccType", "LIC Account");
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@SubGoupID", objlist.GetTblChargesLedID);
                                cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "Opening Balance For New Member");
                                cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); // DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetTblChargesAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "LIC");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@VNo", MxVo);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();
                            }


                        }
                        else
                        {
                            if (Convert.ToDouble(objlist.GetTblChargesAmt) > 0)
                            {

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "R");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargesAmt);
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.MemberID);
                                    if (objlist.ChargesClosingBal == "" || objlist.ChargesClosingBal == null)
                                    {
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.ChargesClosingBal);
                                    }
                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ChargesClosingNature);
                                    cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", "Opening Charges For " + objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.GetTblChargesLedID);
                                    cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@VNo", MxVo);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransTypeID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();

                                }
                            }

                        }



                        if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRowCount) - 1)
                        {
                            //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            //{
                            //    cmd.CommandType = CommandType.StoredProcedure;
                            //    cmd.Parameters.AddWithValue("@VType", "R");
                            //    cmd.Parameters.AddWithValue("@Nature", "Debit");
                            //    //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            //    cmd.Parameters.AddWithValue("@VDate", DateTime.Parse(objlist.OpeningDate));
                            //    cmd.Parameters.AddWithValue("@Amount", objlist.GrandTotal);
                            //    cmd.Parameters.AddWithValue("@BankName", objlist.NomineeBankName);
                            //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                            //    cmd.Parameters.AddWithValue("@Particular", "To " + "Member Open " + objlist.MemberID);
                            //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GrandTotal);
                            //    cmd.Parameters.AddWithValue("@BranchName", objlist.NomineeBranch);
                            //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                            //    cmd.Parameters.AddWithValue("@Narration", "Saving");
                            //    cmd.Parameters.AddWithValue("@FY", objlist.Fyid);
                            //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            //    cmd.Parameters.AddWithValue("@DateTime", DateTime.Parse(objlist.OpeningDate)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            //    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransTypeID);
                            //    cmd.Parameters.AddWithValue("@VNo", MxVo);
                            //    cmd.Parameters.AddWithValue("@LedgerAccNo", "102" + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                            //    cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);

                            //    cmd.Transaction = objTrans;
                            //    cmd.ExecuteNonQuery();

                            //}
                        }


                        if (objlist.SubGroupCode != "100")
                        {


                            using (SqlCommand cmd = new SqlCommand("SP_InsertAllAccount", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@TransactionType", objlist.TransTypeID);
                                cmd.Parameters.AddWithValue("@OpeningAmount", Convert.ToDouble(objlist.GetTblChargesAmt));
                                cmd.Parameters.AddWithValue("@Transactionid", MxVo);

                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpeningDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                                if (objlist.SubGroupCode == "101")
                                {
                                    cmd.Parameters.AddWithValue("@Particular", "Account Open");
                                    cmd.Parameters.AddWithValue("@SharePrice", (Convert.ToDouble(objlist.GetTblChargesAmt) / Convert.ToInt32(objlist.NoofShare)));
                                    cmd.Parameters.AddWithValue("@Amount", Convert.ToDouble(objlist.GetTblChargesAmt));

                                    cmd.Parameters.AddWithValue("@ShareQty", objlist.NoofShare);
                                    cmd.Parameters.AddWithValue("@TransType", "Sale");
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Particular", "Account Open");
                                    cmd.Parameters.AddWithValue("@SharePrice", "0");
                                    cmd.Parameters.AddWithValue("@ShareQty", "0");
                                    cmd.Parameters.AddWithValue("@TransType", "");
                                    cmd.Parameters.AddWithValue("@Amount", Convert.ToDouble(objlist.GetTblChargesAmt));
                                }



                                cmd.Parameters.AddWithValue("@BankName", objlist.CustomerBankName);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@Cheque", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                                cmd.Parameters.AddWithValue("@NomineeRelation", objlist.NomineeRelationID);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.SubGroupCode + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@CompID", objlist.CompId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchId);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@AccType", objlist.SubGroupCode);
                                cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.SubGroupPrifix + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@MemberIdDisplay", MemberPrefix + objlist.MemberID.Substring(3, objlist.MemberID.Length - 3));
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@FyID", objlist.Fyid);




                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }

                        }

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("R", appmax, objlist.CompId, objlist.Fyid, objlist.BranchId, "", AppTransSrNo);
                        }
                        objTrans.Commit();

                    }
                    catch (Exception ex)
                    {
                        objTrans.Rollback();

                    }
                    finally
                    {

                    }

                }



                List<FormSubmision> objDept = new List<FormSubmision>();
                objDept.Add(new FormSubmision
                {
                    ReturnStaus = "True",
                    //SendVNo = Vno

                    SendVNo = objlist.MemberID

                });
                return objDept;




            }


            //List<FormSubmision> objDep = new List<FormSubmision>();

            //  return objDep;

        }



        #endregion

        #region PlanMaster

        [ResponseType(typeof(returndbml<SelectAllPlaneResult>))]
       //   [Route("api/GetAllPlan")]
       //  [HttpGet]
        public returndbml<SelectAllPlaneResult> GetAllPlan(string CompID, string BranchId)
        {
            List<SelectAllPlaneResult> objListState = new List<SelectAllPlaneResult>();
            returndbml<SelectAllPlaneResult> objreturndbmlState = new returndbml<SelectAllPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectAllPlane", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectAllPlaneResult objState = new SelectAllPlaneResult();
                        ConvertTableToList<SelectAllPlaneResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<SelectPlaneByIDResult>))]
       //   [Route("api/GetPlanDetailforUpdate")]
       //  [HttpGet]
        public returndbml<SelectPlaneByIDResult> GetPlanDetailforUpdate(string PlanID, string CompID, string BranchId)
        {
            List<SelectPlaneByIDResult> objListState = new List<SelectPlaneByIDResult>();
            returndbml<SelectPlaneByIDResult> objreturndbmlState = new returndbml<SelectPlaneByIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectPlaneByID", PlanID, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectPlaneByIDResult objState = new SelectPlaneByIDResult();
                        ConvertTableToList<SelectPlaneByIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }



        [ResponseType(typeof(returndbml<SelectPlaneByIDResult>))]
       //   [Route("api/GetPlanDetailByPlanID")]
       //  [HttpGet]
        public returndbml<SelectPlaneByIDResult> GetPlanDetailByPlanID(string PlanID, string CompID, string BranchId)
        {
            List<SelectPlaneByIDResult> objListState = new List<SelectPlaneByIDResult>();
            returndbml<SelectPlaneByIDResult> objreturndbmlState = new returndbml<SelectPlaneByIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectInterestPeriod", PlanID, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectPlaneByIDResult objState = new SelectPlaneByIDResult();
                        ConvertTableToList<SelectPlaneByIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        #endregion



        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/CheckDublicateMemberNo")]
       //  [HttpGet]
        public returndbml<CheckDublicateMemberNoResult> CheckDublicateMemberNo(string prefixText, string CompID, string BranchId)
        {
            List<CheckDublicateMemberNoResult> objListState = new List<CheckDublicateMemberNoResult>();
            returndbml<CheckDublicateMemberNoResult> objreturndbmlState = new returndbml<CheckDublicateMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckDublicateMemberNo", CompID, BranchId, prefixText);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        CheckDublicateMemberNoResult objState = new CheckDublicateMemberNoResult();
                        ConvertTableToList<CheckDublicateMemberNoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {


                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetNextMemberIDCustom")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> GetNextMemberIDCustom(string Prefix, string CompID, string BranchId, string FyID, string NextMemberNo)
        {
            List<GetNextMemberNoResult> objListState = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlState = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetNextMemberNoCustom", CompID, BranchId, Prefix, FyID, NextMemberNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objState = new GetNextMemberNoResult();
                        objState.NextMemberNo = dr[0].ToString();
                        objState.NextMeNo = dr[1].ToString();
                        objState.CompBranchCode = dr[2].ToString();
                        objState.CompBranchFyCode = dr[3].ToString();
                        // ConvertTableToList<GetNextMemberNoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        #region  Member charges

        [ResponseType(typeof(returndbml))]
       //   [Route("api/InsertIntoMembershipCharge")]
      //     [HttpPost]
        public returndbml InsertIntoMembershipCharge(GetMembershipChargesDetailbyIDResult ObjList)
        {
            returndbml objreturn = new returndbml();
            // ObjList.Password = Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Cryptographer.CreateHash("OYE24PND", ObjList.Password);
            DbCommand dbCommond = null;
            DbTransaction trans;
            DbConnection con;
            Database db = new SqlDatabase(Connection);
            con = db.CreateConnection();
            con.Open();
            trans = con.BeginTransaction();
            try
            {



                dbCommond = db.GetStoredProcCommand("InsertIntoMembership_Charge");
                foreach (PropertyInfo PropInfoCol in ObjList.GetType().GetProperties())
                {
                    if (ValidColumn(PropInfoCol.Name))
                    {
                        DbType dbt = ConvertNullableIntoDatatype(PropInfoCol);
                        db.AddInParameter(dbCommond, PropInfoCol.Name.ToString(), dbt, PropInfoCol.GetValue(ObjList, null)); // dbt
                    }
                }
                try
                {

                    db.ExecuteNonQuery(dbCommond, trans);
                }
                catch (Exception ex)
                {


                }
                trans.Commit();
                objreturn.StatusId = 1;
                objreturn.Status = "Seccessfully";

            }
            catch (Exception ex)
            {
                objreturn.StatusId = 99;
                objreturn.Status = ex.Message.ToString() + ex.StackTrace.ToString();
                trans.Rollback();
            }
            finally { con.Close(); }
            return objreturn;
        }

        [ResponseType(typeof(returndbml<sp_select_OfficeBranchbySnoResult>))]
       //   [Route("api/GetMembershipChargesDetail")]
       //  [HttpGet]
        public returndbml<GetMembershipChargesDetailbyIDResult> GetMembershipChargesDetail(string AccNoCategory, string CompID, string BranchId)
        {
            List<GetMembershipChargesDetailbyIDResult> objListState = new List<GetMembershipChargesDetailbyIDResult>();
            returndbml<GetMembershipChargesDetailbyIDResult> objreturndbmlState = new returndbml<GetMembershipChargesDetailbyIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMembershipChargesDetail", CompID, BranchId, AccNoCategory);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetMembershipChargesDetailbyIDResult objState = new GetMembershipChargesDetailbyIDResult();
                        ConvertTableToList<GetMembershipChargesDetailbyIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_OfficeBranchbySnoResult>))]
       //   [Route("api/GetMembershipChargesDetailbyID")]
       //  [HttpGet]
        public returndbml<GetMembershipChargesDetailbyIDResult> GetMembershipChargesDetailbyID(string Member_Id, string CompID, string BranchId)
        {
            List<GetMembershipChargesDetailbyIDResult> objListState = new List<GetMembershipChargesDetailbyIDResult>();
            returndbml<GetMembershipChargesDetailbyIDResult> objreturndbmlState = new returndbml<GetMembershipChargesDetailbyIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMembershipChargesDetailbyID", CompID, BranchId, Member_Id);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetMembershipChargesDetailbyIDResult objState = new GetMembershipChargesDetailbyIDResult();
                        ConvertTableToList<GetMembershipChargesDetailbyIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/selectLNNameAccNo")]
       //  [HttpGet]
        public returndbml<selectLNNameAccNoResult> selectLNNameAccNo(string CompID, string BranchId)
        {
            List<selectLNNameAccNoResult> objListState = new List<selectLNNameAccNoResult>();
            returndbml<selectLNNameAccNoResult> objreturndbmlState = new returndbml<selectLNNameAccNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("selectLNNameAccNo", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        selectLNNameAccNoResult objState = new selectLNNameAccNoResult();
                        ConvertTableToList<selectLNNameAccNoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/selectSubgroupNameSrNo")]
       //  [HttpGet]
        public returndbml<selectSubgroupNameSrNoResult> selectSubgroupNameSrNo()
        {
            List<selectSubgroupNameSrNoResult> objListState = new List<selectSubgroupNameSrNoResult>();
            returndbml<selectSubgroupNameSrNoResult> objreturndbmlState = new returndbml<selectSubgroupNameSrNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("selectSubgroupNameSrNo");
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        selectSubgroupNameSrNoResult objState = new selectSubgroupNameSrNoResult();
                        ConvertTableToList<selectSubgroupNameSrNoResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/selectSubgroupCodePrefix")]
       //  [HttpGet]
        public returndbml<selectSubgroupCodePrefixResult> selectSubgroupCodePrefix(string Sno)
        {
            List<selectSubgroupCodePrefixResult> objListState = new List<selectSubgroupCodePrefixResult>();
            returndbml<selectSubgroupCodePrefixResult> objreturndbmlState = new returndbml<selectSubgroupCodePrefixResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("selectSubgroupCodePrefix", Sno);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        selectSubgroupCodePrefixResult objState = new selectSubgroupCodePrefixResult();
                        ConvertTableToList<selectSubgroupCodePrefixResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_select_OfficeBranchbySnoResult>))]
       //   [Route("api/CheckDublicateChargeName")]
       //  [HttpGet]
        public returndbml<CheckDublicateChargeNameResult> CheckDublicateChargeName(string ChargeName, string CompID, string BranchId)
        {
            List<CheckDublicateChargeNameResult> objListState = new List<CheckDublicateChargeNameResult>();
            returndbml<CheckDublicateChargeNameResult> objreturndbmlState = new returndbml<CheckDublicateChargeNameResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckDublicateChargeName", CompID, BranchId, ChargeName);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        CheckDublicateChargeNameResult objState = new CheckDublicateChargeNameResult();
                        ConvertTableToList<CheckDublicateChargeNameResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        #endregion


        #region Loan Account
       //   [Route("api/FillAllMemberID")]
       //  [HttpGet]
        public returndbml<GetAllMemberIDResult> FillAllMemberID(string CompID, string BranchId)
        {
            List<GetAllMemberIDResult> objListScheme = new List<GetAllMemberIDResult>();
            returndbml<GetAllMemberIDResult> objreturndbmlPlanScheme = new returndbml<GetAllMemberIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAllMemberID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                List<string> Ledger = new List<string>();
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {


                        GetAllMemberIDResult objLed = new GetAllMemberIDResult();
                        ConvertTableToList<GetAllMemberIDResult>(dr, ref objLed);
                        objListScheme.Add(objLed);

                    }
                    objreturndbmlPlanScheme.StatusId = 1;
                    objreturndbmlPlanScheme.returndbmllist = objListScheme;
                }
                else
                {
                    objreturndbmlPlanScheme.StatusId = 2;
                    objreturndbmlPlanScheme = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlPlanScheme.StatusId = 99;
                objreturndbmlPlanScheme.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlPlanScheme;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/LedgerDetail")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> LedgerDetail(string MemberId, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectAccountbyMemberId", MemberId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.InterestRate = dr["InterestRate"].ToString();
                        //objState.Dob = DateTime.Parse(dr["Dob"].ToString());
                        objState.Status = dr["Dob"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.MemberSignature = dr["MemberSignature"].ToString();
                        objState.FatherName = dr["FatherName"].ToString();
                        objState.Tyepeofac = dr["Tyepeofac"].ToString();
                        objState.SrNo = dr["SrNo"].ToString();
                        objState.SubGroupCode = dr["SubGroupCode"].ToString();
                        objState.DesignationName = dr["DesignationName"].ToString();
                        objState.LoanLimit = dr["LoanLimit"].ToString();
                        objState.Nature = dr["DisplyMemberID"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetLedgerAccountDetailForBulkReciept")]
       //  [HttpGet]
        public returndbml<FetchLedgerAllAccountDetail> GetLedgerAccountDetailForBulkReciept(string MemberId, string CompID, string BranchId, string RecieptDate)
        {
            if (MemberId == null)
            {
                MemberId = "";
            }

            if (RecieptDate == null)
            {

            }
            else
            {
                FDate = DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
            }
            List<FetchLedgerAllAccountDetail> objListState = new List<FetchLedgerAllAccountDetail>();
            returndbml<FetchLedgerAllAccountDetail> objreturndbmlState = new returndbml<FetchLedgerAllAccountDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLedgerDetailForBulkReciept", MemberId, CompID, BranchId, FDate);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FetchLedgerAllAccountDetail objState = new FetchLedgerAllAccountDetail();

                        objState.MemberID = dr["MEMBER_ACCNO"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.Dob = dr["Dob"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.MobileNo = dr["MobileNo"].ToString();
                        objState.ShareAccount = dr["ShareAccount"].ToString();
                        objState.SavingAccount = dr["SavingAccount"].ToString();
                        objState.CompulsoryAccount = dr["CompulsoryAccount"].ToString();
                        objState.LICAccount = dr["LICAccount"].ToString();
                        objState.LoanAccountA = dr["LoanAccountA"].ToString();
                        objState.LoanAccountAInstAmt = dr["LoanAccountAInstAmt"].ToString();
                        objState.InterestRecievedonLoanAccountA = dr["InterestRecievedonLoanAccountA"].ToString();
                        objState.LoanAccountB = dr["LoanAccountB"].ToString();
                        objState.LoanAccountBInstAmt = dr["LoanAccountBInstAmt"].ToString();
                        objState.InterestRecievedonLoanAccountB = dr["InterestRecievedonLoanAccountB"].ToString();

                        objState.LoanAccountC = dr["LoanAccountC"].ToString();
                        objState.LoanAccountCInstAmt = dr["LoanAccountCInstAmt"].ToString();
                        objState.InterestRecievedonLoanAccountC = dr["InterestRecievedonLoanAccountC"].ToString();

                        objState.LoanAccountD = dr["LoanAccountD"].ToString();
                        objState.LoanAccountDInstAmt = dr["LoanAccountDInstAmt"].ToString();
                        //objState.InterestRecievedonLoanAccountB = dr["InterestRecievedonLoanAccountD"].ToString();
                        objState.RDAccountA = dr["RDAccountA"].ToString();
                        objState.RDAccountB = dr["RDAccountB"].ToString();
                        objState.PanaltyAcc = dr["PanaltyAcc"].ToString();
                        objState.ApproxRemInst = dr["ApproxRemInst"].ToString();
                        objState.ApproxPenaltyAmt = dr["ApproxPenaltyAmt"].ToString();
                        objState.ApproxRemInstallment = dr["ApproxRemInstallment"].ToString();
                        objState.CPAmt = dr["CPAmt"].ToString();
                        objState.LICAmt = dr["LICAmt"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        public static DateTime TDate;
       //   [Route("api/GetMemberAccountSummary")]
       //  [HttpGet]
        public returndbml<FetchLedgerAllAccountDetail> GetMemberAccountSummary(string MemberId, string CompID, string BranchId, string FyId, string FromDate, string ToDate)
        {
            if (MemberId == null)
            {
                MemberId = "";
            }

            if (FromDate == null || FromDate == "" || ToDate == null || ToDate == "")
            {

            }
            else
            {
                FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                TDate = DateTime.ParseExact(ToDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);


            }

            List<FetchLedgerAllAccountDetail> objListState = new List<FetchLedgerAllAccountDetail>();
            returndbml<FetchLedgerAllAccountDetail> objreturndbmlState = new returndbml<FetchLedgerAllAccountDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberAccountSummary", MemberId, CompID, BranchId, FyId, FDate, TDate);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FetchLedgerAllAccountDetail objState = new FetchLedgerAllAccountDetail();

                        objState.MemberID = dr["MEMBER_ACCNO"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.Dob = dr["Dob"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.MobileNo = dr["MobileNo"].ToString();
                        objState.ShareAccount = dr["ShareAccount"].ToString();
                        objState.SavingAccount = dr["SavingAccount"].ToString();
                        objState.CompulsoryAccount = dr["CompulsoryAccount"].ToString();
                        objState.LICAccount = dr["LICAccount"].ToString();
                        objState.LoanAccountA = dr["LoanAccountA"].ToString();
                        objState.LoanAccountAInstAmt = dr["LoanAccountAInstAmt"].ToString();
                        objState.InterestRecievedonLoanAccountA = dr["InterestRecievedonLoanAccountA"].ToString();
                        objState.LoanAccountB = dr["LoanAccountB"].ToString();
                        objState.LoanAccountBInstAmt = dr["LoanAccountBInstAmt"].ToString();
                        objState.InterestRecievedonLoanAccountB = dr["InterestRecievedonLoanAccountB"].ToString();

                        objState.LoanAccountC = dr["LoanAccountC"].ToString();
                        objState.LoanAccountCInstAmt = dr["LoanAccountCInstAmt"].ToString();
                        objState.InterestRecievedonLoanAccountC = dr["InterestRecievedonLoanAccountC"].ToString();

                        objState.LoanAccountD = dr["LoanAccountD"].ToString();
                        objState.LoanAccountDInstAmt = dr["LoanAccountDInstAmt"].ToString();
                        objState.InterestRecievedonLoanAccountB = dr["InterestRecievedonLoanAccountD"].ToString();
                        objState.RDAccountA = dr["RDAccountA"].ToString();
                        objState.RDAccountB = dr["RDAccountB"].ToString();


                        objState.SHOPAmt = dr["SHOPAmt"].ToString();
                        objState.SHDepAmt = dr["SHDepAmt"].ToString();
                        objState.SHClosing = dr["SHClosing"].ToString();
                        objState.SBOPAmt = dr["SBOPAmt"].ToString();
                        objState.SBDepAmt = dr["SBDepAmt"].ToString();
                        objState.SBClosing = dr["SBClosing"].ToString();
                        objState.CPOPAmt = dr["CPOPAmt"].ToString();
                        objState.CPDepAmt = dr["CPDepAmt"].ToString();
                        objState.CPClosing = dr["CPClosing"].ToString();
                        objState.LICOPAmt = dr["LICOPAmt"].ToString();
                        objState.LICDepAmt = dr["LICDepAmt"].ToString();
                        objState.LICClosing = dr["LICClosing"].ToString();
                        objState.RDOPAmtA = dr["RDOPAmtA"].ToString();
                        objState.RDDepAmt = dr["RDDepAmt"].ToString();
                        objState.RDAClosing = dr["RDAClosing"].ToString();
                        objState.RDOPAmtB = dr["RDOPAmtB"].ToString();
                        objState.RDDepAmtB = dr["RDDepAmtB"].ToString();
                        objState.RDBClosing = dr["RDBClosing"].ToString();
                        objState.FDDepAmt = dr["FDDepAmt"].ToString();
                        objState.FDOPAmtA = dr["FDOPAmtA"].ToString();
                        objState.FDAClosing = dr["FDAClosing"].ToString();
                        objState.FDOPAmtB = dr["FDOPAmtB"].ToString();
                        objState.FDDepAmtB = dr["FDDepAmtB"].ToString();
                        objState.FDBClosing = dr["FDBClosing"].ToString();
                        objState.LNAOPAmt = dr["LNAOPAmt"].ToString();
                        objState.LNAccDepAmtA = dr["LNAccDepAmtA"].ToString();
                        objState.LNAccAmtAClosingBal = dr["LNAccAmtAClosingBal"].ToString();
                        objState.LNBOPAmt = dr["LNBOPAmt"].ToString();
                        objState.LNAccDepAmtB = dr["LNAccDepAmtB"].ToString();
                        objState.LNAccAmtBClosingBal = dr["LNAccAmtBClosingBal"].ToString();
                        objState.InstReconLNA = dr["InstReconLNA"].ToString();
                        objState.InstReconLNBAmt = dr["InstReconLNBAmt"].ToString();
                        objState.InstReconLNCAmt = dr["InstReconLNCAmt"].ToString();

                        objState.PanaltyAmt = dr["PanaltyAmt"].ToString();
                        objState.EntryFeesAmt = dr["EntryFeesAmt"].ToString();
                        objState.LoanProcessingFess = dr["LoanProcessingFess"].ToString();
                        objState.MembershipFess = dr["MembershipFess"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetMemberAllAccountSummary")]
       //  [HttpGet]
        public returndbml<FetchLedgerAllAccountDetail> GetMemberAllAccountSummary(string MemberId, string CompID, string BranchId, string FyId, string FromDate, string ToDate)
        {
            if (MemberId == null)
            {
                MemberId = "";
            }

            if (FromDate == null || FromDate == "" || ToDate == null || ToDate == "")
            {

            }
            else
            {
                FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                TDate = DateTime.ParseExact(ToDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);


            }

            List<FetchLedgerAllAccountDetail> objListState = new List<FetchLedgerAllAccountDetail>();
            returndbml<FetchLedgerAllAccountDetail> objreturndbmlState = new returndbml<FetchLedgerAllAccountDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberAllAccountSummary", MemberId, CompID, BranchId, FyId, FDate, TDate);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FetchLedgerAllAccountDetail objState = new FetchLedgerAllAccountDetail();

                        objState.MemberID = dr["MEMBER_ACCNO"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.Dob = dr["Dob"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.MobileNo = dr["MobileNo"].ToString();
                        objState.ShareAccount = dr["ShareAccount"].ToString();
                        objState.SavingAccount = dr["SavingAccount"].ToString();
                        objState.CompulsoryAccount = dr["CompulsoryAccount"].ToString();
                        objState.LICAccount = dr["LICAccount"].ToString();
                        objState.LoanAccountA = dr["LoanAccountA"].ToString();
                        objState.LoanAccountB = dr["LoanAccountB"].ToString();
                        objState.LoanAccountC = dr["LoanAccountC"].ToString();
                        objState.LoanAccountD = dr["LoanAccountD"].ToString();
                        objState.RDAccountA = dr["RDAccountA"].ToString();
                        objState.RDAccountB = dr["RDAccountB"].ToString();
                        objState.RDAccountC = dr["RDAccountC"].ToString();
                        objState.RDAccountD = dr["RDAccountD"].ToString();
                        objState.FDAccountA = dr["FDAccountA"].ToString();
                        objState.FDAccountB = dr["FDAccountB"].ToString();
                        objState.FDAccountC = dr["FDAccountC"].ToString();
                        objState.FDAccountD = dr["FDAccountD"].ToString();
                        objState.DCAcc = dr["DCAccount"].ToString();
                        objState.KutumbSahaytaAcc = dr["KutumbSahaytaAccount"].ToString();
                        objState.LinkedShare = dr["LinkedShareAccount"].ToString();
                        objState.LockerAcc = dr["LockerAccount"].ToString();


                        objState.SHClosing = dr["SHClosing"].ToString();
                        objState.SBClosing = dr["SBClosing"].ToString();
                        objState.CPClosing = dr["CPClosing"].ToString();
                        objState.LICClosing = dr["LICClosing"].ToString();
                        objState.RDAClosing = dr["RDAClosing"].ToString();
                        objState.RDBClosing = dr["RDBClosing"].ToString();
                        objState.RDCClosing = dr["RDCClosing"].ToString();
                        objState.RDDClosing = dr["RDDClosing"].ToString();
                        objState.FDAClosing = dr["FDAClosing"].ToString();
                        objState.FDBClosing = dr["FDBClosing"].ToString();
                        objState.FDCClosing = dr["FDCClosing"].ToString();
                        objState.FDDClosing = dr["FDDClosing"].ToString();
                        objState.LNAccAmtAClosingBal = dr["LNAccAmtAClosingBal"].ToString();
                        objState.LNAccAmtBClosingBal = dr["LNAccAmtBClosingBal"].ToString();
                        objState.LNAccAmtCClosingBal = dr["LNAccAmtCClosingBal"].ToString();
                        objState.LNAccAmtDClosingBal = dr["LNAccAmtDClosingBal"].ToString();
                        objState.LinkedShareClosing = dr["LinkedShareClosing"].ToString();
                        objState.KutumbSahaytaClosing = dr["KutumbSahaytaClosing"].ToString();
                        objState.LockerClosing = dr["LockerClosing"].ToString();
                        objState.DCClosing = dr["DCClosing"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }



       //   [Route("api/GetBankRecancellation")]
       //  [HttpGet]
        public returndbml<FetchLedgerAllAccountDetail> GetBankRecancellation(string LedgerId, string CompID, string BranchId, string Status)
        {


            List<FetchLedgerAllAccountDetail> objListState = new List<FetchLedgerAllAccountDetail>();
            returndbml<FetchLedgerAllAccountDetail> objreturndbmlState = new returndbml<FetchLedgerAllAccountDetail>();
            try
            {
                if (LedgerId == null)
                {
                    LedgerId = "";
                }

                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectBankRecancelation", LedgerId, CompID, BranchId, Status);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FetchLedgerAllAccountDetail objState = new FetchLedgerAllAccountDetail();


                        objState.MemberID = dr["Particular"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.Dob = dr["VDate"].ToString();
                        objState.AccNo = dr["LedgerId"].ToString();
                        objState.MobileNo = dr["VType"].ToString();
                        objState.ShareAccount = dr["VId"].ToString();
                        objState.SavingAccount = dr["TransBy"].ToString();
                        objState.CompulsoryAccount = dr["Nature"].ToString();
                        objState.LICAccount = dr["CheckNumber"].ToString();
                        objState.DCClosing = dr["AmountCr"].ToString();
                        objState.CPClosing = dr["AmountDr"].ToString();
                        objState.CPAmt = dr["VNo"].ToString();
                        objState.FDAccountA = dr["AppTransNo"].ToString();
                        objState.LinkedShare = dr["BranchID"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetVoucherDetailByAppTransNo")]
       //  [HttpGet]
        public returndbml<FetchLedgerAllAccountDetail> GetVoucherDetailByAppTransNo(string AppTransNo, string CompID, string BranchId)
        {


            List<FetchLedgerAllAccountDetail> objListState = new List<FetchLedgerAllAccountDetail>();
            returndbml<FetchLedgerAllAccountDetail> objreturndbmlState = new returndbml<FetchLedgerAllAccountDetail>();
            try
            {


                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetVoucherDetailByAppTransNo", AppTransNo, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FetchLedgerAllAccountDetail objState = new FetchLedgerAllAccountDetail();


                        objState.MemberID = dr["Particular"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.Dob = dr["VDate"].ToString();
                        objState.AccNo = dr["LedgerId"].ToString();
                        objState.MobileNo = dr["VType"].ToString();
                        objState.ShareAccount = dr["VId"].ToString();
                        objState.SavingAccount = dr["TransBy"].ToString();
                        objState.CompulsoryAccount = dr["Nature"].ToString();
                        objState.LICAccount = dr["CheckNumber"].ToString();
                        objState.DCClosing = dr["Amount"].ToString();
                        objState.CPAmt = dr["VNo"].ToString();
                        objState.FDAccountA = dr["AppTransNo"].ToString();
                        objState.FDAccountB = dr["BankName"].ToString();
                        objState.FDAccountC = dr["BranchName"].ToString();
                        objState.FDAccountD = dr["Narration"].ToString();
                        objState.FDAClosing = dr["LedgerAccNo"].ToString();
                        objState.FDBClosing = dr["shareQty"].ToString();
                        objState.FDCClosing = dr["shareprice"].ToString();
                        objState.FDDClosing = dr["BranchID"].ToString();
                        objState.InterestRecievedonLoanAccountA = dr["Noofinstall"].ToString();
                        objState.InterestRecievedonLoanAccountB = dr["AgentId"].ToString();
                        objState.InterestRecievedonLoanAccountC = dr["CompBranchCode"].ToString();
                        objState.InterestRecievedonLoanAccountD = dr["CompBranchFyCode"].ToString();
                        objState.LICAmt = dr["MemberID_Unique"].ToString();
                        objState.LICClosing = dr["LedgerId_Unique"].ToString();
                        objState.ApproxPenaltyAmt = dr["VNoMemberID"].ToString();
                        objState.ApproxRemInst = dr["VNoLoanID"].ToString();
                        objState.FDOPAmtA = dr["MemberId"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetMemberAccountDetail")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMemberAccountDetail(string MemberId, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberAccountDetailbyMemberId", MemberId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.InterestRate = dr["InterestRate"].ToString();
                        //objState.Dob = DateTime.Parse(dr["Dob"].ToString());
                        objState.Status = dr["Dob"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.MemberSignature = dr["MemberSignature"].ToString();
                        objState.FatherName = dr["FatherName"].ToString();
                        objState.Tyepeofac = dr["Tyepeofac"].ToString();
                        objState.SrNo = dr["SrNo"].ToString();
                        objState.SubGroupCode = dr["SubGroupCode"].ToString();
                        objState.DesignationName = dr["DesignationName"].ToString();
                        objState.LoanLimit = dr["LoanLimit"].ToString();
                        objState.Nature = dr["DisplyMemberID"].ToString();
                        objState.MobileNo = dr["MobileNo"].ToString();
                        objState.InstallmentAmount = dr["InstalmentAmt"].ToString();
                        objState.AmtShare = dr["ShareRate"].ToString();
                        objState.LedgerType = dr["PlanType"].ToString();


                        if (dr["NomineeName"] == null)
                        {
                            objState.VNo = "";
                        }
                        else
                        {
                            objState.VNo = dr["NomineeName"].ToString();
                        }
                        if (dr["ReletionID"] == null)
                        {
                            objState.Vtype = "";
                        }
                        else
                        {
                            objState.Vtype = dr["ReletionID"].ToString();
                        }


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetMemberAccountDetailForOpening")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMemberAccountDetailForOpening(string MemberId, string CompID, string BranchId, string FyID)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberAccountOpeningDetailbyMemberId", MemberId, CompID, BranchId, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.AccNo = dr["LedgerId"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.FatherName = dr["FatherName"].ToString();
                        objState.Nature = dr["MemberId"].ToString();
                        objState.MobileNo = dr["MobileNo"].ToString();
                        objState.LedgerType = dr["AccType"].ToString();
                        objState.LoanLimit = dr["Amount"].ToString();
                        objState.SubGroupCode = dr["SubGroupCode"].ToString();
                        objState.SrNo = dr["VId"].ToString();
                        objState.VNo = dr["VNo"].ToString();
                        objState.Vtype = dr["VtypeNO"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetRecieptDataByVoucherNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetRecieptDataByVoucherNo(string VNo, string CompID, string BranchId, string FyID, string AppTransNo)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetRecieptDataByVoucherNo", VNo, CompID, BranchId, FyID, AppTransNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.AccNo = dr["LedgerId"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.FatherName = dr["FatherName"].ToString();
                        objState.Nature = dr["MemberId"].ToString();
                        objState.MobileNo = dr["MobileNo"].ToString();
                        objState.LedgerType = dr["AccType"].ToString();
                        objState.LoanLimit = dr["Amount"].ToString();
                        objState.SubGroupCode = dr["SubGroupCode"].ToString();
                        objState.SrNo = dr["VId"].ToString();
                        objState.VNo = dr["VNo"].ToString();
                        objState.Vtype = dr["VtypeNO"].ToString();
                        objState.AppTransNo = dr["AppTransNo"].ToString();
                        objState.DebitSum = dr["DebitSum"].ToString();
                        objState.LedgerAccNo = dr["LedgerAccNo"].ToString();
                        objState.ShareRate = dr["ShareRate"].ToString();
                        objState.CheckNumber = dr["Nature"].ToString();
                        objState.TransByDebit = dr["TransByDebit"].ToString();
                        objState.VNoLoanID = dr["VNoLoanID"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetRDDetail")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetRDDetail(string AccNo, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetRdDetails", AccNo, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.RecurringAmount = dr["RecurringAmount"].ToString();
                        objState.MaturityDate = dr["MaturityDate"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetNonMemberAccountDetailByAccNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetNonMemberAccountDetailByAccNo(string AccNo, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetNonMemberAccountDetailbyAccNo", AccNo, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.SrNo = dr["SrNo"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetGurantorsTotal")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetGurantorsTotal(string MemberId, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_FetchGurantors", MemberId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.GurantorsTotal = dr["GurantyGiven"].ToString();



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetGurantorsName")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetGurantorsName(string MemberId, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_FetchMemName", MemberId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.LdName = dr["FullName"].ToString();



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/GetGurantorDetail")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetGurantorDetail(string MemberId, string CompID, string BranchId, string FyID)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_FetchGurantorsDetails", MemberId, CompID, BranchId, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.LoanSanction = dr["LoanSanction"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.PaidInstallment = dr["PaidInstallment"].ToString();
                        objState.ClosingBal = Math.Round(Convert.ToDouble(dr["ClosingBal"].ToString()), 0);
                        objState.Status = dr["Status"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillLoanPlan")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> FillLoanPlan(string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_FetchLoanPlane", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillLoanExtentionID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> FillLoanExtentionID(string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetoanExtentionID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetFemalePlanIntrest")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetFemalePlanIntrest(string PlaneName, string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFemalePlanInstForLoan", PlaneName, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["interest"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/FetchPlanTypeBySubGroupID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> FetchPlanTypeBySubGroupID(string PlaneName, string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FetchPlanTypeBySubGroupID", PlaneName, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["interest"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

        [ResponseType(typeof(returndbml<select_officebranch_SubBranchNameResult>))]
       //   [Route("api/GetAllMembarAoutocomplete")]
       //  [HttpGet]
        public returndbml<GetAllMemberIDResult> GetAllMembarAoutocomplete(string CompID, string BranchId)
        {
            List<GetAllMemberIDResult> objListState = new List<GetAllMemberIDResult>();
            returndbml<GetAllMemberIDResult> objreturndbmlState = new returndbml<GetAllMemberIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAllMemberID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetAllMemberIDResult objState = new GetAllMemberIDResult();
                        ConvertTableToList<GetAllMemberIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetFDReserveForLoan")]
       //  [HttpGet]
        public returndbml<GetLedgerAccountMasterResult> GetFDReserveForLoan(string PlaneName, string CompID, string BranchId, string SubGroupCode)
        {
            List<GetLedgerAccountMasterResult> objListProduct = new List<GetLedgerAccountMasterResult>();
            returndbml<GetLedgerAccountMasterResult> objreturndbmlProduct = new returndbml<GetLedgerAccountMasterResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFD_Reserve_ForLoan", PlaneName, CompID, BranchId, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        GetLedgerAccountMasterResult objLed = new GetLedgerAccountMasterResult();
                        objLed.LoanDis = dr["ln"].ToString();
                        objLed.AccNo = dr["AccNo"].ToString();
                        objLed.Period = Convert.ToInt32(dr["Period"].ToString());
                        objLed.PeriodIn = dr["PeriodIn"].ToString();

                        ConvertTableToList<GetLedgerAccountMasterResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetRateofInstFD")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetRateofInstFD(string PlaneName, string CompID, string BranchId, string SubGroupCode)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFDRateofIntrest", PlaneName, CompID, BranchId, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["InterestRate"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetFyStatusByFyID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetFyStatusByFyID(string CompID, string BranchId, string FyID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFyStatusByFyID", CompID, BranchId, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Status"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetDayCloseDate")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetDayCloseDate(string CompID, string BranchId, string FyID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_CheckDayClose", CompID, BranchId, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Day_Close_Date"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetSMSChargeDate")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetSMSChargeDate(string CompID, string BranchId, string FyID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetSMSChargeDate", CompID, BranchId, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["ChargeDate"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/CheckIntGiven")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> CheckIntGiven(string CompID, string BranchId, string FyID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_SelectInterstGiven", CompID, BranchId, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["DateGiven"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/InsertInterestSave")]
       //  [HttpGet]

        public returndbml<sp_FetchLoanPlaneResult> InsertInterestSave(string CompID, string BranchId, string FyID, string Date)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                using (SqlConnection con = new SqlConnection(Connection))
                {

                    con.Open();
                    using (SqlCommand cmd = new SqlCommand("sp_InsertInterestSave", con))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@CompID", CompID);
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        cmd.Parameters.AddWithValue("@FyId", FyID);
                        cmd.Parameters.AddWithValue("@FromDate", DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        cmd.Parameters.AddWithValue("@ToDate", DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        RowIns = cmd.ExecuteNonQuery();

                    }
                    using (SqlCommand cmd = new SqlCommand("sp_InsertInterestSaveForHold", con))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@CompID", CompID);
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        cmd.Parameters.AddWithValue("@FyId", FyID);
                        cmd.Parameters.AddWithValue("@FromDate", DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        cmd.Parameters.AddWithValue("@ToDate", DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        cmd.ExecuteNonQuery();

                    }


                }
                if (RowIns > 0)
                {


                    sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                    objLed.PlaneName = "Seccessfully";
                    objListProduct.Add(objLed);

                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                    objreturndbmlProduct.Status = "Seccessfully";

                }
                else
                {
                    sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                    objLed.PlaneName = "Failed";
                    objListProduct.Add(objLed);

                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                    objreturndbmlProduct.Status = "Failed";
                }


            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/SaveDayClose")]
       //  [HttpGet]

        public returndbml<sp_FetchLoanPlaneResult> SaveDayClose(string CompID, string BranchId, string FyID, string Date)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                using (SqlConnection con = new SqlConnection(Connection))
                {

                    con.Open();
                    using (SqlCommand cmd = new SqlCommand("sp_InsertCloseDay", con))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@CompID", CompID);
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        cmd.Parameters.AddWithValue("@day", DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        RowIns = cmd.ExecuteNonQuery();

                    }

                    if (RowIns > 0)
                    {


                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = "Seccessfully";
                        objListProduct.Add(objLed);

                        objreturndbmlProduct.StatusId = 1;
                        objreturndbmlProduct.returndbmllist = objListProduct;
                        objreturndbmlProduct.Status = "Seccessfully";

                    }
                    else
                    {
                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = "Failed";
                        objListProduct.Add(objLed);

                        objreturndbmlProduct.StatusId = 1;
                        objreturndbmlProduct.returndbmllist = objListProduct;
                        objreturndbmlProduct.Status = "Failed";
                    }

                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/Rdinterest")]
       //  [HttpGet]

        public returndbml<sp_FetchLoanPlaneResult> Rdinterest(string CompID, string BranchId, string FyID, string Date)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                //using (SqlConnection con = new SqlConnection(Connection))
                //{

                //    con.Open();
                //    using (SqlCommand cmd = new SqlCommand("sp_InsertCloseDay", con))
                //    {
                //        cmd.CommandType = CommandType.StoredProcedure;
                //        cmd.Parameters.AddWithValue("@CompID", CompID);
                //        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                //        cmd.Parameters.AddWithValue("@day", DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                //        RowIns = cmd.ExecuteNonQuery();

                //    }

                //    if (RowIns > 0)
                //    {


                //        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                //        objLed.PlaneName = "Seccessfully";
                //        objListProduct.Add(objLed);

                //        objreturndbmlProduct.StatusId = 1;
                //        objreturndbmlProduct.returndbmllist = objListProduct;
                //        objreturndbmlProduct.Status = "Seccessfully";

                //    }
                //    else
                //    {
                //        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                //        objLed.PlaneName = "Failed";
                //        objListProduct.Add(objLed);

                //        objreturndbmlProduct.StatusId = 1;
                //        objreturndbmlProduct.returndbmllist = objListProduct;
                //        objreturndbmlProduct.Status = "Failed";
                //    }

                //}
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

        string[] LedgerAccNo = new string[50000];
        int kssss = 0; double clsbal;

        public static string CompBranchCode;
        public static string CompBranchFyCode;
       //   [Route("api/InsertSmsChargesDetails")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> InsertSmsChargesDetails(string CompID, string BranchId, string FyID, string ChargeName, string ChargeType, string smsChargeDate, string LedgerName, string SmsChargeAmt, string DayCloseDatePlusOne)
        {
            kssss = 0;
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {


                AppTransactionNoClass app = new AppTransactionNoClass();
                //InsertVouchers InsVoc = new InsertVouchers();
                appmax = app.Max_AppTransactionNo(CompID, FyID, BranchId);
                AppTransSrNo = app.Max_AppTransactionSrNo(CompID, FyID, BranchId);
                MaxVNoJ = app.GetMaxVNo(CompID, BranchId, "J");
                MaxRecNo = app.GetMaxVTypeNo(CompID, BranchId, FyID, "J");

                CompBranchCode = app.CompBranchCode(CompID, "", FyID, BranchId);
                CompBranchFyCode = app.CompBranchFyCode(CompID, "", FyID, BranchId);

                using (SqlConnection CN = new SqlConnection(Connection))
                {

                    CN.Open();
                    using (SqlCommand cmd = new SqlCommand("DeleteLowCloseForSms", CN))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@CompID", CompID);
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        cmd.ExecuteNonQuery();

                    }
                    CN.Close();

                    CN.Open();
                    using (SqlCommand cmd = new SqlCommand("GetAccNoforSMSCharges", CN))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@CompID", CompID);
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        cmd.Parameters.AddWithValue("@Acctype", ChargeName);
                        cmd.Parameters.AddWithValue("@DayCloseDate", DateTime.ParseExact(DayCloseDatePlusOne, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        SqlDataReader dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            LedgerAccNo[kssss] = dr["AccNo"].ToString();
                            kssss++;
                        }
                        dr.Close();
                        CN.Close();
                    }
                    CN.Close();

                    using (SqlConnection con = new SqlConnection(Connection))
                    {

                        con.Open();

                        for (int p = 0; p < LedgerAccNo.Length; p++)
                        {
                            if (LedgerAccNo[p] == null)
                            {
                                break;
                            }


                            CN.Open();
                            using (SqlCommand cmd = new SqlCommand("SP_FetchClosingBal", CN))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@CompID", CompID);
                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                                cmd.Parameters.AddWithValue("@FyId", FyID);
                                cmd.Parameters.AddWithValue("@LedgerId", LedgerAccNo[p]);
                                SqlDataReader dr = cmd.ExecuteReader();
                                if (dr.Read())
                                {
                                    clsbal = double.Parse(dr["cl"].ToString());
                                    if (clsbal >= Convert.ToDouble(SmsChargeAmt))
                                    {

                                        RowIns = app.InsertVoucher("J", "Credit", smsChargeDate, Convert.ToDouble(SmsChargeAmt), "", "", "", "By " + LedgerAccNo[p], LedgerName, MaxVNoJ, FyID, 0, "", "", smsChargeDate, "By Sms Charges", LedgerAccNo[p], CompID, BranchId, appmax, CompBranchCode, CompBranchFyCode, MaxRecNo);
                                        RowIns = app.InsertVoucher("J", "Debit", smsChargeDate, Convert.ToDouble(SmsChargeAmt), "", "", "", "To " + LedgerName, LedgerAccNo[p], MaxVNoJ, FyID, 0, "", "", smsChargeDate, "To Sms Charges", LedgerName, CompID, BranchId, appmax, CompBranchCode, CompBranchFyCode, MaxRecNo);


                                    }
                                    else
                                    {
                                        using (SqlCommand cmdd = new SqlCommand("InsertLowCloseForSms", con))
                                        {
                                            cmdd.CommandType = CommandType.StoredProcedure;
                                            cmdd.Parameters.AddWithValue("@LedgerId", LedgerAccNo[p]);
                                            cmdd.Parameters.AddWithValue("@ClosingBal", clsbal);
                                            cmdd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(smsChargeDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            cmdd.Parameters.AddWithValue("@ChargeAmt", SmsChargeAmt);
                                            cmdd.Parameters.AddWithValue("@ChargeName", ChargeName);
                                            cmdd.Parameters.AddWithValue("@Compid", CompID);
                                            cmdd.Parameters.AddWithValue("@BranchID", BranchId);
                                            cmdd.Parameters.AddWithValue("@AppTransNo", appmax);

                                            cmdd.ExecuteNonQuery();

                                        }
                                    }

                                }
                                CN.Close();
                                dr.Close();




                            }
                        }
                        if (RowIns > 0)
                        {


                            sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                            objLed.PlaneName = "Seccessfully";
                            objListProduct.Add(objLed);

                            objreturndbmlProduct.StatusId = 1;
                            objreturndbmlProduct.returndbmllist = objListProduct;
                            objreturndbmlProduct.Status = "Seccessfully";

                        }
                        else
                        {
                            sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                            objLed.PlaneName = "Failed";
                            objListProduct.Add(objLed);

                            objreturndbmlProduct.StatusId = 1;
                            objreturndbmlProduct.returndbmllist = objListProduct;
                            objreturndbmlProduct.Status = "Failed";
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
        int sharcount;
        string[] strled = new string[50000];
        string[] strclos = new string[50000];
       //   [Route("api/BindsharedividentDetails")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> BindsharedividentDetails(string CompID, string BranchId, string FyID, string FirstDayMonth, string LastDayMonth, string DayCloseMonthNo, string LastDateofCurrentMonth)
        {
            sharcount = 0;
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {




                using (SqlConnection CN = new SqlConnection(Connection))
                {

                    //CN.Open();
                    //using (SqlCommand cmd = new SqlCommand("DeleteLowCloseForSms", CN))
                    //{
                    //    cmd.CommandType = CommandType.StoredProcedure;
                    //    cmd.Parameters.AddWithValue("@CompID", CompID);
                    //    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    //    cmd.ExecuteNonQuery();

                    //}
                    //CN.Close();

                    CN.Open();
                    using (SqlCommand cmd = new SqlCommand("sp_selectsharediv", CN))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@CompID", CompID);
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(LastDateofCurrentMonth, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        cmd.Parameters.AddWithValue("@FyId", FyID);
                        cmd.Parameters.AddWithValue("@Ctrs", DayCloseMonthNo);
                        cmd.CommandTimeout = 30000;
                        SqlDataReader dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            strled[sharcount] = dr["Accno"].ToString();
                            strclos[sharcount] = dr["cls"].ToString();
                            sharcount++;
                        }
                        dr.Close();
                        CN.Close();
                    }
                    CN.Close();

                    using (SqlConnection con = new SqlConnection(Connection))
                    {

                        con.Open();

                        for (int K = 0; K < strled.Length; K++)
                        {
                            if (strled[K] == null)
                            {
                                break;
                            }


                            CN.Open();
                            using (SqlCommand cmd = new SqlCommand("sp_Updatesharedivident", CN))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@CompID", CompID);
                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                                cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(LastDateofCurrentMonth, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LedgerId", strled[K]);
                                cmd.Parameters.AddWithValue("@FyId", FyID);
                                cmd.Parameters.AddWithValue("@balance", strclos[K]);
                                cmd.CommandTimeout = 30000;
                                RowIns = cmd.ExecuteNonQuery();

                            }
                            CN.Close();





                        }
                    }
                    if (RowIns > 0)
                    {


                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = "Seccessfully";
                        objListProduct.Add(objLed);

                        objreturndbmlProduct.StatusId = 1;
                        objreturndbmlProduct.returndbmllist = objListProduct;
                        objreturndbmlProduct.Status = "Seccessfully";

                    }
                    else
                    {
                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = "Failed";
                        objListProduct.Add(objLed);

                        objreturndbmlProduct.StatusId = 1;
                        objreturndbmlProduct.returndbmllist = objListProduct;
                        objreturndbmlProduct.Status = "Failed";
                    }


                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
        string[] strloanaccno = new string[50000];
        double PenInstallMent; DateTime LoanOpendate; double PenRemaining;
        int klo = 0; SqlDataReader dr;
       //   [Route("api/LoanPenalityDetails")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> LoanPenalityDetails(string CompID, string BranchId, string FyID, string FirstDayMonth, string LastDayMonth, string DayCloseMonthNo, string LastDateofCurrentMonth, string FirstDateofCurrentMonth)
        {
            sharcount = 0;
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {




                using (SqlConnection CN = new SqlConnection(Connection))
                {

                    //CN.Open();
                    //using (SqlCommand cmd = new SqlCommand("DeleteLowCloseForSms", CN))
                    //{
                    //    cmd.CommandType = CommandType.StoredProcedure;
                    //    cmd.Parameters.AddWithValue("@CompID", CompID);
                    //    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    //    cmd.ExecuteNonQuery();

                    //}
                    //CN.Close();

                    CN.Open();
                    using (SqlCommand cmd = new SqlCommand("select LedgerAccountMaster.AccNo, LedgerAccountMaster.OpeningDate from LedgerAccountMaster, Ledger where Ledger.Status = 'O' and Ledger.Compid = @CompID and Ledger.BranchID = @BranchID and LedgerAccountMaster.AccType = '105' and Ledger.AccNo = LedgerAccountMaster.AccNo and Ledger.Compid = LedgerAccountMaster.CompID and Ledger.BranchID = LedgerAccountMaster.BranchID and LedgerAccountMaster.OpeningDate <= DATEADD(MM, -2, GETDATE()) order by LedgerId Asc", CN))
                    {
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("@CompID", CompID);
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        //cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(LastDateofCurrentMonth, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        //cmd.Parameters.AddWithValue("@FyId", FyID);
                        //cmd.Parameters.AddWithValue("@Ctrs", DayCloseMonthNo);
                        cmd.CommandTimeout = 30000;
                        SqlDataReader dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            strloanaccno[klo] = dr["AccNo"].ToString();
                            klo++;
                        }
                        dr.Close();
                        CN.Close();
                    }
                    CN.Close();

                    using (SqlConnection con = new SqlConnection(Connection))
                    {

                        con.Open();

                        for (int k = 0; k < strloanaccno.Length; k++)
                        {
                            if (strloanaccno[k] == null)
                            {
                                break;
                            }


                            CN.Open();

                            using (SqlCommand cmd = new SqlCommand(" select ISNULL( InstallmentAmount,0) InstallmentAmount,CONVERT(VARCHAR(10), OpeningDate, 105) AS   OpeningDate from LedgerAccountMaster where CompID = @CompID and BranchID = @BranchID and AccNo=@AccNo", CN))
                            {
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.AddWithValue("@CompID", CompID);
                                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                                //cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(LastDateofCurrentMonth, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@AccNo", strloanaccno[k]);
                                //cmd.Parameters.AddWithValue("@FyId", FyID);
                                //cmd.Parameters.AddWithValue("@balance", strclos[K]);
                                cmd.CommandTimeout = 30000;
                                SqlDataReader dr = cmd.ExecuteReader();
                                if (dr.Read())
                                {
                                    PenInstallMent = double.Parse(dr["InstallmentAmount"].ToString());
                                    //LoanOpendate =    DateTime.Parse(dr["OpeningDate"].ToString());
                                    LoanOpendate = DateTime.ParseExact(LastDateofCurrentMonth, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                                }

                            }
                            CN.Close();
                            dr.Close();

                            int Differncedate = (DateTime.Now - LoanOpendate).Days;
                            double mm = Differncedate;
                            mm = mm / 365;
                            mm = mm * 12;
                            for (int i = 0; i < mm; i++)
                            {
                                PenRemaining += PenInstallMent * i;
                            }


                        }
                    }
                    if (RowIns > 0)
                    {


                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = "Seccessfully";
                        objListProduct.Add(objLed);

                        objreturndbmlProduct.StatusId = 1;
                        objreturndbmlProduct.returndbmllist = objListProduct;
                        objreturndbmlProduct.Status = "Seccessfully";

                    }
                    else
                    {
                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = "Failed";
                        objListProduct.Add(objLed);

                        objreturndbmlProduct.StatusId = 1;
                        objreturndbmlProduct.returndbmllist = objListProduct;
                        objreturndbmlProduct.Status = "Failed";
                    }


                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetPlaneDetailByPlanID")]
       //  [HttpGet]
        public returndbml<SelectPlaneByPlanIDResult> GetPlaneDetailByPlanID(string CompID, string BranchId, string PlanID, string AccType)
        {
            if (PlanID == null)
            {
                PlanID = "";
            }
            List<SelectPlaneByPlanIDResult> objListProduct = new List<SelectPlaneByPlanIDResult>();
            returndbml<SelectPlaneByPlanIDResult> objreturndbmlProduct = new returndbml<SelectPlaneByPlanIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetPlaneDetailByPlanID", CompID, BranchId, PlanID, AccType);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        SelectPlaneByPlanIDResult objLed = new SelectPlaneByPlanIDResult();
                        objLed.CommIntPer = dr["CommIntPer"].ToString();
                        objLed.Interest = dr["Interest"].ToString();
                        objLed.ProductName = dr["SchemeName"].ToString();
                        objLed.InterestLedger = dr["InterestLedger"].ToString();
                        ConvertTableToList<SelectPlaneByPlanIDResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/CheckPenaltyAmount")]
       //  [HttpGet]
        public returndbml<SelectPlaneByPlanIDResult> CheckPenaltyAmount(string CompID, string BranchId)
        {

            List<SelectPlaneByPlanIDResult> objListProduct = new List<SelectPlaneByPlanIDResult>();
            returndbml<SelectPlaneByPlanIDResult> objreturndbmlProduct = new returndbml<SelectPlaneByPlanIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckPenaltyAmount", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        SelectPlaneByPlanIDResult objLed = new SelectPlaneByPlanIDResult();
                        objLed.Interest = dr["Amount"].ToString();
                        objLed.InterestLedger = dr["Ledgerid"].ToString();
                        ConvertTableToList<SelectPlaneByPlanIDResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/CheckSMSChargesDetail")]
       //  [HttpGet]
        public returndbml<GetSMSChargesResult> CheckSMSChargesDetail(string CompID, string BranchId)
        {

            List<GetSMSChargesResult> objListProduct = new List<GetSMSChargesResult>();
            returndbml<GetSMSChargesResult> objreturndbmlProduct = new returndbml<GetSMSChargesResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetSMSCharges", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        GetSMSChargesResult objLed = new GetSMSChargesResult();
                        objLed.ChargeName = dr["ChargeName"].ToString();
                        objLed.ChargeType = dr["ChargeType"].ToString();
                        objLed.SmsChargeName = dr["ChargeDate"].ToString();

                        objLed.LedgerName = dr["LedgerName"].ToString();
                        objLed.ChargeAmt = Convert.ToDecimal(dr["ChargeAmt"].ToString());
                        ConvertTableToList<GetSMSChargesResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }

            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetRateofInstCP")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetRateofInstCP(string PlaneName, string CompID, string BranchId, string SubGroupCode)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetCP_IntrestRate", PlaneName, CompID, BranchId, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["InterestRate"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FetchLoanPercentage")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> FetchLoanPercentage(string PlaneName, string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLoanPercentage", PlaneName, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["interest"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetPlanIdByPlaneName")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetPlanIdByPlaneName(string PlaneName, string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetPlanIdByPlaneName", PlaneName, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["PlaneId"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetLoanRequestID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetLoanRequestID(string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLoanRequeatID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Mid"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }



        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/InsertLoanGurantor")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanGurantor(InsertLoan objlist)
        {
            int RowAffect = 0;

            if (objlist.OpenDate == null)
            {
                objlist.OpenDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AccNo == null)
            {
                objlist.AccNo = "";
            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.FirstGuarantiGiven == null)
            {
                objlist.FirstGuarantiGiven = "0";
            }
            if (objlist.FirstGuarantor == null)
            {
                objlist.FirstGuarantor = "";
            }
            if (objlist.FourthGuarantiGiven == null)
            {
                objlist.FourthGuarantiGiven = "0";
            }
            if (objlist.FourthGuarantor == null)
            {
                objlist.FourthGuarantor = "";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.InstallmentAmt == null || objlist.InstallmentAmt == "")
            {
                objlist.InstallmentAmt = "0";
            }
            if (objlist.LoanEligibility == null || objlist.LoanEligibility == "")
            {
                objlist.LoanEligibility = "0";
            }
            if (objlist.LoanPeriodMonth == null)
            {
                objlist.LoanPeriodMonth = "0";
            }
            if (objlist.LoanRequired == null || objlist.LoanRequired == "")
            {
                objlist.LoanRequired = "0";
            }
            if (objlist.RateOfIntrest == null || objlist.RateOfIntrest == "")
            {
                objlist.RateOfIntrest = "0";
            }
            if (objlist.SecondGuarantiGiven == null)
            {
                objlist.SecondGuarantiGiven = "0";
            }
            if (objlist.SecondGuarantor == null)
            {
                objlist.SecondGuarantor = "";
            }
            if (objlist.ThirdGuarantiGiven == null)
            {
                objlist.ThirdGuarantiGiven = "0";
            }
            if (objlist.ThirdGuarantor == null)
            {
                objlist.ThirdGuarantor = "0";
            }

            if (objlist.DesignationID == null || objlist.DesignationID == "")
            {
                objlist.DesignationID = "0";
            }
            if (objlist.LoanDocsPath == null || objlist.LoanDocsPath == "")
            {
                objlist.LoanDocsPath = "";
            }
            if (objlist.LoanDocsTypeID == null || objlist.LoanDocsTypeID == "")
            {
                objlist.LoanDocsTypeID = "0";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        AppTransactionNoClass app = new AppTransactionNoClass();
                        appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                        AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                        if (objlist.TblRowNo == 0)
                        {

                            using (SqlCommand cmd = new SqlCommand("SP_LoanGurantorInsert", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);
                                cmd.Parameters.AddWithValue("@LoanEligibility", objlist.LoanEligibility);

                                if (objlist.LoanTypeText == "Loan Against FD" || objlist.LoanTypeText == "Loan Against RD" || objlist.LoanTypeText == "Loan Against CP")
                                {
                                    cmd.Parameters.AddWithValue("@Designation", 0);
                                }
                                else
                                {

                                    cmd.Parameters.AddWithValue("@Designation", objlist.DesignationID);
                                }
                                cmd.Parameters.AddWithValue("@LoanRequired", objlist.LoanRequired);
                                cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.InstallmentAmt);
                                cmd.Parameters.AddWithValue("@LoanPeriod", objlist.LoanPeriodMonth);
                                cmd.Parameters.AddWithValue("@FirstGuarantor", objlist.FirstGuarantor);
                                cmd.Parameters.AddWithValue("@SecondGuarantor", objlist.SecondGuarantor);
                                cmd.Parameters.AddWithValue("@LoanId", objlist.LoanRequestID);
                                cmd.Parameters.AddWithValue("@OpenDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@PlaneId", objlist.LoanType);
                                cmd.Parameters.AddWithValue("@RateOfInterest", objlist.RateOfIntrest);
                                cmd.Parameters.AddWithValue("@userid", objlist.UserId);
                                cmd.Parameters.AddWithValue("@RemarksBM", objlist.Remark);
                                cmd.Parameters.AddWithValue("@ThirdGurarantor", objlist.ThirdGuarantor);
                                cmd.Parameters.AddWithValue("@FourthGurantor", objlist.FourthGuarantor);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@App_TransactionNo", appmax);


                                cmd.Transaction = objTrans;

                                RowAffect = cmd.ExecuteNonQuery();




                            }
                        }

                        if (objlist.TblLoanRowCount > 1)
                        {
                            using (SqlCommand cmd = new SqlCommand("InsertReserveLedgerID", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                cmd.Parameters.AddWithValue("@amount", objlist.GetLoanAmt);
                                cmd.Parameters.AddWithValue("@RequestId", objlist.LoanRequestID);
                                cmd.Parameters.AddWithValue("@LoanNo", DBNull.Value);
                                cmd.Parameters.AddWithValue("@vno", DBNull.Value);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@App_TransactionNo", appmax);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();



                            }
                        }

                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("R", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.LoanRequestID

            });
            return objDept;
        }


       //   [Route("api/InsertLoanGurantorBulk")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanGurantorBulk(InsertLoan objlist)
        {
            int RowAffect = 0;

            if (objlist.OpenDate == null)
            {
                objlist.OpenDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AccNo == null)
            {
                objlist.AccNo = "";
            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.FirstGuarantiGiven == null)
            {
                objlist.FirstGuarantiGiven = "0";
            }
            if (objlist.FirstGuarantor == null)
            {
                objlist.FirstGuarantor = "";
            }
            if (objlist.FourthGuarantiGiven == null)
            {
                objlist.FourthGuarantiGiven = "0";
            }
            if (objlist.FourthGuarantor == null)
            {
                objlist.FourthGuarantor = "";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.InstallmentAmt == null || objlist.InstallmentAmt == "")
            {
                objlist.InstallmentAmt = "0";
            }
            if (objlist.LoanEligibility == null || objlist.LoanEligibility == "")
            {
                objlist.LoanEligibility = "0";
            }
            if (objlist.LoanPeriodMonth == null)
            {
                objlist.LoanPeriodMonth = "0";
            }
            if (objlist.LoanRequired == null || objlist.LoanRequired == "")
            {
                objlist.LoanRequired = "0";
            }
            if (objlist.RateOfIntrest == null || objlist.RateOfIntrest == "")
            {
                objlist.RateOfIntrest = "0";
            }
            if (objlist.SecondGuarantiGiven == null)
            {
                objlist.SecondGuarantiGiven = "0";
            }
            if (objlist.SecondGuarantor == null)
            {
                objlist.SecondGuarantor = "";
            }
            if (objlist.ThirdGuarantiGiven == null)
            {
                objlist.ThirdGuarantiGiven = "0";
            }
            if (objlist.ThirdGuarantor == null)
            {
                objlist.ThirdGuarantor = "0";
            }

            if (objlist.DesignationID == null || objlist.DesignationID == "")
            {
                objlist.DesignationID = "0";
            }
            if (objlist.LoanDocsPath == null || objlist.LoanDocsPath == "")
            {
                objlist.LoanDocsPath = "";
            }
            if (objlist.LoanDocsTypeID == null || objlist.LoanDocsTypeID == "")
            {
                objlist.LoanDocsTypeID = "0";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        AppTransactionNoClass app = new AppTransactionNoClass();
                        appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                        AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                        if (objlist.TblRowNo == 0)
                        {

                            using (SqlCommand cmd = new SqlCommand("SP_LoanGurantorInsertFedration", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);
                                cmd.Parameters.AddWithValue("@LoanEligibility", objlist.LoanEligibility);

                                if (objlist.LoanTypeText == "Loan Against FD" || objlist.LoanTypeText == "Loan Against RD" || objlist.LoanTypeText == "Loan Against CP")
                                {
                                    cmd.Parameters.AddWithValue("@Designation", 0);
                                }
                                else
                                {

                                    cmd.Parameters.AddWithValue("@Designation", objlist.DesignationID);
                                }
                                cmd.Parameters.AddWithValue("@LoanRequired", objlist.LoanRequired);
                                cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.InstallmentAmt);
                                cmd.Parameters.AddWithValue("@LoanPeriod", objlist.LoanPeriodMonth);
                                cmd.Parameters.AddWithValue("@FirstGuarantor", objlist.FirstGuarantor);
                                cmd.Parameters.AddWithValue("@SecondGuarantor", objlist.SecondGuarantor);
                                cmd.Parameters.AddWithValue("@LoanId", objlist.LoanRequestID);
                                cmd.Parameters.AddWithValue("@OpenDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@PlaneId", objlist.LoanType);
                                cmd.Parameters.AddWithValue("@RateOfInterest", objlist.RateOfIntrest);
                                cmd.Parameters.AddWithValue("@userid", objlist.UserId);
                                cmd.Parameters.AddWithValue("@RemarksBM", objlist.Remark);
                                cmd.Parameters.AddWithValue("@ThirdGurarantor", objlist.ThirdGuarantor);
                                cmd.Parameters.AddWithValue("@FourthGurantor", objlist.FourthGuarantor);
                                cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@App_TransactionNo", appmax);
                                cmd.Parameters.AddWithValue("@LoanRequestAmt", objlist.LoanRequired);
                                cmd.Parameters.AddWithValue("@MeettingID", objlist.ThirdGuarantiGiven);


                                if (objlist.FirstGuarantiGiven == "Yes")
                                {
                                    cmd.Parameters.AddWithValue("@LoanExtentionID", objlist.SecondGuarantiGiven);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@LoanExtentionID", "");
                                }


                                cmd.Transaction = objTrans;

                                RowAffect = cmd.ExecuteNonQuery();




                            }


                        }

                        if (objlist.TblLoanRowCount > 1)
                        {
                            using (SqlCommand cmd = new SqlCommand("InsertReserveLedgerID", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                cmd.Parameters.AddWithValue("@amount", objlist.GetLoanAmt);
                                cmd.Parameters.AddWithValue("@RequestId", objlist.LoanRequestID);
                                cmd.Parameters.AddWithValue("@LoanNo", DBNull.Value);
                                cmd.Parameters.AddWithValue("@vno", DBNull.Value);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@App_TransactionNo", appmax);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();



                            }
                        }

                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("R", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.LoanRequestID

            });
            return objDept;
        }


        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/InsertLoanBreak")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanBreak(InsertLoanBreak objlist)
        {
            int RowAffect = 0;

            if (objlist.CloseDate == null)
            {
                objlist.CloseDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.LoanNo == null)
            {
                objlist.LoanNo = "";
            }
            if (objlist.InterestAmount == null)
            {
                objlist.InterestAmount = "0";
            }
            if (objlist.LoanAmount == null)
            {
                objlist.LoanAmount = "0";
            }
            if (objlist.RateOfIntrest == null)
            {
                objlist.RateOfIntrest = "0";
            }
            if (objlist.ReaminingAmount == null)
            {
                objlist.ReaminingAmount = "0";
            }
            if (objlist.Remark == null)
            {
                objlist.Remark = "";
            }
            if (objlist.InterestLedger == null)
            {
                objlist.InterestLedger = "0";
            }
            if (objlist.PenaltyAmount == null || objlist.PenaltyAmount == "")
            {
                objlist.PenaltyAmount = "";
            }
            if (objlist.UpdateIns == null || objlist.UpdateIns == "")
            {
                objlist.UpdateIns = "0";
            }
            if (objlist.PlanCategory == null || objlist.PlanCategory == "")
            {
                objlist.PlanCategory = "";
            }
            if (objlist.PlanCategory == "BasicPlan")
            {
                objlist.UpdateIns = "0";
            }
            else
            {

            }
            if (objlist.ChqueNo == null || objlist.ChqueNo == "")
            {
                objlist.ChqueNo = "";
            }


            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        AppTransactionNoClass app = new AppTransactionNoClass();
                        appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                        AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                        MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                        MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);

                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", "R");
                            cmd.Parameters.AddWithValue("@Nature", "Debit");
                            //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.InterestAmount);
                            cmd.Parameters.AddWithValue("@BankName", "");
                            cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNaturIn);
                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.InterestLedger);
                            cmd.Parameters.AddWithValue("@ClosingBal", objlist.CloseBalinte);
                            cmd.Parameters.AddWithValue("@BranchName", "");
                            cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                            cmd.Parameters.AddWithValue("@Narration", "To Interest");
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanNo);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.InterestLedger);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", "0");
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();

                        }


                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", "R");
                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                            //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.InterestAmount);
                            cmd.Parameters.AddWithValue("@BankName", "");
                            cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNatueInterest);
                            cmd.Parameters.AddWithValue("@Particular", "By " + objlist.LoanNo + " Closed");
                            cmd.Parameters.AddWithValue("@ClosingBal", objlist.CloseBalInterest);
                            cmd.Parameters.AddWithValue("@BranchName", "");
                            cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                            cmd.Parameters.AddWithValue("@Narration", "Interest BY");
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LedgerId", objlist.InterestLedger);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.LoanNo);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", "0");
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();

                        }


                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", "R");
                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                            //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.ReaminingAmount);
                            cmd.Parameters.AddWithValue("@BankName", "");
                            cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNatueForBank);
                            cmd.Parameters.AddWithValue("@Particular", "By " + objlist.PayByText);
                            cmd.Parameters.AddWithValue("@ClosingBal", objlist.CloseBalForBank);
                            cmd.Parameters.AddWithValue("@BranchName", "");
                            cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                            cmd.Parameters.AddWithValue("@Narration", "By Loan Break");
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanNo);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", "0");
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();

                        }


                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", "R");
                            cmd.Parameters.AddWithValue("@Nature", "Debit");
                            //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.ReaminingAmount);
                            cmd.Parameters.AddWithValue("@BankName", "");
                            cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNaturwith);
                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.LoanNo + " Closed");
                            cmd.Parameters.AddWithValue("@ClosingBal", objlist.CloseBalWith);
                            cmd.Parameters.AddWithValue("@BranchName", "");
                            cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                            cmd.Parameters.AddWithValue("@Narration", "To Loan Break");
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.LoanNo);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", "0");
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();

                        }

                        if (Convert.ToDouble(objlist.PenaltyAmount) > 0 && objlist.PenaltyLedger != "")
                        {
                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Debit");
                                //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.PenaltyAmount);
                                cmd.Parameters.AddWithValue("@BankName", "");
                                cmd.Parameters.AddWithValue("@CloseNature", "");
                                cmd.Parameters.AddWithValue("@Particular", "To " + objlist.PenaltyLedger);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BranchName", "");
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                cmd.Parameters.AddWithValue("@Narration", "To Penality");
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PenaltyLedger);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.PenaltyAmount);
                                cmd.Parameters.AddWithValue("@BankName", "");
                                cmd.Parameters.AddWithValue("@CloseNature", "");
                                cmd.Parameters.AddWithValue("@Particular", "To " + objlist.LoanNo + " Closed");
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BranchName", "");
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                cmd.Parameters.AddWithValue("@Narration", "Penality BY");
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.PenaltyLedger);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.LoanNo);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }

                            using (SqlCommand cmd = new SqlCommand("Update LoanPenalityAmt set InterestAmt=@Interest where LedgerId=@LedgerId and CompID = @CompID and BranchID = @BranchID", con))
                            {

                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.AddWithValue("@Interest", "0");
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanNo);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();


                            }
                        }
                        using (SqlCommand cmd = new SqlCommand("UPDATE LedgerAccountMaster SET Status = 'C',Loan_Close_Date = @CloseDate,NoofInstallmentPaid = @NoofInstallmentPaid WHERE CompID = @CompID AND BranchID = @BranchID AND AccNo = @AccNo", con))
                        {

                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@AccNo", objlist.LoanNo);
                            cmd.Parameters.AddWithValue("@CloseDate", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@NoofInstallmentPaid", objlist.UpdateIns);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();


                        }

                        using (SqlCommand cmd = new SqlCommand("UPDATE Ledger SET Status = 'C',DateTime = @CloseDate,UserId = @UserId WHERE CompID = @CompID AND BranchID = @BranchID AND AccNo = @AccNo", con))
                        {

                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@AccNo", objlist.LoanNo);
                            cmd.Parameters.AddWithValue("@CloseDate", DateTime.ParseExact(objlist.CloseDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Transaction = objTrans;
                            RowAffect = cmd.ExecuteNonQuery();


                        }



                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("R", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }


            if (RowAffect > 0)
            {
                List<FormSubmision> objDept = new List<FormSubmision>();
                objDept.Add(new FormSubmision
                {

                    ReturnStaus = "True",


                    //SendVNo = Vno

                    SendVNo = objlist.LoanNo

                });
                return objDept;
            }
            else
            {
                List<FormSubmision> objDept = new List<FormSubmision>();
                objDept.Add(new FormSubmision
                {

                    ReturnStaus = "False",


                    //SendVNo = Vno

                    SendVNo = objlist.LoanNo

                });
                return objDept;
            }



        }
       //   [Route("api/GetRateofInstByPlanID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetRateofInstByPlanID(string PlaneName, string CompID, string BranchId, string SubGroupCode)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetIntrestRateByPlanID", PlaneName, CompID, BranchId, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Interest"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }



       //   [Route("api/GetPlanTypePlanID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetPlanTypePlanID(string PlaneName, string CompID, string BranchId, string SubGroupCode)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetPlanTypeByPlanID", PlaneName, CompID, BranchId, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["CommIntPer"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetPlanTypeBySubGroupCode")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetPlanTypeBySubGroupCode(string CompID, string BranchId, string SubGroupCode)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetPlanTypeBySubGroupCode", CompID, BranchId, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["CommIntPer"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetInterestTotal")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetInterestTotal(string CompID, string BranchId, string SubGroupCode, string FyID, string AccType, string ctr)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                if (ctr == null)
                {
                    ctr = "";
                }

                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;

                dbCommond = dbState.GetStoredProcCommand("sp_getInterestTotal", SubGroupCode, AccType, FyID, ctr, CompID, BranchId);
                dbCommond.CommandTimeout = 6000;
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["TotalInt"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetInterest")]
       //  [HttpGet]
        public returndbml<GetLoan> GetInterest(string CompID, string BranchId, string SubGroupCode, string FyID, string AccType, string ctr)
        {
            if (ctr == null)
            {
                ctr = "";
            }

            List<GetLoan> objListProduct = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlProduct = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_getInterest", SubGroupCode, AccType, FyID, ctr, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        GetLoan objLed = new GetLoan();
                        objLed.MemberName = dr["LdName"].ToString();
                        objLed.MemberId = dr["MemberId"].ToString();
                        objLed.AccNo = dr["AccNo"].ToString();
                        objLed.RateOfInterest = dr["InterestRate"].ToString();
                        objLed.InstallmentAmount = dr["IntAmt"].ToString();
                        objLed.LoanRequired = dr["interes"].ToString();
                        objLed.ChargesAmt = dr["Amounts"].ToString();
                        objLed.BatchNo = dr["InterestLedger"].ToString();
                        objLed.FourthGurantor = dr["PlanID"].ToString();
                        objLed.FirstGuarantor = dr["PenalityLedger"].ToString();
                        objLed.CargePer = dr["PenalityAmt"].ToString();


                        ConvertTableToList<GetLoan>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetPenaltyTotal")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetPenaltyTotal(string CompID, string BranchId, string SubGroupCode, string FyID, string AccType, string ctr)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_getInterestTotalPenality", AccType, SubGroupCode, FyID, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["TotalInt"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetInstAmtByComIntPer")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetInstAmtByComIntPer(string PlaneName, string CompID, string BranchId, string SubGroupCode)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetInstAmtInstNoByComIntPer", PlaneName, CompID, BranchId, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["InstAmt"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetInstNoByComIntPer")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetInstNoByComIntPer(string PlaneName, string CompID, string BranchId, string SubGroupCode)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetInstAmtInstNoByComIntPer", PlaneName, CompID, BranchId, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["InstallmentNo"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetLoanRequestforApproved")]
       //  [HttpGet]
        public returndbml<FechDetail> GetLoanRequestforApproved(string CompID, string BranchId)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_loanrequestapproved", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["Name"].ToString();
                        objState.RetiredDate = dr["RetiredDate"].ToString();
                        objState.Dob = dr["Dob"].ToString();
                        objState.JoiningDate = dr["JoiningDate"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanEligibility = dr["LoanEligibility"].ToString();
                        objState.DesignationName = dr["DesignationName"].ToString();
                        objState.LoanRequired = dr["LoanRequired"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.FirstGuarantor = dr["FirstGuarantor"].ToString();
                        objState.planename = dr["planename"].ToString();
                        objState.RateOfInterest = dr["RateOfInterest"].ToString();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.LoanId = dr["LoanId"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetMeetingAmountforApproval")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMeetingAmountforApproval(string CompID, string BranchId, string RegionalID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMeetingAmountforApproval", CompID, BranchId, RegionalID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["SHGBranch"].ToString();
                        objState.MemberId = dr["SHGBranchID"].ToString();
                        objState.DesignationName = dr["TransBy"].ToString();
                        objState.LoanRequired = dr["TotalAmt"].ToString();
                        objState.FirstGuarantor = dr["AppTransNo"].ToString();
                        objState.OpenDate = dr["VDate"].ToString();
                        objState.MemberName = dr["CrSupervisor"].ToString();
                        objState.GroupNature = dr["MeettingID"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetMeetingAmountforUpdate")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMeetingAmountforUpdate(string CompID, string BranchId)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMeetingAmountforUpdate", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["SHGBranch"].ToString();
                        objState.MemberId = dr["SHGBranchID"].ToString();
                        objState.DesignationName = dr["TransBy"].ToString();
                        objState.LoanRequired = dr["TotalAmt"].ToString();
                        objState.FirstGuarantor = dr["AppTransNo"].ToString();
                        objState.OpenDate = dr["VDate"].ToString();
                        objState.MemberName = dr["CrSupervisor"].ToString();
                        objState.GroupNature = dr["MeettingID"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetMeetingDepositeAmountDetail")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMeetingDepositeAmountDetail(string CompID, string BranchId, string AppTransNo)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMeetingDepositeAmountDetail", CompID, BranchId, AppTransNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.VDate = dr["VDate"].ToString();
                        objState.VType = dr["VType"].ToString();
                        objState.Nature = dr["Nature"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.AccType = dr["AccType"].ToString();
                        objState.Amount = dr["Amount"].ToString();
                        objState.TransactionBy = dr["TransactionBy"].ToString();
                        objState.CompID = dr["CompID"].ToString();
                        objState.BranchID = dr["BranchID"].ToString();
                        objState.SHGBranchID = dr["SHGBranchID"].ToString();
                        objState.UserID = dr["UserID"].ToString();
                        objState.AppTransNo = dr["AppTransNo"].ToString();
                        objState.MemberName = dr["BranchMember"].ToString();
                        objState.UnderBrachName = dr["TranBy"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetMemberDataforBulkUpdate")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMemberDataforBulkUpdate(string CompID, string BranchId, string AppTransNo)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberDataforBulkUpdate", CompID, BranchId, AppTransNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.VDate = dr["VDate"].ToString();
                        objState.VType = dr["VType"].ToString();
                        objState.Nature = dr["Nature"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.AccType = dr["MeetingID"].ToString();
                        objState.Amount = dr["Amount"].ToString();
                        objState.TransactionBy = dr["TransBy"].ToString();
                        objState.CompID = dr["CompID"].ToString();
                        objState.BranchID = dr["BranchID"].ToString();
                        objState.SHGBranchID = dr["SHGBranchID"].ToString();
                        objState.UserID = "";
                        objState.AppTransNo = dr["AppTransNo"].ToString();
                        objState.MemberName = "";
                        objState.UnderBrachName = dr["TransBy"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetMeetingLoanRequestAmountDetail")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMeetingLoanRequestAmountDetail(string CompID, string BranchId, string AppTransNo, string RequestDate)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {

                if (RequestDate == null || RequestDate == "")
                {

                }
                else
                {
                    FDate = DateTime.ParseExact(RequestDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);

                }


                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMeetingLoanRequestAmountDetail", CompID, BranchId, AppTransNo, FDate);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["Name"].ToString();
                        objState.RetiredDate = dr["RetiredDate"].ToString();
                        objState.Dob = dr["Dob"].ToString();
                        objState.JoiningDate = dr["JoiningDate"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanEligibility = dr["LoanEligibility"].ToString();
                        objState.DesignationName = dr["DesignationName"].ToString();
                        objState.LoanRequired = dr["LoanRequired"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.FirstGuarantor = dr["FirstGuarantor"].ToString();
                        objState.planename = dr["planename"].ToString();
                        objState.RateOfInterest = dr["RateOfInterest"].ToString();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.LoanId = dr["LoanId"].ToString();
                        objState.LoanRequestAmt = dr["LoanRequestAmt"].ToString();
                        objState.AccNo = dr["FedLoanAccNo"].ToString();
                        objState.BookPKId = dr["SHGLoanCreditLed"].ToString();
                        objState.UnderBrachName = dr["SHGLoanCreditLdname"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetMeetingLoanRequestDetailByLoanID")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMeetingLoanRequestDetailByLoanID(string CompID, string BranchId, string LoanID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {



                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMeetingLoanRequestDetailByLoanID", CompID, BranchId, LoanID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["Name"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanEligibility = dr["LoanEligibility"].ToString();
                        objState.DesignationName = dr["DesignationName"].ToString();
                        objState.LoanRequired = dr["LoanRequired"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.FirstGuarantor = dr["FirstGuarantor"].ToString();
                        objState.planename = dr["SecondGuarantor"].ToString();
                        objState.RateOfInterest = dr["RateOfInterest"].ToString();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.LoanId = dr["LoanId"].ToString();
                        objState.LoanRequestAmt = dr["LoanRequestAmt"].ToString();
                        objState.LoanDepoAmt = dr["RemAmt"].ToString();
                        objState.BookPKId = dr["PlaneId"].ToString();



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetMeetingLoanApprovedAmountDetail")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMeetingLoanApprovedAmountDetail(string CompID, string BranchId, string AppTransNo, string RequestDate)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {

                if (RequestDate == null || RequestDate == "")
                {

                }
                else
                {
                    FDate = DateTime.ParseExact(RequestDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);

                }


                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMeetingLoanApprovedAmountDetail", CompID, BranchId, AppTransNo, FDate);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["Name"].ToString();
                        objState.RetiredDate = dr["RetiredDate"].ToString();
                        objState.Dob = dr["Dob"].ToString();
                        objState.JoiningDate = dr["JoiningDate"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanEligibility = dr["LoanEligibility"].ToString();
                        objState.DesignationName = dr["DesignationName"].ToString();
                        objState.LoanRequired = dr["LoanRequired"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.FirstGuarantor = dr["FirstGuarantor"].ToString();
                        objState.planename = dr["planename"].ToString();
                        objState.RateOfInterest = dr["RateOfInterest"].ToString();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.LoanId = dr["LoanId"].ToString();
                        objState.LoanRequestAmt = dr["LoanRequestAmt"].ToString();
                        objState.AccNo = dr["FedLoanAccNo"].ToString();
                        objState.CPAmt = dr["LoanCarges"].ToString();
                        objState.BookSrNo = dr["BranchTransby"].ToString();
                        objState.BookAlotQty = dr["PlaneId"].ToString();
                        objState.BookRemainQty = dr["LoanChargeled"].ToString();
                        objState.EmpID = dr["MaxLoanNo"].ToString();
                        objState.Noappro = dr["BranchTransbyText"].ToString();
                        objState.Noreject = dr["LoanExtentionID"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetMeetingLoanAmtforApproval")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMeetingLoanAmtforApproval(string CompID, string BranchId, string RegionalID)
        {
            if (BranchId == null)
            {
                BranchId = "0";
            }
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMeetingLoanAmtforApproval", CompID, BranchId, RegionalID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["SHGBranch"].ToString();
                        objState.MemberId = dr["BranchID"].ToString();
                        objState.DesignationName = dr["TotalRequest"].ToString();
                        objState.LoanRequired = dr["TotalAmt"].ToString();
                        objState.FirstGuarantor = dr["App_TransactionNo"].ToString();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.MemberName = dr["CrSupervisor"].ToString();
                        //objState.LoanRequestAmt = dr["TotalRequest"].ToString();



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetMeetingLoanApprovedRequest")]
       //  [HttpGet]
        public returndbml<FechDetail> GetMeetingLoanApprovedRequest(string CompID, string BranchId)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMeetingLoanApprovedRequest", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["SHGBranch"].ToString();
                        objState.MemberId = dr["BranchID"].ToString();
                        objState.DesignationName = dr["TotalRequest"].ToString();
                        objState.LoanRequired = dr["TotalAmt"].ToString();
                        objState.FirstGuarantor = dr["App_TransactionNo"].ToString();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.MemberName = dr["CrSupervisor"].ToString();
                        //objState.LoanRequestAmt = dr["TotalRequest"].ToString();
                        //objState.AccNo = dr["LoanExtentionID"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetLoanStatistics")]
       //  [HttpGet]
        public returndbml<FechDetail> GetLoanStatistics(string CompID, string BranchId, string FyID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_LoanSummarydetails", CompID, BranchId, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Noappro = dr["Noappro"].ToString();
                        objState.Noreject = dr["Noreject"].ToString();
                        objState.Loanapproved = dr["Loanapproved"].ToString();
                        objState.LoanReject = dr["LoanReject"].ToString();
                        objState.Pendingcount = dr["Pendingcount"].ToString();
                        objState.LoanPending = dr["LoanPending"].ToString();



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetLoanRequiredByRequestID")]
       //  [HttpGet]

        public returndbml<FechDetail> GetLoanRequiredByRequestID(string ReqID, string CompID, string BranchId, string MemberID, string FyID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLoanReqAmtByReqID", ReqID, CompID, BranchId, MemberID, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.LoanRequired = dr["LoanRequired"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetFinencialYearByFyID")]
       //  [HttpGet]
        public returndbml<GetFinencialYearResult> GetFinencialYearByFyID(string CompID, string FyID)
        {
            List<GetFinencialYearResult> objListState = new List<GetFinencialYearResult>();
            returndbml<GetFinencialYearResult> objreturndbmlState = new returndbml<GetFinencialYearResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFinencialYear", CompID, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetFinencialYearResult objState = new GetFinencialYearResult();
                        objState.ColumnVar1 = dr["FyYearFrom"].ToString();
                        objState.ColumnVar2 = dr["FyYearTo"].ToString();



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/UpadateLoanStatus")]
      //     [HttpPost]
        public List<FormSubmision> UpadateLoanStatus(ApproveLoan objlist)
        {
            int RowAffect = 0;

            if (objlist.Date == null)
            {
                objlist.Date = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.UserId == null)
            {
                objlist.UserId = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.SelectedStatus == "Approved")
                        {
                            using (SqlCommand cmd = new SqlCommand("update LoanGurantor set Approved=@Approved,LrApprovedby=@LrApprovedby,Approveddate=@Approveddate,Remarks=@Remarks,FyId=@FyId where LoanId=@LoanId and MemberId=@MemberId and CompID = @CompID and BranchID = @BranchID", con))
                            {
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.AddWithValue("@Approved", "Approved");
                                cmd.Parameters.AddWithValue("@LoanId", objlist.LoanReqID);
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@LrApprovedby", objlist.UserId);
                                cmd.Parameters.AddWithValue("@Approveddate", DateTime.ParseExact(objlist.Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@Remarks", objlist.Remarks);


                                cmd.Transaction = objTrans;

                                RowAffect = cmd.ExecuteNonQuery();

                            }
                        }
                        else if (objlist.SelectedStatus == "Rejected")
                        {
                            using (SqlCommand cmd = new SqlCommand("update LoanGurantor set Approved=@Approved,LrApprovedby=@LrApprovedby,Approveddate=@Approveddate,Remarks=@Remarks,FyId=@FyId where LoanId=@LoanId and MemberId=@MemberId and CompID = @CompID and BranchID = @BranchID", con))
                            {
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.AddWithValue("@Approved", "Reject");
                                cmd.Parameters.AddWithValue("@LoanId", objlist.LoanReqID);
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@LrApprovedby", objlist.UserId);
                                cmd.Parameters.AddWithValue("@Approveddate", DateTime.ParseExact(objlist.Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@Remarks", objlist.Remarks);


                                cmd.Transaction = objTrans;

                                RowAffect = cmd.ExecuteNonQuery();

                            }
                        }


                        if (RowAffect > 0)
                        {

                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.LoanReqID

            });
            return objDept;
        }


       //   [Route("api/UpadateFyStatus")]
      //     [HttpPost]
        public List<FormSubmision> UpadateFyStatus(ApproveLoan objlist)
        {
            int RowAffect = 0;

            if (objlist.Date == null)
            {
                objlist.Date = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.UserId == null)
            {
                objlist.UserId = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.SelectedStatus == "Active")
                        {
                            using (SqlCommand cmd = new SqlCommand("update FinencialYear set Status='Active' where FyId=@FyId", con))
                            {
                                cmd.CommandType = CommandType.Text;
                                //cmd.Parameters.AddWithValue("@LoanId", objlist.LoanReqID);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Transaction = objTrans;

                                RowAffect = cmd.ExecuteNonQuery();

                            }
                        }
                        else if (objlist.LoanReqID != "0")
                        {
                            using (SqlCommand cmd = new SqlCommand("delete from Voucher where AppTransNo=@vno and FyId=@FyId and CompID = @CompId and BranchID = @BranchId", con))
                            {
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.AddWithValue("@vno", objlist.LoanReqID);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Transaction = objTrans;

                                RowAffect = cmd.ExecuteNonQuery();

                            }
                        }


                        if (RowAffect > 0)
                        {

                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.LoanReqID

            });
            return objDept;
        }


        public static Int32 ChkBranchFyIns;
       //   [Route("api/UpadateFyStatusForBranch")]
      //     [HttpPost]
        public List<FormSubmision> UpadateFyStatusForBranch(ApproveLoan objlist)
        {
            int RowAffect = 0;

            if (objlist.Date == null)
            {
                objlist.Date = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.UserId == null)
            {
                objlist.UserId = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {
                CN.Open();
                using (SqlCommand cmd = new SqlCommand("CheckBranchwiseStatusInsert", CN))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);

                    dr = cmd.ExecuteReader();
                    if (dr.Read())
                    {
                        ChkBranchFyIns = Convert.ToInt32(dr["FyId"].ToString());


                    }
                    else
                    {
                        ChkBranchFyIns = 0;
                    }

                }
                dr.Close();
                CN.Close();

                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        if (ChkBranchFyIns > 0)
                        {

                            if (objlist.SelectedStatus == "Active")
                            {
                                using (SqlCommand cmd = new SqlCommand("update FinencialYearBranchwiseStatus set Status='Active' where CompId = @CompID and BranchID = @BranchID and  FyId=@FyId", con))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    //cmd.Parameters.AddWithValue("@LoanId", objlist.LoanReqID);

                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                            }
                        }
                        else
                        {
                            using (SqlCommand cmd = new SqlCommand("INSERT INTO FinencialYearBranchwiseStatus(CompId,Fyid,Status,IsActive,BranchID)VALUES(@CompID,@Fyid,@Status,@IsActive,@BranchID);", con))
                            {
                                cmd.CommandType = CommandType.Text;

                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@Status", "Active");
                                cmd.Parameters.AddWithValue("@IsActive", "Yes");
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);


                                cmd.Transaction = objTrans;

                                RowAffect = cmd.ExecuteNonQuery();

                            }
                        }
                        if (objlist.LoanReqID != "0")
                        {
                            using (SqlCommand cmd = new SqlCommand("delete from Voucher where AppTransNo=@vno and FyId=@FyId and CompID = @CompId and BranchID = @BranchId", con))
                            {
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.AddWithValue("@vno", objlist.LoanReqID);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Transaction = objTrans;

                                RowAffect = cmd.ExecuteNonQuery();

                            }
                        }


                        if (RowAffect > 0)
                        {

                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.LoanReqID

            });
            return objDept;
        }


       //   [Route("api/DeleteOpeningBalance")]
      //     [HttpPost]
        public List<FormSubmision> DeleteOpeningBalance(ApproveLoan objlist)
        {
            int RowAffect = 0;
            RowDelete = 0;
            ChkBranchFyIns = 0;
            if (objlist.UserId == null)
            {
                objlist.UserId = "";
            }
            if (objlist.LoanReqID == null)
            {
                objlist.LoanReqID = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {

                //if (objlist.TblRowNo == 0)
                //{

                AppTransactionNoClass app = new AppTransactionNoClass();
                appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                MaxFyID = app.GetMaxFyID(objlist.Compid, objlist.BranchID);

                //UpdaeFyFrom = objlist.TotalDebitAmt;

                //}
                CN.Open();
                using (SqlCommand cmd = new SqlCommand("CheckBranchwiseStatusInsert", CN))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);

                    dr = cmd.ExecuteReader();
                    if (dr.Read())
                    {
                        ChkBranchFyIns = Convert.ToInt32(dr["FyId"].ToString());


                    }
                    else
                    {
                        ChkBranchFyIns = 0;
                    }

                }
                dr.Close();
                CN.Close();

                CN.Open();
                using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and AppTransNo= @AppTransNo and  Particular like '%'+'To Transfer To Profit And Loss'+'%'", CN))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("@AppTransNo", objlist.LoanReqID);
                    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    cmd.ExecuteNonQuery();

                }
                CN.Close();

                CN.Open();
                using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and Narration='New Finenancial Year' and Vdate=(select MAX(FyYearFrom) from FinencialYear where CompId = @CompID)", CN))
                {
                    cmd.CommandType = CommandType.Text;
                    //cmd.Parameters.AddWithValue("@vno", objlist.LoanReqID);
                    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    RowDelete = cmd.ExecuteNonQuery();

                }
                CN.Close();



                //if (RowDelete > 0)
                //{

                CN.Open();
                using (SqlCommand cmd = new SqlCommand("truncate table VoucherFyId", CN))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                CN.Close();



                CN.Open();
                using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearOld", CN))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Fyid", objlist.FyId);
                    cmd.Parameters.AddWithValue("@ToDate", DateTime.ParseExact(objlist.Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                    cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                    cmd.CommandTimeout = 120;
                    cmd.ExecuteNonQuery();

                }
                CN.Close();

                CN.Open();
                using (SqlCommand cmd = new SqlCommand("select MAX(FyId) FyId,Max(FyYearFrom) Fromd,CONVERT (varchar, Max(FyYearFrom), 105)as FDate from FinencialYear where CompId =@CompId", CN))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                    dr = cmd.ExecuteReader();
                    if (dr.Read())
                    {
                        MaxFyID = dr["FyId"].ToString();
                        UpdaeFyFrom = dr["FDate"].ToString();
                    }

                }
                dr.Close();
                CN.Close();

                CN.Open();
                using (SqlCommand cmd = new SqlCommand("select Top 1 cast(DATEPART(yyyy,FyYearFrom) as varchar)+'-'+ cast(DATEPART(yyyy,FyYearTo) as varchar) as FyYear,FyId from FinencialYear where CompId =@CompId order by FyId desc ", CN))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                    dr = cmd.ExecuteReader();
                    if (dr.Read())
                    {
                        objlist.Remarks = dr["FyYear"].ToString();

                    }

                }
                dr.Close();
                CN.Close();


                CN.Open();
                using (SqlCommand cmd = new SqlCommand("UPDATE VoucherFyId SET Fyid = @Fyid,Particular = @Particular,Vdate = @Vdate where CompId = @CompId and BranchID = @BranchID and AppTransNo = @appmax", CN))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("@Fyid", MaxFyID);
                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.Remarks);
                    cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(UpdaeFyFrom, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                    cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    cmd.Parameters.AddWithValue("@appmax", appmax);
                    cmd.ExecuteNonQuery();

                }
                CN.Close();


                if (ChkBranchFyIns > 0)
                {
                    CN.Open();
                    using (SqlCommand cmd = new SqlCommand("UPDATE FinencialYearBranchwiseStatus SET Status='InActive' where CompId = @CompId and BranchID = @BranchID and Fyid = @Fyid", CN))
                    {
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);

                        cmd.ExecuteNonQuery();

                    }
                    CN.Close();
                }
                else
                {
                    CN.Open();
                    using (SqlCommand cmd = new SqlCommand("INSERT INTO FinencialYearBranchwiseStatus(CompId,Fyid,Status,IsActive,BranchID)VALUES(@CompID,@Fyid,@Status,@IsActive,@BranchID);", CN))
                    {
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                        cmd.Parameters.AddWithValue("@Status", "InActive");
                        cmd.Parameters.AddWithValue("@IsActive", "No");
                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        cmd.ExecuteNonQuery();

                    }
                    CN.Close();

                }

                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearToFinal", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Transaction = objTrans;

                            RowAffect = cmd.ExecuteNonQuery();

                        }

                        if (RowAffect > 0)
                        {

                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }
                //}

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = appmax

            });
            return objDept;
        }


       //   [Route("api/CloseLastMeetingID")]
      //     [HttpPost]
        public List<FormSubmision> CloseLastMeetingID(ApproveLoan objlist)
        {
            int RowAffect = 0;

            if (objlist.Date == null)
            {
                objlist.Date = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.UserId == null)
            {
                objlist.UserId = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        using (SqlCommand cmd = new SqlCommand("UPDATE BulkRecieptMemberwise SET MeetingStatus = 'C' WHERE CompID  = @CompID AND BranchID = @BranchID AND MeetingNo = @MeetingNo", con))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@MeetingNo", objlist.LoanReqID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);



                            cmd.Transaction = objTrans;

                            RowAffect = cmd.ExecuteNonQuery();

                        }





                        if (RowAffect > 0)
                        {

                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.LoanReqID

            });
            return objDept;
        }


       //   [Route("api/UpadateLoanAmount")]
      //     [HttpPost]
        public List<FormSubmision> UpadateLoanAmount(ApproveLoan objlist)
        {
            int RowAffect = 0;

            if (objlist.Date == null)
            {
                objlist.Date = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.UserId == null)
            {
                objlist.UserId = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        using (SqlCommand cmd = new SqlCommand("update LoanGurantor set LoanRequired=@LoanRequired,LoanPeriod = @LoanPeriod where LoanId=@LoanId and MemberId=@MemberId and CompID = @CompID and BranchID = @BranchID", con))
                        {
                            cmd.CommandType = CommandType.Text;

                            cmd.Parameters.AddWithValue("@LoanId", objlist.LoanReqID);
                            cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@LoanRequired", objlist.Remarks);
                            cmd.Parameters.AddWithValue("@LoanPeriod", objlist.SelectedStatus);

                            cmd.Transaction = objTrans;

                            RowAffect = cmd.ExecuteNonQuery();

                        }

                        //else if (objlist.SelectedStatus == "Rejected")
                        //{
                        //    using (SqlCommand cmd = new SqlCommand("update LoanGurantor set Approved=@Approved,LrApprovedby=@LrApprovedby,Approveddate=@Approveddate,Remarks=@Remarks,FyId=@FyId where LoanId=@LoanId and MemberId=@MemberId and CompID = @CompID and BranchID = @BranchID", con))
                        //    {
                        //        cmd.CommandType = CommandType.Text;
                        //        cmd.Parameters.AddWithValue("@Approved", "Reject");
                        //        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanReqID);
                        //        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                        //        cmd.Parameters.AddWithValue("@LrApprovedby", objlist.UserId);
                        //        cmd.Parameters.AddWithValue("@Approveddate", DateTime.ParseExact(objlist.Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        //        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                        //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        //        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        //        cmd.Parameters.AddWithValue("@Remarks", objlist.Remarks);


                        //        cmd.Transaction = objTrans;

                        //        RowAffect = cmd.ExecuteNonQuery();

                        //    }
                        //}


                        if (RowAffect > 0)
                        {

                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.LoanReqID

            });
            return objDept;
        }

       //   [Route("api/UpadateLoanInstallmentAMT")]
      //     [HttpPost]
        public List<FormSubmision> UpadateLoanInstallmentAMT(ApproveLoan objlist)
        {
            int RowAffect = 0;

            if (objlist.Date == null)
            {
                objlist.Date = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.UserId == null)
            {
                objlist.UserId = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        using (SqlCommand cmd = new SqlCommand("update LoanGurantor set InstallmentAmount=@InstallmentAmount,LoanPeriod = @LoanPeriod where LoanId=@LoanId and MemberId=@MemberId and CompID = @CompID and BranchID = @BranchID", con))
                        {
                            cmd.CommandType = CommandType.Text;

                            cmd.Parameters.AddWithValue("@LoanId", objlist.LoanReqID);
                            cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.Remarks);
                            cmd.Parameters.AddWithValue("@LoanPeriod", objlist.SelectedStatus);



                            cmd.Transaction = objTrans;

                            RowAffect = cmd.ExecuteNonQuery();

                        }

                        //else if (objlist.SelectedStatus == "Rejected")
                        //{
                        //    using (SqlCommand cmd = new SqlCommand("update LoanGurantor set Approved=@Approved,LrApprovedby=@LrApprovedby,Approveddate=@Approveddate,Remarks=@Remarks,FyId=@FyId where LoanId=@LoanId and MemberId=@MemberId and CompID = @CompID and BranchID = @BranchID", con))
                        //    {
                        //        cmd.CommandType = CommandType.Text;
                        //        cmd.Parameters.AddWithValue("@Approved", "Reject");
                        //        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanReqID);
                        //        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                        //        cmd.Parameters.AddWithValue("@LrApprovedby", objlist.UserId);
                        //        cmd.Parameters.AddWithValue("@Approveddate", DateTime.ParseExact(objlist.Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                        //        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                        //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        //        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        //        cmd.Parameters.AddWithValue("@Remarks", objlist.Remarks);


                        //        cmd.Transaction = objTrans;

                        //        RowAffect = cmd.ExecuteNonQuery();

                        //    }
                        //}


                        if (RowAffect > 0)
                        {

                            objTrans.Commit();
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = objlist.LoanReqID

            });
            return objDept;
        }

       //   [Route("api/GetLoanRequestByStatus")]
       //  [HttpGet]
        public returndbml<FechDetail> GetLoanRequestByStatus(string CompID, string BranchId, string Status, string FyID, string FromDate, string ToDate)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_LoanApprovedRejected", CompID, BranchId, Status, FyID, FromDate, ToDate);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.Name = dr["Name"].ToString();
                        objState.RetiredDate = dr["RetiredDate"].ToString();
                        objState.Dob = dr["Dob"].ToString();
                        objState.JoiningDate = dr["JoiningDate"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanEligibility = dr["LoanEligibility"].ToString();
                        objState.DesignationName = dr["DesignationName"].ToString();
                        objState.LoanRequired = dr["LoanRequired"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.FirstGuarantor = dr["FirstGuarantor"].ToString();
                        objState.planename = dr["planename"].ToString();
                        objState.RateOfInterest = dr["RateOfInterest"].ToString();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.LoanId = dr["LoanId"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetPendingLoanRequest")]
       //  [HttpGet]
        public returndbml<GetLoan> GetPendingLoanRequest(string CompID, string BranchId)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_FetchLoanRequestList", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanId = dr["LoanId"].ToString();
                        objState.LoanRequired = dr["LoanRequired"].ToString();
                        objState.MemberName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                        objState.LoanType = dr["PlaneName"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }



       //   [Route("api/GetAllLoadnRequestAoutocomplete")]
       //  [HttpGet]
        public returndbml<GetAllMemberIDResult> GetAllLoadnRequestAoutocomplete(string CompID, string BranchId)
        {
            List<GetAllMemberIDResult> objListState = new List<GetAllMemberIDResult>();
            returndbml<GetAllMemberIDResult> objreturndbmlState = new returndbml<GetAllMemberIDResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAllLoanRequestID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetAllMemberIDResult objState = new GetAllMemberIDResult();
                        ConvertTableToList<GetAllMemberIDResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetLoanReqByStatus")]
       //  [HttpGet]
        public returndbml<GetLoan> GetLoanReqByStatus(string Status, string CompID, string BranchId, string FyID)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_LoanApprovedRejectedFormanager", Status, CompID, BranchId, FyID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();
                        objState.OpenDate = dr["OpenDate"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanId = dr["LoanId"].ToString();
                        objState.LoanRequired = dr["LoanRequired"].ToString();
                        objState.MemberName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                        objState.LoanType = dr["PlaneName"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetMultipleLoanNagainst")]
       //  [HttpGet]
        public returndbml<GetLoan> GetMultipleLoanNagainst(string CompID, string BranchId, string LoanId)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMultipleLoanNagainstByReqID", CompID, BranchId, LoanId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();
                        objState.LoanId = dr["LedgerId"].ToString();
                        objState.LoanRequired = dr["Amount"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetLoanDisbursementDetailByLoanReqID")]
       //  [HttpGet]
        public returndbml<GetLoan> GetLoanDisbursementDetailByLoanReqID(string CompID, string BranchId, string LoanId)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLoanDisbursementDetailByLoanReqID", CompID, BranchId, LoanId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanEligibility = dr["LoanEligibility"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();
                        objState.LoanRequired = dr["LoanRequired"].ToString();
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.AgentId = dr["AgentId"].ToString();
                        objState.FirstGuarantor = dr["FirstGuarantor"].ToString();
                        objState.SecondGuarantor = dr["SecondGuarantor"].ToString();
                        objState.ThirdGurarantor = dr["ThirdGurarantor"].ToString();
                        objState.FourthGurantor = dr["FourthGurantor"].ToString();
                        objState.PlaneId = dr["PlaneId"].ToString();
                        objState.RateOfInterest = dr["RateOfInterest"].ToString();
                        objState.BatchNo = dr["BatchNo"].ToString();
                        objState.DOB = dr["DOB"].ToString();
                        objState.DisplyMemberID = dr["DisplyMemberID"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetLoanDisByLoanID")]
       //  [HttpGet]
        public returndbml<GetLoan> GetLoanDisByLoanID(string CompID, string BranchId, string AccNo)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetLoanDetailsByLoanID", CompID, BranchId, AccNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();
                        //objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanEligibility = dr["LoanEligibility"].ToString();
                        objState.InstallmentAmount = dr["InstallmentAmount"].ToString();
                        objState.LoanRequired = dr["LoanSanction"].ToString();
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        //objState.AgentId = dr["AgentId"].ToString();
                        objState.FirstGuarantor = dr["Guaranter1_Id"].ToString();
                        objState.SecondGuarantor = dr["Guaranter2_Id"].ToString();
                        objState.ThirdGurarantor = dr["Guaranter3_Id"].ToString();
                        objState.FourthGurantor = dr["Guaranter4_Id"].ToString();
                        objState.PlaneId = dr["LoanType"].ToString();
                        objState.RateOfInterest = dr["RateOfInt"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.ChargesAmt = dr["LoanDis"].ToString();
                        //objState.BatchNo = dr["BatchNo"].ToString();
                        //objState.DOB = dr["DOB"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/FillTransBy")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillTransBy(string Memberid, string CompID, string BranchId, string SetChargeAmt)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_FillLoanCombo", Memberid, CompID, BranchId, SetChargeAmt);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["LdName"].ToString();
                        objLed.NextMeNo = dr["Accno"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillMemberDC")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillMemberDC(string Memberid, string CompID, string BranchId, string SetChargeAmt)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillMemberDCAcc", Memberid, CompID, BranchId, SetChargeAmt);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["Accno"].ToString();
                        objLed.NextMeNo = dr["Accno"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillPayType")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillPayType(string CompID, string BranchId)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_FillPaymentType", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["PaymentTypeName"].ToString();
                        objLed.NextMeNo = dr["Id"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillSHGCredit")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillSHGCredit(string CompID, string BranchId)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillSHGCredit", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["LdName"].ToString();
                        objLed.NextMeNo = dr["AccNo"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }



       //   [Route("api/FillSHGDebit")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillSHGDebit(string CompID, string BranchId, string FedTransType)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillSHGDebit", CompID, BranchId, FedTransType);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["LdName"].ToString();
                        objLed.NextMeNo = dr["AccNo"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillMemberCombo")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillMemberCombo(string CompID, string BranchId)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberDetailForSearch", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["FullName"].ToString();
                        //objLed.NextMeNo = dr["Id"].ToString();
                        objLed.MemberFullCode = dr["MEMBER_ACCNO"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillTransByWithSuspanseLed")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillTransByWithSuspanseLed(string Memberid, string CompID, string BranchId, string SetChargeAmt)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_FillTransBywithSuspanseLed", Memberid, CompID, BranchId, SetChargeAmt);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["LdName"].ToString();
                        objLed.NextMeNo = dr["Accno"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillFDType")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillFDType(string CompID, string BranchId)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_FetchFDPlane", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["PlaneName"].ToString();
                        objLed.NextMeNo = dr["PlaneId"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillRDType")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillRDType(string CompID, string BranchId)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_FetchRDPlane", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["PlaneName"].ToString();
                        objLed.NextMeNo = dr["PlaneId"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/FillDCType")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillDCType(string CompID, string BranchId)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_FetchDCPlane", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["PlaneName"].ToString();
                        objLed.NextMeNo = dr["PlaneId"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/FillAgent")]
       //  [HttpGet]
        public returndbml<GetNextMemberNoResult> FillAgent(string CompID, string BranchId)
        {
            List<GetNextMemberNoResult> objListProduct = new List<GetNextMemberNoResult>();
            returndbml<GetNextMemberNoResult> objreturndbmlProduct = new returndbml<GetNextMemberNoResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAgent", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetNextMemberNoResult objLed = new GetNextMemberNoResult();
                        objLed.NextMemberNo = dr["Name"].ToString();
                        objLed.NextMeNo = dr["Sno"].ToString();
                        ConvertTableToList<GetNextMemberNoResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetLoanCharges")]
       //  [HttpGet]
        public returndbml<GetLoan> GetLoanCharges(string CompID, string BranchId)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLoanCharges", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();
                        objState.ChargesName = dr["ChargeName"].ToString();
                        objState.ChargesAmt = dr["Member_Ship_Charges"].ToString();
                        objState.ChargesLed = dr["LedgerId"].ToString();
                        objState.CargePer = dr["CargePer"].ToString();
                        objState.SubGroupCode = dr["SubGroupCode"].ToString();
                        objState.LedgerType = dr["LedgerType"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetDailyCollectionCharges")]
       //  [HttpGet]
        public returndbml<GetLoan> GetDailyCollectionCharges(string CompID, string BranchId)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetDailyCollectionCharges", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();
                        objState.ChargesName = dr["ChargeName"].ToString();
                        objState.ChargesAmt = dr["Member_Ship_Charges"].ToString();
                        objState.ChargesLed = dr["LedgerId"].ToString();
                        objState.CargePer = dr["CargePer"].ToString();
                        objState.SubGroupCode = dr["SubGroupCode"].ToString();
                        objState.LedgerType = dr["LedgerType"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetAccNoByMemberID")]
       //  [HttpGet]
        public returndbml<GetLoan> GetAccNoByMemberID(string CompID, string BranchId, string MemberID, string SubGroupCode)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAccNoByMemberID", CompID, BranchId, MemberID, SubGroupCode);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();
                        objState.AccNo = dr["AccNo"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetLoanDisID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetLoanDisID(string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_FetchMaxLoanId", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["mc"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/GetLastDayCloseDate")]
       //  [HttpGet]
        public returndbml<GetLoan> GetLastDayCloseDate(string CompID, string BranchId)
        {
            List<GetLoan> objListProduct = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlProduct = new returndbml<GetLoan>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetLastDayClose", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        GetLoan objLed = new GetLoan();
                        objLed.LastDayCloseDate = dr["Day_Close"].ToString();
                        ConvertTableToList<GetLoan>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/GetSubGroupCodeByProductID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetSubGroupCodeByProductID(string ProductID, string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetSubgroupCodeBySno", ProductID, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["SubGroupCode"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/ChkCummulativeDate")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> ChkCummulativeDate(string ProductID, string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetCummDate", ProductID, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["CummDate"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


        public static string MAx;
        [ResponseType(typeof(returndbml<sp_GetMaxVNofromEmployeeRegistrationbycompidBranchIDResult>))]
       //   [Route("api/InsertLoanDisbursemant")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanDisbursemant(InsertLoanDis objlist)
        {
            int RowAffect = 0;

            if (objlist.OpenDate == null)
            {
                objlist.OpenDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AccNo == null)
            {
                objlist.AccNo = "";
            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.FirstGuarantiGiven == null)
            {
                objlist.FirstGuarantiGiven = "0";
            }
            if (objlist.FirstGuarantor == null)
            {
                objlist.FirstGuarantor = "";
            }
            if (objlist.FourthGuarantiGiven == null)
            {
                objlist.FourthGuarantiGiven = "0";
            }
            if (objlist.FourthGuarantor == null)
            {
                objlist.FourthGuarantor = "";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.InstallmentAmt == null || objlist.InstallmentAmt == "")
            {
                objlist.InstallmentAmt = "0";
            }
            if (objlist.LoanEligibility == null || objlist.LoanEligibility == "")
            {
                objlist.LoanEligibility = "0";
            }
            if (objlist.LoanPeriodMonth == null)
            {
                objlist.LoanPeriodMonth = "0";
            }
            if (objlist.LoanSanctioned == null || objlist.LoanSanctioned == "")
            {
                objlist.LoanSanctioned = "0";
            }
            if (objlist.RateOfIntrest == null || objlist.RateOfIntrest == "")
            {
                objlist.RateOfIntrest = "0";
            }
            if (objlist.SecondGuarantiGiven == null)
            {
                objlist.SecondGuarantiGiven = "0";
            }
            if (objlist.SecondGuarantor == null)
            {
                objlist.SecondGuarantor = "";
            }
            if (objlist.ThirdGuarantiGiven == null)
            {
                objlist.ThirdGuarantiGiven = "0";
            }
            if (objlist.ThirdGuarantor == null)
            {
                objlist.ThirdGuarantor = "0";
            }

            if (objlist.DesignationID == null || objlist.DesignationID == "")
            {
                objlist.DesignationID = "0";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.LoanDisplyID == null)
            {
                objlist.LoanDisplyID = "";
            }
            if (objlist.DisplyMemberID == null)
            {
                objlist.DisplyMemberID = "0";
            }
            if (objlist.ChqueNo == null)
            {
                objlist.ChqueNo = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            MaxVNoW = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "W");
                            MaxVNoJ = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "J");
                            MAx = app.GetMaxInstallmentNo(objlist.Compid, objlist.BranchID);
                        }

                        if (objlist.TblLoanRowCount >= 1)
                        {

                            if (objlist.TblRowNo == 0)
                            {
                                if (objlist.chkLoanExtention == "Yes")
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "W");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "To " + objlist.PayByText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                        cmd.Parameters.AddWithValue("@Narration", "");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.Particuler);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "W");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By Loan Extension" + objlist.Particuler);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                        cmd.Parameters.AddWithValue("@Narration", "");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.Particuler);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_UpdateLoanDisB", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.Particuler);
                                        cmd.Parameters.AddWithValue("@RemainingAmount", objlist.CreditAmt);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);


                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }

                                }
                                else
                                {
                                    using (SqlCommand cmd = new SqlCommand("SP_InsertLoadDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@LoanType", objlist.LoanType);
                                        cmd.Parameters.AddWithValue("@AccType", "105");
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LoanDisbursemant);
                                        cmd.Parameters.AddWithValue("@InterestType", objlist.IntrestType);
                                        cmd.Parameters.AddWithValue("@Guarantor1Id", objlist.FirstGuarantor);
                                        cmd.Parameters.AddWithValue("@Guarantor2Id", objlist.SecondGuarantor);
                                        cmd.Parameters.AddWithValue("@LoanEligibility", objlist.LoanEligibility);
                                        cmd.Parameters.AddWithValue("@LoanMaturityDate", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@RateOfInt", objlist.RateOfIntrest);
                                        cmd.Parameters.AddWithValue("@LoanRequired", objlist.LoanDisbursemant);
                                        cmd.Parameters.AddWithValue("@LoanSanction", objlist.LoanSanctioned);
                                        cmd.Parameters.AddWithValue("@LoanDis", objlist.LoanDisbursemant);
                                        cmd.Parameters.AddWithValue("@LoanPeriod", objlist.LoanPeriodMonth);
                                        cmd.Parameters.AddWithValue("@TotalInstallment", objlist.LoanPeriodMonth);
                                        cmd.Parameters.AddWithValue("@ModeOfPayment", objlist.PaymentMode);
                                        cmd.Parameters.AddWithValue("@DateOfFirst", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.InstallmentAmt);
                                        cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Status", "O");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);

                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.LoanDisplyID);
                                        cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplyMemberID);
                                        //cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.LoanDisplyID);
                                        cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("SP_InsertLedgerToLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@LdNAme", objlist.MemberName);
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@GpName", "Loan Account");
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);
                                        cmd.Parameters.AddWithValue("@InterestRate", objlist.RateOfIntrest);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();
                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertInstallmentDue", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@Installment_Id", MAx);
                                        cmd.Parameters.AddWithValue("@Date_Of_Dep", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Interest_Rate", objlist.RateOfIntrest);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstallmentAmt);
                                        cmd.Parameters.AddWithValue("@EndingBal", objlist.LoanDisbursemant);
                                        cmd.Parameters.AddWithValue("@Due_Amount", objlist.InstallmentAmt);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);

                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();
                                    }

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "W");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "To " + objlist.PayByText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                        cmd.Parameters.AddWithValue("@Narration", "");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "W");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                        cmd.Parameters.AddWithValue("@Narration", "");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }



                                }

                                using (SqlCommand cmd = new SqlCommand("sp_UpdateAllAccountLoan", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;

                                    cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@AccNo", objlist.LoanMultipleAccNo);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();
                                }
                                if (RowAffect > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("CloseLoanRequestByID", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;

                                        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanRequestID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();
                                    }

                                }

                            }

                            if (objlist.chkLoanExtention == "Yes")
                            {
                            }
                            else
                            {

                                if (Convert.ToDouble(objlist.GetLoanAmt) > 0)
                                {

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "J");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.AccNo + " On Loans ");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                        cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.ChargesLed);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "J");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "To " + objlist.AccNo + " On" + objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                        cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                        if (objlist.ChargeType == "subgroup")
                                        {
                                            cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                        }
                                        else
                                        {
                                            cmd.Parameters.AddWithValue("@LedgerId", objlist.ChargesLed);
                                        }
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }



                                }

                            }
                            if (objlist.TblLoanRowCount >= 1)
                            {

                            }

                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("W", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }
                        }
                        else

                        {

                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {


                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = MxVo

            });
            return objDept;
        }

        public static string MaxVNoW;
        public static string MaxVNoJ;
        public static string MaxVNoO;
       //   [Route("api/InsertLoanDisWithoutMultipaleLoanWithCharges")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanDisWithoutMultipaleLoanWithCharges(InsertLoanDis objlist)
        {
            int RowAffect = 0;
            if (objlist.ChargeType == null)
            {
                objlist.ChargeType = "";
            }

            if (objlist.OpenDate == null)
            {
                objlist.OpenDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AccNo == null)
            {
                objlist.AccNo = "";
            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.FirstGuarantiGiven == null)
            {
                objlist.FirstGuarantiGiven = "0";
            }
            if (objlist.FirstGuarantor == null)
            {
                objlist.FirstGuarantor = "";
            }
            if (objlist.FourthGuarantiGiven == null)
            {
                objlist.FourthGuarantiGiven = "0";
            }
            if (objlist.FourthGuarantor == null)
            {
                objlist.FourthGuarantor = "";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.InstallmentAmt == null || objlist.InstallmentAmt == "")
            {
                objlist.InstallmentAmt = "0";
            }
            if (objlist.LoanEligibility == null || objlist.LoanEligibility == "")
            {
                objlist.LoanEligibility = "0";
            }
            if (objlist.LoanPeriodMonth == null)
            {
                objlist.LoanPeriodMonth = "0";
            }
            if (objlist.LoanSanctioned == null || objlist.LoanSanctioned == "")
            {
                objlist.LoanSanctioned = "0";
            }
            if (objlist.RateOfIntrest == null || objlist.RateOfIntrest == "")
            {
                objlist.RateOfIntrest = "0";
            }
            if (objlist.SecondGuarantiGiven == null)
            {
                objlist.SecondGuarantiGiven = "0";
            }
            if (objlist.SecondGuarantor == null)
            {
                objlist.SecondGuarantor = "";
            }
            if (objlist.ThirdGuarantiGiven == null)
            {
                objlist.ThirdGuarantiGiven = "0";
            }
            if (objlist.ThirdGuarantor == null)
            {
                objlist.ThirdGuarantor = "0";
            }

            if (objlist.DesignationID == null || objlist.DesignationID == "")
            {
                objlist.DesignationID = "0";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.DisplyMemberID == null)
            {
                objlist.DisplyMemberID = "";
            }
            if (objlist.LoanDisplyID == null)
            {
                objlist.LoanDisplyID = "";
            }
            if (objlist.LoanRequestID == null)
            {
                objlist.LoanRequestID = "";
            }
            if (objlist.ChqueNo == null)
            {
                objlist.ChqueNo = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            MaxVNoW = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "W");
                            MaxVNoJ = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "R");
                            MAx = app.GetMaxInstallmentNo(objlist.Compid, objlist.BranchID);
                        }

                        //if (objlist.TblChargeRowCount > 0)
                        //{

                        if (objlist.TblRowNo == 0)
                        {
                            if (objlist.chkLoanExtention == "Yes")
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.PayByText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By Loan Extension" + objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("sp_UpdateLoanDisB", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@RemainingAmount", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);


                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }
                            else
                            {
                                using (SqlCommand cmd = new SqlCommand("SP_InsertLoadDis", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LoanType", objlist.LoanType);
                                    cmd.Parameters.AddWithValue("@AccType", "105");
                                    cmd.Parameters.AddWithValue("@Amount", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@InterestType", objlist.IntrestType);
                                    cmd.Parameters.AddWithValue("@Guarantor1Id", objlist.FirstGuarantor);
                                    cmd.Parameters.AddWithValue("@Guarantor2Id", objlist.SecondGuarantor);
                                    cmd.Parameters.AddWithValue("@LoanEligibility", objlist.LoanEligibility);
                                    cmd.Parameters.AddWithValue("@LoanMaturityDate", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@RateOfInt", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@LoanRequired", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@LoanSanction", objlist.LoanSanctioned);
                                    cmd.Parameters.AddWithValue("@LoanDis", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@LoanPeriod", objlist.LoanPeriodMonth);
                                    cmd.Parameters.AddWithValue("@TotalInstallment", objlist.LoanPeriodMonth);
                                    cmd.Parameters.AddWithValue("@ModeOfPayment", objlist.PaymentMode);
                                    cmd.Parameters.AddWithValue("@DateOfFirst", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Status", "O");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);

                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.LoanDisplyID);
                                    cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplyMemberID);
                                    cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("SP_InsertLedgerToLoanDis", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LdNAme", objlist.MemberName);
                                    cmd.Parameters.AddWithValue("@AccNo", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@GpName", "Loan Account");
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();
                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertInstallmentDue", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@Installment_Id", MAx);
                                    cmd.Parameters.AddWithValue("@Date_Of_Dep", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Interest_Rate", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@Amount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@EndingBal", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@Due_Amount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);

                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();
                                }

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.PayByText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }



                            }
                            if (RowAffect > 0)
                            {
                                using (SqlCommand cmd = new SqlCommand("CloseLoanRequestByID", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;

                                    cmd.Parameters.AddWithValue("@LoanId", objlist.LoanRequestID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();
                                }

                            }
                        }

                        if (objlist.chkLoanExtention == "Yes")
                        {
                        }
                        else
                        {
                            if (Convert.ToDouble(objlist.GetLoanAmt) > 0)
                            {



                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "J");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.AccNo + " On Loans ");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);

                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.ChargesLed);

                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "J");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.AccNo + " On" + objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                    if (objlist.ChargeType == "subgroup")
                                    {
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.ChargesLed);
                                    }
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }



                            }
                        }

                        if (objlist.TblLoanRowCount >= 1)
                        {

                        }

                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("W", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }
                        //}
                        //else

                        //{

                        //}
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = MxVo

            });
            return objDept;
        }
        public static string FedrationLoanChargeled;
       //   [Route("api/InsertBulkLoanDisbursemant")]
      //     [HttpPost]
        public List<FormSubmision> InsertBulkLoanDisbursemant(InsertLoanDis objlist)
        {
            int RowAffect = 0;

            if (objlist.OpenDate == null)
            {
                objlist.OpenDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AccNo == null)
            {
                objlist.AccNo = "";
            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.FirstGuarantiGiven == null)
            {
                objlist.FirstGuarantiGiven = "0";
            }
            if (objlist.FirstGuarantor == null)
            {
                objlist.FirstGuarantor = "";
            }
            if (objlist.FourthGuarantiGiven == null)
            {
                objlist.FourthGuarantiGiven = "0";
            }
            if (objlist.FourthGuarantor == null)
            {
                objlist.FourthGuarantor = "";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.InstallmentAmt == null || objlist.InstallmentAmt == "")
            {
                objlist.InstallmentAmt = "0";
            }
            if (objlist.LoanEligibility == null || objlist.LoanEligibility == "")
            {
                objlist.LoanEligibility = "0";
            }
            if (objlist.LoanPeriodMonth == null)
            {
                objlist.LoanPeriodMonth = "0";
            }
            if (objlist.LoanSanctioned == null || objlist.LoanSanctioned == "")
            {
                objlist.LoanSanctioned = "0";
            }
            if (objlist.RateOfIntrest == null || objlist.RateOfIntrest == "")
            {
                objlist.RateOfIntrest = "0";
            }
            if (objlist.SecondGuarantiGiven == null)
            {
                objlist.SecondGuarantiGiven = "0";
            }
            if (objlist.SecondGuarantor == null)
            {
                objlist.SecondGuarantor = "";
            }
            if (objlist.ThirdGuarantiGiven == null)
            {
                objlist.ThirdGuarantiGiven = "0";
            }
            if (objlist.ThirdGuarantor == null)
            {
                objlist.ThirdGuarantor = "0";
            }

            if (objlist.DesignationID == null || objlist.DesignationID == "")
            {
                objlist.DesignationID = "0";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.LoanDisplyID == null)
            {
                objlist.LoanDisplyID = "";
            }
            if (objlist.DisplyMemberID == null)
            {
                objlist.DisplyMemberID = "0";
            }
            if (objlist.ChqueNo == null)
            {
                objlist.ChqueNo = "";
            }
            if (objlist.Remark == null)
            {
                objlist.Remark = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                CN.Open();
                using (SqlCommand cmdd = new SqlCommand("GetLoanDisbursementDetailByLoanReqID", CN))
                {
                    cmdd.CommandType = CommandType.StoredProcedure;
                    cmdd.Parameters.AddWithValue("@CompID", objlist.Compid);
                    cmdd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    cmdd.Parameters.AddWithValue("@LoanId", objlist.LoanRequestID);

                    SqlDataReader dr = cmdd.ExecuteReader();
                    while (dr.Read())
                    {

                        objlist.MemberNo = dr["MemberId"].ToString();
                        objlist.LoanEligibility = dr["LoanEligibility"].ToString();
                        objlist.InstallmentAmt = dr["InstallmentAmount"].ToString();
                        objlist.LoanSanctioned = dr["LoanRequired"].ToString();
                        objlist.LoanDisbursemant = dr["LoanRequired"].ToString();
                        objlist.DebitAmt = dr["LoanRequired"].ToString();
                        objlist.CreditAmt = dr["LoanRequired"].ToString();
                        objlist.GetLoanAmt = objlist.LoanMultipaleAmt;
                        objlist.LoanPeriodMonth = dr["LoanPeriod"].ToString();
                        objlist.AgentID = dr["AgentId"].ToString();
                        objlist.FirstGuarantor = dr["FirstGuarantor"].ToString();
                        objlist.SecondGuarantor = dr["SecondGuarantor"].ToString();
                        objlist.ThirdGuarantor = dr["ThirdGurarantor"].ToString();
                        objlist.FourthGuarantor = dr["FourthGurantor"].ToString();
                        objlist.LoanType = dr["PlaneId"].ToString();
                        objlist.RateOfIntrest = dr["RateOfInterest"].ToString();
                        objlist.DisplyMemberID = dr["DisplyMemberID"].ToString();




                        using (SqlConnection con = new SqlConnection(Connection))
                        {
                            SqlTransaction objTrans = null;



                            try
                            {
                                con.Open();
                                objTrans = con.BeginTransaction();

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                if (objlist.TblRowNo == 0)
                                {


                                    appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                    AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                }
                                MaxVNoW = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "W");
                                MaxVNoJ = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "J");
                                MAx = app.GetMaxInstallmentNo(objlist.Compid, objlist.BranchID);



                                if (objlist.FourthGuarantiGiven == "Yes" && objlist.LoanDisID != "")
                                {
                                    objlist.LoanDisID = objlist.LoanDisID;
                                    objlist.LoanDisplyID = "";
                                }
                                else
                                {
                                    objlist.LoanDisID = "105" + app.GetMaxLoanNo(objlist.Compid, objlist.BranchID);
                                    objlist.LoanDisplyID = "LN" + app.GetMaxLoanNo(objlist.Compid, objlist.BranchID);

                                    using (SqlCommand cmd = new SqlCommand("SP_InsertLoadDisBulk", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@LoanType", objlist.LoanType);
                                        cmd.Parameters.AddWithValue("@AccType", "105");
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LoanDisbursemant);
                                        cmd.Parameters.AddWithValue("@InterestType", objlist.IntrestType);
                                        cmd.Parameters.AddWithValue("@Guarantor1Id", objlist.FirstGuarantor);
                                        cmd.Parameters.AddWithValue("@Guarantor2Id", objlist.SecondGuarantor);
                                        cmd.Parameters.AddWithValue("@LoanEligibility", objlist.LoanEligibility);
                                        cmd.Parameters.AddWithValue("@LoanMaturityDate", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@RateOfInt", objlist.RateOfIntrest);
                                        cmd.Parameters.AddWithValue("@LoanRequired", objlist.LoanDisbursemant);
                                        cmd.Parameters.AddWithValue("@LoanSanction", objlist.LoanSanctioned);
                                        cmd.Parameters.AddWithValue("@LoanDis", objlist.LoanDisbursemant);
                                        cmd.Parameters.AddWithValue("@LoanPeriod", objlist.LoanPeriodMonth);
                                        cmd.Parameters.AddWithValue("@TotalInstallment", objlist.LoanPeriodMonth);
                                        cmd.Parameters.AddWithValue("@ModeOfPayment", objlist.PaymentMode);
                                        cmd.Parameters.AddWithValue("@DateOfFirst", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.InstallmentAmt);
                                        cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Status", "O");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);

                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.LoanDisplyID);
                                        cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplyMemberID);
                                        //cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.LoanDisplyID);
                                        cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);

                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("SP_InsertLedgerToLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@LdNAme", objlist.MemberName);
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@GpName", "Loan Account");
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);
                                        cmd.Parameters.AddWithValue("@InterestRate", objlist.RateOfIntrest);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();
                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertInstallmentDue", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@Installment_Id", MAx);
                                        cmd.Parameters.AddWithValue("@Date_Of_Dep", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Interest_Rate", objlist.RateOfIntrest);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstallmentAmt);
                                        cmd.Parameters.AddWithValue("@EndingBal", objlist.LoanDisbursemant);
                                        cmd.Parameters.AddWithValue("@Due_Amount", objlist.InstallmentAmt);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);

                                        cmd.Transaction = objTrans;

                                        cmd.ExecuteNonQuery();
                                    }

                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.PayByText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                                if (RowAffect > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("CloseLoanRequestByID", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;

                                        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanRequestID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@App_TransNo_Voucher", appmax);

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();
                                    }

                                }


                                if (Convert.ToDouble(objlist.LoanMultipaleAmt) > 0 && objlist.ChargesLed != "")
                                {

                                    FedrationLoanChargeled = app.GetFedrationLoanChargeID(objlist.Compid, "1", objlist.BranchID);
                                    FedrationTransByID = app.GetFedrationTransbyID(objlist.Compid, "1", objlist.BranchID, objlist.PayBy);

                                    /////////////SHG RECIEPT///////////////////////// 

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.AccNo + " On Loans ");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                        cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.ChargesLed);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "To " + objlist.AccNo + " On" + objlist.LoanDisID);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                        cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                        if (objlist.ChargeType == "subgroup")
                                        {
                                            cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                        }
                                        else
                                        {
                                            cmd.Parameters.AddWithValue("@LedgerId", objlist.ChargesLed);
                                        }
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                    /////////////SHG RECIEPT END///////////////////////// 

                                    /////////////SHG WITHDRAWAL///////////////////////// 

                                    //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    //{
                                    //    cmd.CommandType = CommandType.StoredProcedure;
                                    //    cmd.Parameters.AddWithValue("@VType", "W");
                                    //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    //    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.AccNo + " On Loans ");
                                    //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                    //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                    //    cmd.Parameters.AddWithValue("@BankName", "");
                                    //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    //    cmd.Parameters.AddWithValue("@BranchName", "");
                                    //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    //    cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                    //    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                    //    cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                    //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.ChargesLed);
                                    //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    //    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    //    cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                    //    cmd.Transaction = objTrans;

                                    //    RowAffect = cmd.ExecuteNonQuery();

                                    //}
                                    //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    //{
                                    //    cmd.CommandType = CommandType.StoredProcedure;
                                    //    cmd.Parameters.AddWithValue("@VType", "W");
                                    //    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    //    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.AccNo + " On" + objlist.LoanDisID);
                                    //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                    //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                    //    cmd.Parameters.AddWithValue("@BankName", "");
                                    //    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    //    cmd.Parameters.AddWithValue("@BranchName", "");
                                    //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    //    cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                    //    if (objlist.ChargeType == "subgroup")
                                    //    {
                                    //        cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                    //    }
                                    //    else
                                    //    {
                                    //        cmd.Parameters.AddWithValue("@LedgerId", objlist.ChargesLed);
                                    //    }
                                    //    cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                    //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    //    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    //    cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                    //    cmd.Transaction = objTrans;

                                    //    RowAffect = cmd.ExecuteNonQuery();

                                    //}
                                    /////////////SHG WITHDRAWAL END///////////////////////// 

                                    /////////////FEDRATION RECIEPT///////////////////////// 


                                    //if (FedrationLoanChargeled != "" && FedrationTransByID != "")
                                    //{

                                    //    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    //    {
                                    //        cmd.CommandType = CommandType.StoredProcedure;
                                    //        cmd.Parameters.AddWithValue("@VType", "R");
                                    //        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    //        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.AccNo + " On Loans ");
                                    //        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //        cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                    //        cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                    //        cmd.Parameters.AddWithValue("@BankName", "");
                                    //        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    //        cmd.Parameters.AddWithValue("@BranchName", "");
                                    //        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    //        cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                    //        cmd.Parameters.AddWithValue("@LedgerId", FedrationTransByID);
                                    //        cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                    //        cmd.Parameters.AddWithValue("@LedgerAccNo", FedrationLoanChargeled);
                                    //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    //        cmd.Parameters.AddWithValue("@BranchID", "1");
                                    //        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    //        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    //        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    //        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    //        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    //        cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                    //        cmd.Transaction = objTrans;

                                    //        RowAffect = cmd.ExecuteNonQuery();

                                    //    }
                                    //    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    //    {
                                    //        cmd.CommandType = CommandType.StoredProcedure;
                                    //        cmd.Parameters.AddWithValue("@VType", "R");
                                    //        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    //        cmd.Parameters.AddWithValue("@Particular", "To " + objlist.AccNo + " On" + objlist.LoanDisID);
                                    //        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //        cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                    //        cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                    //        cmd.Parameters.AddWithValue("@BankName", "");
                                    //        cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    //        cmd.Parameters.AddWithValue("@BranchName", "");
                                    //        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    //        cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                    //        if (objlist.ChargeType == "subgroup")
                                    //        {
                                    //            cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                    //        }
                                    //        else
                                    //        {
                                    //            cmd.Parameters.AddWithValue("@LedgerId", FedrationLoanChargeled);
                                    //        }
                                    //        cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                    //        cmd.Parameters.AddWithValue("@LedgerAccNo", FedrationTransByID);
                                    //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    //        cmd.Parameters.AddWithValue("@BranchID", "1");
                                    //        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    //        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    //        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    //        cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    //        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.MemberNo);
                                    //        cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                    //        cmd.Transaction = objTrans;

                                    //        RowAffect = cmd.ExecuteNonQuery();

                                    //    }

                                    //}
                                    /////////////FEDRATION RECIEPT END///////////////////////// 
                                    /////////////insert total loan charge for fedration////////


                                    if (objlist.LoanMultipleAccNo == "" || objlist.LoanMultipleAccNo == null)
                                    {
                                        objlist.LoanMultipleAccNo = "0";
                                    }

                                    if (objlist.TblRowNo == 1)
                                    {

                                        if (Convert.ToDouble(objlist.LoanMultipleAccNo) > 0)
                                        {

                                            string FedMemberID = app.GetFedrationMemberID(objlist.Compid, "1", objlist.BranchID);

                                            using (SqlCommand cmd = new SqlCommand("InsertTotalDepositAccNoWiseFedrationBulk", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@VType", "R");
                                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                cmd.Parameters.AddWithValue("@MemberId", FedMemberID);
                                                cmd.Parameters.AddWithValue("@AccNo", FedrationLoanChargeled);
                                                cmd.Parameters.AddWithValue("@AccType", "Loan processing fess Ac");
                                                cmd.Parameters.AddWithValue("@Amount", objlist.LoanMultipleAccNo);
                                                cmd.Parameters.AddWithValue("@TransactionBy", objlist.PayBy);
                                                cmd.Parameters.AddWithValue("@ApproveDate", DBNull.Value);
                                                cmd.Parameters.AddWithValue("@Status", "O");
                                                cmd.Parameters.AddWithValue("@UserID", objlist.UserId);
                                                cmd.Parameters.AddWithValue("@Compid", objlist.Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", "1");
                                                cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Parameters.AddWithValue("@MeettingID", objlist.Remark);
                                                cmd.Transaction = objTrans;
                                                cmd.ExecuteNonQuery();

                                            }
                                        }
                                    }
                                    /////////////insert total loan charge for fedration end ////////


                                }

                                if (RowAffect > 0)
                                {
                                    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    int wer = appt.Insert_AppTransaction("W", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    objTrans.Commit();
                                }

                            }
                            catch (Exception ex)
                            {

                                objTrans.Rollback();

                            }
                            finally
                            {

                            }


                        }

                    }
                    dr.Close();
                    CN.Close();
                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {


                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = appmax

            });
            return objDept;
        }

       //   [Route("api/InsertLoanOeningBallance")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanOeningBallance(InsertLoanDis objlist)
        {
            int RowAffect = 0;

            if (objlist.OpenDate == null)
            {
                objlist.OpenDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AccNo == null)
            {
                objlist.AccNo = "";
            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.FirstGuarantiGiven == null)
            {
                objlist.FirstGuarantiGiven = "0";
            }
            if (objlist.FirstGuarantor == null)
            {
                objlist.FirstGuarantor = "";
            }
            if (objlist.FourthGuarantiGiven == null)
            {
                objlist.FourthGuarantiGiven = "0";
            }
            if (objlist.FourthGuarantor == null)
            {
                objlist.FourthGuarantor = "";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.InstallmentAmt == null || objlist.InstallmentAmt == "")
            {
                objlist.InstallmentAmt = "0";
            }
            if (objlist.LoanEligibility == null || objlist.LoanEligibility == "")
            {
                objlist.LoanEligibility = "0";
            }
            if (objlist.LoanPeriodMonth == null)
            {
                objlist.LoanPeriodMonth = "0";
            }
            if (objlist.LoanSanctioned == null || objlist.LoanSanctioned == "")
            {
                objlist.LoanSanctioned = "0";
            }
            if (objlist.RateOfIntrest == null || objlist.RateOfIntrest == "")
            {
                objlist.RateOfIntrest = "0";
            }
            if (objlist.SecondGuarantiGiven == null)
            {
                objlist.SecondGuarantiGiven = "0";
            }
            if (objlist.SecondGuarantor == null)
            {
                objlist.SecondGuarantor = "";
            }
            if (objlist.ThirdGuarantiGiven == null)
            {
                objlist.ThirdGuarantiGiven = "0";
            }
            if (objlist.ThirdGuarantor == null)
            {
                objlist.ThirdGuarantor = "0";
            }

            if (objlist.DesignationID == null || objlist.DesignationID == "")
            {
                objlist.DesignationID = "0";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.LoanDisplyID == null)
            {
                objlist.LoanDisplyID = "";
            }
            if (objlist.DisplyMemberID == null)
            {
                objlist.DisplyMemberID = "0";
            }
            if (objlist.ChqueNo == null)
            {
                objlist.ChqueNo = "";
            }
            if (objlist.FinancialYear == null)
            {
                objlist.FinancialYear = "";
            }
            if (objlist.ChqueNo == null)
            {
                objlist.ChqueNo = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            //MaxVNoW = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "W");
                            //MaxVNoJ = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "J");
                            MaxVNoO = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "O");
                            MAx = app.GetMaxInstallmentNo(objlist.Compid, objlist.BranchID);
                        }

                        //if (objlist.TblLoanRowCount >= 1)
                        //{

                        if (objlist.TblRowNo == 0)
                        {
                            if (objlist.chkLoanExtention == "Yes")
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "O");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.FinancialYear);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "Loan");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("@VType", "W");
                                //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //    cmd.Parameters.AddWithValue("@Particular", "By Loan Extension" + objlist.Particuler);
                                //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                //    cmd.Parameters.AddWithValue("@BankName", "");
                                //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                //    cmd.Parameters.AddWithValue("@BranchName", "");
                                //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                //    cmd.Parameters.AddWithValue("@Narration", "");
                                //    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                //    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.Particuler);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                //    cmd.Transaction = objTrans;

                                //    cmd.ExecuteNonQuery();

                                //}
                                using (SqlCommand cmd = new SqlCommand("sp_UpdateLoanDisB", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@RemainingAmount", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);


                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }
                            else
                            {
                                using (SqlCommand cmd = new SqlCommand("SP_InsertLoadDis", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LoanType", objlist.LoanType);
                                    cmd.Parameters.AddWithValue("@AccType", "105");
                                    cmd.Parameters.AddWithValue("@Amount", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@InterestType", objlist.IntrestType);
                                    cmd.Parameters.AddWithValue("@Guarantor1Id", objlist.FirstGuarantor);
                                    cmd.Parameters.AddWithValue("@Guarantor2Id", objlist.SecondGuarantor);
                                    cmd.Parameters.AddWithValue("@LoanEligibility", objlist.LoanEligibility);
                                    cmd.Parameters.AddWithValue("@LoanMaturityDate", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@RateOfInt", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@LoanRequired", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@LoanSanction", objlist.LoanSanctioned);
                                    cmd.Parameters.AddWithValue("@LoanDis", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@LoanPeriod", objlist.LoanPeriodMonth);
                                    cmd.Parameters.AddWithValue("@TotalInstallment", objlist.LoanPeriodMonth);
                                    cmd.Parameters.AddWithValue("@ModeOfPayment", objlist.PaymentMode);
                                    cmd.Parameters.AddWithValue("@DateOfFirst", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Status", "O");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);

                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.LoanDisplyID);
                                    cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplyMemberID);
                                    cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);


                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("SP_InsertLedgerToLoanDis", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LdNAme", objlist.MemberName);
                                    cmd.Parameters.AddWithValue("@AccNo", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@GpName", "Loan Account");
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();
                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertInstallmentDue", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@Installment_Id", MAx);
                                    cmd.Parameters.AddWithValue("@Date_Of_Dep", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Interest_Rate", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@Amount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@EndingBal", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@Due_Amount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);

                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();
                                }

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "O");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.FinancialYear);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "Loan");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("@VType", "W");
                                //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.LoanDisID);
                                //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                //    cmd.Parameters.AddWithValue("@BankName", "");
                                //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                //    cmd.Parameters.AddWithValue("@BranchName", "");
                                //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                //    cmd.Parameters.AddWithValue("@Narration", "");
                                //    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                //    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.LoanDisID);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                //    cmd.Transaction = objTrans;

                                //    RowAffect = cmd.ExecuteNonQuery();

                                //}



                            }

                            //if(objlist.ChqueNo == "Yes" && objlist.TblLoanRowCount > 0)
                            //{
                            //    using (SqlCommand cmd = new SqlCommand("sp_UpdateDCAccountLoan", con))
                            //    {
                            //        cmd.CommandType = CommandType.StoredProcedure;

                            //        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                            //        cmd.Parameters.AddWithValue("@AccNo", objlist.LoanMultipleAccNo);
                            //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            //        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            //        cmd.Transaction = objTrans;
                            //        cmd.ExecuteNonQuery();
                            //    }

                            //}

                            if (objlist.TblLoanRowCount > 0)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_UpdateAllAccountLoan", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;

                                    cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@AccNo", objlist.LoanMultipleAccNo);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();
                                }
                            }
                            //if (RowAffect > 0)
                            //{
                            //    using (SqlCommand cmd = new SqlCommand("CloseLoanRequestByID", con))
                            //    {
                            //        cmd.CommandType = CommandType.StoredProcedure;

                            //        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanRequestID);
                            //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            //        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            //        cmd.Transaction = objTrans;
                            //        cmd.ExecuteNonQuery();
                            //    }

                            //}

                        }

                        if (objlist.chkLoanExtention == "Yes")
                        {
                        }
                        else
                        {

                            if (Convert.ToDouble(objlist.GetLoanAmt) > 0)
                            {

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "O");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance of " + objlist.AccNo + " For " + objlist.FinancialYear);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                    if (objlist.ChargeType == "subgroup")
                                    {
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.ChargesLed);
                                    }

                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.ChargesLed);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                                //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("@VType", "J");
                                //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.AccNo + " On" + objlist.LoanDisID);
                                //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                //    cmd.Parameters.AddWithValue("@BankName", "");
                                //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                //    cmd.Parameters.AddWithValue("@BranchName", "");
                                //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                //    cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                //    if (objlist.ChargeType == "subgroup")
                                //    {
                                //        cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                //    }
                                //    else
                                //    {
                                //        cmd.Parameters.AddWithValue("@LedgerId", objlist.ChargesLed);
                                //    }
                                //    cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                //    cmd.Transaction = objTrans;

                                //    RowAffect = cmd.ExecuteNonQuery();

                                //}



                            }

                        }
                        if (objlist.TblLoanRowCount >= 1)
                        {

                        }

                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }
                        //}
                        //else

                        //{

                        //}
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = MxVo

            });
            return objDept;
        }


       //   [Route("api/InsertLoanDisWithoutMultipaleLoanOeningBall")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanDisWithoutMultipaleLoanOeningBall(InsertLoanDis objlist)
        {
            int RowAffect = 0;

            if (objlist.OpenDate == null)
            {
                objlist.OpenDate = DateTime.Now.ToString("dd-MM-yyyy");
            }
            if (objlist.AccNo == null)
            {
                objlist.AccNo = "";
            }
            if (objlist.AgentID == null)
            {
                objlist.AgentID = "0";
            }
            if (objlist.FirstGuarantiGiven == null)
            {
                objlist.FirstGuarantiGiven = "0";
            }
            if (objlist.FirstGuarantor == null)
            {
                objlist.FirstGuarantor = "";
            }
            if (objlist.FourthGuarantiGiven == null)
            {
                objlist.FourthGuarantiGiven = "0";
            }
            if (objlist.FourthGuarantor == null)
            {
                objlist.FourthGuarantor = "";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.InstallmentAmt == null || objlist.InstallmentAmt == "")
            {
                objlist.InstallmentAmt = "0";
            }
            if (objlist.LoanEligibility == null || objlist.LoanEligibility == "")
            {
                objlist.LoanEligibility = "0";
            }
            if (objlist.LoanPeriodMonth == null)
            {
                objlist.LoanPeriodMonth = "0";
            }
            if (objlist.LoanSanctioned == null || objlist.LoanSanctioned == "")
            {
                objlist.LoanSanctioned = "0";
            }
            if (objlist.RateOfIntrest == null || objlist.RateOfIntrest == "")
            {
                objlist.RateOfIntrest = "0";
            }
            if (objlist.SecondGuarantiGiven == null)
            {
                objlist.SecondGuarantiGiven = "0";
            }
            if (objlist.SecondGuarantor == null)
            {
                objlist.SecondGuarantor = "";
            }
            if (objlist.ThirdGuarantiGiven == null)
            {
                objlist.ThirdGuarantiGiven = "0";
            }
            if (objlist.ThirdGuarantor == null)
            {
                objlist.ThirdGuarantor = "0";
            }

            if (objlist.DesignationID == null || objlist.DesignationID == "")
            {
                objlist.DesignationID = "0";
            }
            if (objlist.GetLoanAmt == null || objlist.GetLoanAmt == "")
            {
                objlist.GetLoanAmt = "0";
            }
            if (objlist.LoanDisplyID == null)
            {
                objlist.LoanDisplyID = "";
            }
            if (objlist.DisplyMemberID == null)
            {
                objlist.DisplyMemberID = "0";
            }
            if (objlist.ChqueNo == null)
            {
                objlist.ChqueNo = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            //MaxVNoW = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "W");
                            //MaxVNoJ = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "J");
                            MaxVNoO = app.GetMaxVNo(objlist.Compid, objlist.BranchID, "O");
                            MAx = app.GetMaxInstallmentNo(objlist.Compid, objlist.BranchID);
                        }



                        if (objlist.TblRowNo == 0)
                        {
                            if (objlist.chkLoanExtention == "Yes")
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "O");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.FinancialYear);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("@VType", "W");
                                //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //    cmd.Parameters.AddWithValue("@Particular", "By Loan Extension" + objlist.Particuler);
                                //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                //    cmd.Parameters.AddWithValue("@BankName", "");
                                //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                //    cmd.Parameters.AddWithValue("@BranchName", "");
                                //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                //    cmd.Parameters.AddWithValue("@Narration", "");
                                //    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                //    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.Particuler);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                //    cmd.Transaction = objTrans;

                                //    cmd.ExecuteNonQuery();

                                //}
                                using (SqlCommand cmd = new SqlCommand("sp_UpdateLoanDisB", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@RemainingAmount", objlist.CreditAmt);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);


                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }
                            else
                            {
                                using (SqlCommand cmd = new SqlCommand("SP_InsertLoadDis", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LoanType", objlist.LoanType);
                                    cmd.Parameters.AddWithValue("@AccType", "105");
                                    cmd.Parameters.AddWithValue("@Amount", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@InterestType", objlist.IntrestType);
                                    cmd.Parameters.AddWithValue("@Guarantor1Id", objlist.FirstGuarantor);
                                    cmd.Parameters.AddWithValue("@Guarantor2Id", objlist.SecondGuarantor);
                                    cmd.Parameters.AddWithValue("@LoanEligibility", objlist.LoanEligibility);
                                    cmd.Parameters.AddWithValue("@LoanMaturityDate", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@RateOfInt", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@LoanRequired", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@LoanSanction", objlist.LoanSanctioned);
                                    cmd.Parameters.AddWithValue("@LoanDis", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@LoanPeriod", objlist.LoanPeriodMonth);
                                    cmd.Parameters.AddWithValue("@TotalInstallment", objlist.LoanPeriodMonth);
                                    cmd.Parameters.AddWithValue("@ModeOfPayment", objlist.PaymentMode);
                                    cmd.Parameters.AddWithValue("@DateOfFirst", DateTime.ParseExact(objlist.LoanMaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Status", "O");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);

                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AccNoDisplay", objlist.LoanDisplyID);
                                    cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplyMemberID);
                                    cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("SP_InsertLedgerToLoanDis", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LdNAme", objlist.MemberName);
                                    cmd.Parameters.AddWithValue("@AccNo", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@GpName", "Loan Account");
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberNo);
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();
                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertInstallmentDue", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@Installment_Id", MAx);
                                    cmd.Parameters.AddWithValue("@Date_Of_Dep", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Interest_Rate", objlist.RateOfIntrest);
                                    cmd.Parameters.AddWithValue("@Amount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@EndingBal", objlist.LoanDisbursemant);
                                    cmd.Parameters.AddWithValue("@Due_Amount", objlist.InstallmentAmt);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);

                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();
                                }

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "O");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.FinancialYear);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.DebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Transaction = objTrans;

                                    cmd.ExecuteNonQuery();

                                }
                                //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("@VType", "W");
                                //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.LoanDisID);
                                //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@Amount", objlist.CreditAmt);
                                //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.CreditAmt);
                                //    cmd.Parameters.AddWithValue("@BankName", "");
                                //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                //    cmd.Parameters.AddWithValue("@BranchName", "");
                                //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                //    cmd.Parameters.AddWithValue("@Narration", "");
                                //    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                //    cmd.Parameters.AddWithValue("@VNo", MaxVNoW);
                                //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.LoanDisID);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                //    cmd.Transaction = objTrans;

                                //    RowAffect = cmd.ExecuteNonQuery();

                                //}



                            }

                            if (objlist.TblLoanRowCount > 1)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_UpdateAllAccountLoan", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;

                                    cmd.Parameters.AddWithValue("@LoanId", objlist.LoanDisID);
                                    cmd.Parameters.AddWithValue("@AccNo", objlist.LoanMultipleAccNo);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();
                                }
                            }
                            //if (RowAffect > 0)
                            //{
                            //    using (SqlCommand cmd = new SqlCommand("CloseLoanRequestByID", con))
                            //    {
                            //        cmd.CommandType = CommandType.StoredProcedure;

                            //        cmd.Parameters.AddWithValue("@LoanId", objlist.LoanRequestID);
                            //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            //        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            //        cmd.Transaction = objTrans;
                            //        cmd.ExecuteNonQuery();
                            //    }

                            //}

                        }

                        if (objlist.chkLoanExtention == "Yes")
                        {
                        }
                        else
                        {

                            if (Convert.ToDouble(objlist.GetLoanAmt) > 0)
                            {

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "O");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance of " + objlist.AccNo + " For " + objlist.FinancialYear);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.PayBy);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.ChargesLed);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Transaction = objTrans;

                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                                //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("@VType", "J");
                                //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.AccNo + " On" + objlist.LoanDisID);
                                //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@Amount", objlist.GetLoanAmt);
                                //    cmd.Parameters.AddWithValue("@ClosingBal", objlist.GetLoanAmt);
                                //    cmd.Parameters.AddWithValue("@BankName", "");
                                //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                //    cmd.Parameters.AddWithValue("@BranchName", "");
                                //    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChqueNo);
                                //    cmd.Parameters.AddWithValue("@Narration", "" + objlist.AccNo + " On Loan");
                                //    if (objlist.ChargeType == "subgroup")
                                //    {
                                //        cmd.Parameters.AddWithValue("@LedgerId", objlist.AccNo);
                                //    }
                                //    else
                                //    {
                                //        cmd.Parameters.AddWithValue("@LedgerId", objlist.ChargesLed);
                                //    }
                                //    cmd.Parameters.AddWithValue("@VNo", MaxVNoJ);
                                //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.PayBy);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                //    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                //    cmd.Transaction = objTrans;

                                //    RowAffect = cmd.ExecuteNonQuery();

                                //}



                            }

                        }
                        if (objlist.TblLoanRowCount >= 1)
                        {

                        }

                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                //SendVNo = Vno

                SendVNo = MxVo

            });
            return objDept;
        }

       //   [Route("api/GetMemberDetailForSearch")]
       //  [HttpGet]
        public returndbml<GetMemberDetail> GetMemberDetailForSearch(string CompID, string BranchId)
        {
            List<GetMemberDetail> objListState = new List<GetMemberDetail>();
            returndbml<GetMemberDetail> objreturndbmlState = new returndbml<GetMemberDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberDetailForSearch", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetMemberDetail objState = new GetMemberDetail();
                        objState.MemberID = dr["MEMBER_ACCNO"].ToString();
                        objState.DisplayMemberID = dr["MemberIdDisplay"].ToString();
                        objState.FirstName = dr["FirstName"].ToString();
                        objState.LastName = dr["LastName"].ToString();
                        objState.EmpID = dr["BatchNo"].ToString();
                        objState.MobileNo = dr["LMobileNo"].ToString();
                        objState.FatherName = dr["FatherName"].ToString();
                        objState.FullName = dr["BatchNo"] + " " + dr["FirstName"] + " " + dr["LastName"];

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

        #endregion

       //   [Route("api/FillMemberAccType")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillMemberAccType(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("selectMemberAccountCombo", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.DesignationId = Convert.ToInt32(dr["Sno"].ToString());
                        objState.DesignationName = dr["SubGroupName"].ToString();

                        //ConvertTableToList<SelectDesgnationResult>(dr, ref objState);
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillUnderEmployeeByLoginEmpID")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillUnderEmployeeByLoginEmpID(string CompID, string BranchId, string EmpID)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetUnderEmployeeByEmpID", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.DesignationId = Convert.ToInt32(dr["Sno"].ToString());
                        objState.DesignationName = dr["Name"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillUnderBranchByUnderEmpID")]
       //  [HttpGet]
        public returndbml<FechDetail> FillUnderBranchByUnderEmpID(string CompID, string BranchId, string EmpID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetUnderBranchByEmpID", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.SubBranchName = dr["SubBranchName"].ToString();
                        objState.UnderBrachName = dr["UnderBrachName"].ToString();
                        objState.OfficeType = dr["OfficeType"].ToString();
                        objState.MeetingDate = dr["MeetingDate"].ToString();
                        objState.MeetingTime = dr["MeetingTime"].ToString();
                        objState.TotalMember = dr["TotalMember"].ToString();
                        objState.CurrentDate = dr["CurrentDate"].ToString();
                        objState.UnderBranch = dr["UnderEmployee"].ToString();
                        objState.BranchID = dr["Sno"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/FillExcelImportMatchData")]
       //  [HttpGet]
        public returndbml<FechDetail> FillExcelImportMatchData(string CompID, string BranchId, string ReportNo)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetExcelImportMatchRecord", CompID, BranchId, ReportNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.EmpID = dr["EmpID"].ToString();
                        objState.MemberName = dr["MemberName"].ToString();
                        objState.LoanAccNo = dr["LoanAccNo"].ToString();
                        objState.LoanDepoAmt = dr["LoanDepoAmt"].ToString();
                        objState.LoanIntrestAccNo = dr["LoanIntrestAccNo"].ToString();
                        objState.LoanIntrestDepoAmt = dr["LoanIntrestDepoAmt"].ToString();
                        objState.CPAccNo = dr["CPAccNo"].ToString();
                        objState.CPAmt = dr["CPDepoAmt"].ToString();
                        objState.InstallmentAmt = dr["LoanInstAmt"].ToString();
                        objState.TotalAmount = dr["totalMatch"].ToString();
                        objState.TotalMatch = dr["totalMatchMember"].ToString();
                        objState.TotalUnMatch = dr["totalUnMatchMember"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/FillUnMatchExcelImportMatchData")]
       //  [HttpGet]
        public returndbml<FechDetail> FillUnMatchExcelImportMatchData(string CompID, string BranchId, string ReportNo)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetExcelImportUnMatchRecord", CompID, BranchId, ReportNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.EmpID = dr["EmpID"].ToString();
                        objState.MemberName = dr["MemberName"].ToString();
                        objState.LoanAccNo = dr["LoanAccNo"].ToString();
                        objState.LoanDepoAmt = dr["LoanDepoAmt"].ToString();
                        objState.LoanIntrestAccNo = dr["LoanIntrestAccNo"].ToString();
                        objState.LoanIntrestDepoAmt = dr["LoanIntrestDepoAmt"].ToString();
                        objState.CPAccNo = dr["CPAccNo"].ToString();
                        objState.CPAmt = dr["CPDepoAmt"].ToString();
                        objState.InstallmentAmt = dr["LoanInstAmt"].ToString();
                        objState.TotalAmount = dr["totalMatch"].ToString();
                        objState.TotalMatch = dr["totalMatchMember"].ToString();
                        objState.TotalUnMatch = dr["totalUnMatchMember"].ToString();
                        objState.TotalUnMatchAmt = dr["totalUnMatch"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/FillLoginEmployee")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillLoginEmployee(string CompID, string BranchId, string EmpID)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetEmployeeByEmpID", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.DesignationId = Convert.ToInt32(dr["Sno"].ToString());
                        objState.DesignationName = dr["Name"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetMemberDetailForByBranchID")]
       //  [HttpGet]
        public returndbml<GetMemberDetail> GetMemberDetailForByBranchID(string CompID, string BranchId)
        {

            List<GetMemberDetail> objListState = new List<GetMemberDetail>();
            returndbml<GetMemberDetail> objreturndbmlState = new returndbml<GetMemberDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberDetailForSearch", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetMemberDetail objState = new GetMemberDetail();
                        objState.MemberID = dr["MEMBER_ACCNO"].ToString();
                        objState.DisplayMemberID = dr["MemberIdDisplay"].ToString();
                        objState.FirstName = dr["FirstName"].ToString();
                        objState.LastName = dr["LastName"].ToString();
                        objState.EmpID = dr["BatchNo"].ToString();
                        objState.MobileNo = dr["LMobileNo"].ToString();
                        objState.FatherName = dr["FatherName"].ToString();
                        objState.FullName = dr["BatchNo"] + " " + dr["FirstName"] + " " + dr["LastName"];

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    GetMemberDetail objState = new GetMemberDetail();
                    objState.MemberID = "";
                    objState.DisplayMemberID = "";
                    objState.FirstName = "";
                    objState.LastName = "";
                    objState.EmpID = "";
                    objState.MobileNo = "";
                    objState.FatherName = "";
                    objState.FullName = "";

                    objListState.Add(objState);
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetEmployeeStatistics")]
       //  [HttpGet]
        public returndbml<FechDetail> GetEmployeeStatistics(string CompID, string BranchId, string EmpID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetEmployeeStatistics", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.totallUnderBranch = dr["totallUnderBranch"].ToString();
                        objState.UnderEmployee = dr["UnderEmployee"].ToString();
                        objState.TotalUnderMember = dr["TotalUnderMember"].ToString();
                        objState.Amt = dr["Amt"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetFedrationStatistics")]
       //  [HttpGet]
        public returndbml<FechDetail> GetFedrationStatistics(string CompID, string BranchId, string EmpID, string RegionalID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                if (RegionalID == null)
                {

                    RegionalID = "0";
                }

                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFedrationStatistics", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.totallUnderBranch = dr["totallUnderBranch"].ToString();
                        objState.UnderEmployee = dr["totallUnderRequestPending"].ToString();
                        objState.TotalUnderMember = dr["TotalUnderMember"].ToString();
                        objState.Amt = dr["totallUnderRequestPendingAmt"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetBulkRecieptStatistics")]
       //  [HttpGet]
        public returndbml<FechDetail> GetBulkRecieptStatistics(string CompID, string BranchId, string EmpID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetBulkRecieptStatistics", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.totallUnderBranch = dr["totallUnderBranch"].ToString();
                        objState.UnderEmployee = dr["totallUnderRequestPending"].ToString();
                        objState.TotalUnderMember = dr["TotalUnderMember"].ToString();
                        objState.Amt = dr["totallUnderRequestPendingAmt"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetFedrationLoanStatistics")]
       //  [HttpGet]
        public returndbml<FechDetail> GetFedrationLoanStatistics(string CompID, string BranchId, string EmpID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFedrationLoanStatistics", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.totallUnderBranch = dr["totallUnderBranch"].ToString();
                        objState.UnderEmployee = dr["totallUnderRequestPending"].ToString();
                        objState.TotalUnderMember = dr["TotalUnderMember"].ToString();
                        objState.Amt = dr["totallUnderRequestPendingAmt"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetLoanpprovedStatistics")]
       //  [HttpGet]
        public returndbml<FechDetail> GetLoanpprovedStatistics(string CompID, string BranchId, string EmpID)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLoanpprovedStatistics", CompID, BranchId, EmpID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.totallUnderBranch = dr["totallUnderBranch"].ToString();
                        objState.UnderEmployee = dr["totallUnderRequestPending"].ToString();
                        objState.TotalUnderMember = dr["TotalUnderMember"].ToString();
                        objState.Amt = dr["totallUnderRequestPendingAmt"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillUnderBranchByUnderEmpIDMeetingDays")]
       //  [HttpGet]
        public returndbml<FechDetail> FillUnderBranchByUnderEmpIDMeetingDays(string CompID, string BranchId, string EmpID, string Days)
        {
            List<FechDetail> objListState = new List<FechDetail>();
            returndbml<FechDetail> objreturndbmlState = new returndbml<FechDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetUnderBranchByEmpIDMeetingDays", CompID, BranchId, EmpID, Days);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechDetail objState = new FechDetail();
                        objState.SubBranchName = dr["SubBranchName"].ToString();
                        objState.UnderBrachName = dr["UnderBrachName"].ToString();
                        objState.OfficeType = dr["OfficeType"].ToString();
                        objState.MeetingDate = dr["MeetingDate"].ToString();
                        objState.MeetingTime = dr["MeetingTime"].ToString();
                        objState.TotalMember = dr["TotalMember"].ToString();
                        objState.CurrentDate = dr["CurrentDate"].ToString();
                        objState.UnderBranch = dr["UnderEmployee"].ToString();
                        objState.BranchID = dr["Sno"].ToString();
                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillAllLedgerCombo")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillAllLedgerCombo(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetLedgerBankCash_ViewLedger", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.LoanLimit = dr["AccNo"].ToString();
                        objState.DesignationName = dr["LdName"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillAllLedgerComboWithouBankCash")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillAllLedgerComboWithouBankCash(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetAllLedgerWithoutBankCash", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.LoanLimit = dr["AccNo"].ToString();
                        objState.DesignationName = dr["LdName"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillAllLedgerWithdrawl")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillAllLedgerWithdrawl(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillAllLedgerWithdrawl", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.LoanLimit = dr["AccNo"].ToString();
                        objState.DesignationName = dr["LdName"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillLoanAccComboforTopup")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillLoanAccComboforTopup(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillLoanAccComboforTopup", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.LoanLimit = dr["AccNo"].ToString();
                        objState.DesignationName = dr["LdName"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GettAllSearchMember")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> GettAllSearchMember(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAllMemberID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.LoanLimit = dr["MEMBER_ACCNO"].ToString();
                        objState.DesignationName = dr["MEMBER_ACCNO"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillLoanNo")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillLoanNo(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("FillLoanNo", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.LoanLimit = dr["AccNo"].ToString();
                        objState.DesignationName = dr["AccNo"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GettAllLoanReuest")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> GettAllLoanReuest(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAllLoanRequestID", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.LoanLimit = dr["MEMBER_ACCNO"].ToString();
                        objState.DesignationName = dr["MEMBER_ACCNO"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/FillAllLedgerMember")]
       //  [HttpGet]
        public returndbml<SelectDesgnationResult> FillAllLedgerMember(string CompID, string BranchId)
        {
            List<SelectDesgnationResult> objListState = new List<SelectDesgnationResult>();
            returndbml<SelectDesgnationResult> objreturndbmlState = new returndbml<SelectDesgnationResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetAllLedgerMember", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        SelectDesgnationResult objState = new SelectDesgnationResult();
                        objState.LoanLimit = dr["MEMBER_ACCNO"].ToString();
                        objState.DesignationName = dr["MEMBER_ACCNO"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        //[Route("api/ViewLedgerGroup")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> ViewLedgerGroup(string LedgerId, string FromDate, string Todate, string FyId, string Date, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {

                if (FromDate == null || FromDate == "" || Todate == null || Todate == "")
                {

                }
                else
                {
                    FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                    ToDate = DateTime.ParseExact(Todate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                    Dt = DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture);

                }

                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectVoucherForViewLedger", FDate, ToDate, FyId, Dt, CompID, BranchId, "0", "0", "", "", "0", "", "", "", LedgerId, "0", "0", "");

                //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vdate = dr["Vdate"].ToString();
                        objState.Vtype = dr["Vtype"].ToString();
                        objState.VNo = dr["VNo"].ToString();
                        objState.Particular = dr["Particular"].ToString();
                        objState.Narration = dr["Narration"].ToString();
                        objState.Amount = dr["Amount"].ToString();
                        objState.CloseNature = dr["CloseNature"].ToString();
                        objState.Nature = dr["Nature"].ToString();
                        objState.CheckNumber = dr["CheckNumber"].ToString();
                        objState.ClosingBal = Convert.ToDouble(dr["ClosingBal"].ToString());
                        objState.LedgerId = dr["LedgerId"].ToString();
                        objState.Status = dr["AppTransNo"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        //[Route("api/ViewLedgerGroupNonMemberRpt")]
        //[HttpGet]
        public returndbml<FechLedgerDetail> ViewLedgerGroupNonMemberRpt(string LedgerId, string FromDate, string Todate, string FyId, string Date, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {

                if (FromDate == null || FromDate == "" || Todate == null || Todate == "")
                {

                }
                else
                {
                    FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                    ToDate = DateTime.ParseExact(Todate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                    Dt = DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture);

                }


                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectVoucherForViewLedger", FDate, ToDate, FyId, Dt, CompID, BranchId, "0", "0", "", "", "0", "", "", "", LedgerId, "0", "0", "");

                //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vdate = dr["Vdate"].ToString();
                        objState.LdName = dr["Vdate"].ToString();
                        objState.Vtype = dr["Vtype"].ToString();
                        objState.VNo = dr["VNo"].ToString();
                        objState.Particular = dr["Particular"].ToString();
                        objState.Narration = dr["Narration"].ToString();
                        objState.Amount = dr["Amount"].ToString();
                        objState.CloseNature = dr["CloseNature"].ToString();
                        objState.Nature = dr["Nature"].ToString();
                        objState.CheckNumber = dr["CheckNumber"].ToString();

                        if (dr["ClosingBal"].ToString() == null || dr["ClosingBal"].ToString() == "")
                        {
                            objState.ClosingBal = 0;
                        }
                        else
                        {
                            objState.ClosingBal = Convert.ToDouble(dr["ClosingBal"].ToString());
                        }
                        objState.LedgerId = dr["LedgerId"].ToString();
                        objState.Status = dr["AppTransNo"].ToString();


                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetLoanDetailForCloseByLoanNo")]
       //  [HttpGet]
        public returndbml<GetLoan> GetLoanDetailForCloseByLoanNo(string LoanNo, string CompID, string BranchId, string FyId)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {



                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetDetails", LoanNo, CompID, BranchId, FyId);

                //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();

                        objState.OpenDate = dr["OpeningDate"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanId = LoanNo;
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.LoanEligibility = dr["DueIns"].ToString();
                        objState.LoanRequired = dr["LoanDis"].ToString();
                        objState.LoanType = dr["Status"].ToString();
                        objState.LedgerType = dr["PlanType"].ToString();


                        if (dr["cl"].ToString() == null || dr["cl"].ToString() == "")
                        {
                            objState.InstallmentAmount = "0";
                        }
                        else
                        {
                            objState.InstallmentAmount = dr["cl"].ToString();
                        }
                        objState.RateOfInterest = dr["RateofInterest"].ToString();
                        objState.ChargesAmt = dr["InterestAmt"].ToString();
                        objState.CargePer = dr["PenaltyAmt"].ToString();
                        objState.ChargesLed = dr["PenaltyLedger"].ToString();
                        objState.DOB = dr["LastInstDate"].ToString();
                        objState.SubGroupCode = dr["InterestLedger"].ToString();
                        objState.AgentId = dr["UpdateIns"].ToString();
                        objState.ChargesName = dr["PlanCategory"].ToString();

                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetLoanDetailForCloseByMemberNo")]
       //  [HttpGet]
        public returndbml<GetLoan> GetLoanDetailForCloseByMemberNo(string MemberNo, string CompID, string BranchId, string FyId)
        {
            List<GetLoan> objListState = new List<GetLoan>();
            returndbml<GetLoan> objreturndbmlState = new returndbml<GetLoan>();
            try
            {



                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetDetailsByMemberID", MemberNo, CompID, BranchId, FyId);

                //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        GetLoan objState = new GetLoan();

                        objState.OpenDate = dr["OpeningDate"].ToString();
                        objState.MemberId = dr["MemberId"].ToString();
                        objState.LoanId = dr["AccNo"].ToString(); ;
                        objState.LoanPeriod = dr["LoanPeriod"].ToString();
                        objState.LoanEligibility = dr["DueIns"].ToString();
                        objState.LoanRequired = dr["LoanDis"].ToString();
                        objState.LoanType = dr["Status"].ToString();
                        objState.LedgerType = dr["PlanType"].ToString();


                        if (dr["cl"].ToString() == null || dr["cl"].ToString() == "")
                        {
                            objState.InstallmentAmount = "0";
                        }
                        else
                        {
                            objState.InstallmentAmount = dr["cl"].ToString();
                        }



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
        public static DateTime FDate;
        public static DateTime ToDate;
        public static DateTime Dt;
       //   [Route("api/GetCashBook")]
       //  [HttpGet]

        public returndbml<FechLedgerDetail> GetCashBook(string LedgerId, string FromDate, string Todate, string FyId, string Date, string CompID, string BranchId)
        {

            if (FromDate == null || FromDate == "" || Todate == null || Todate == "")
            {

            }
            else
            {
                FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                ToDate = DateTime.ParseExact(Todate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                Dt = DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
            }

            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetCashBookDet", FDate, ToDate, LedgerId, FyId, CompID, BranchId);

                //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vdate = dr["Vdate"].ToString();
                        objState.Vtype = dr["Vtype"].ToString();
                        objState.VNo = dr["VNo"].ToString();
                        objState.Particular = dr["Particular"].ToString();
                        //objState.Narration = dr["Narration"].ToString();
                        objState.Amount = dr["ClosingBal"].ToString();
                        objState.CloseNature = dr["CloseNature"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.AccNo = dr["AccNo"].ToString();
                        objState.Amount = dr["Credit"].ToString();
                        objState.Savingamt = dr["Debit"].ToString();
                        objState.ShareQty = dr["OpeningBal"].ToString();
                        objState.Narration = dr["OpNature"].ToString();
                        //objState.Nature = dr["Nature"].ToString();
                        //objState.CheckNumber = dr["CheckNumber"].ToString();

                        if (dr["ClosingBal"].ToString() == null || dr["ClosingBal"].ToString() == "")
                        {
                            objState.ClosingBal = 0;
                        }
                        else
                        {
                            objState.ClosingBal = Convert.ToDouble(dr["ClosingBal"].ToString());
                        }
                        objState.LedgerId = dr["LedgerId"].ToString();



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetDayBook")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetDayBook(string LedgerId, string FromDate, string Todate, string FyId, string Date, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {

                FDate = DateTime.ParseExact(FromDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                ToDate = DateTime.ParseExact(Todate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);
                Dt = DateTime.ParseExact(Date, @"dd-MM-yyyy", CultureInfo.InvariantCulture);

                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetDayBook", FDate, ToDate, FyId, CompID, BranchId);

                //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.OpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vdate = dr["Vdate"].ToString();
                        objState.Vtype = dr["Vtype"].ToString();
                        objState.VNo = dr["VNo"].ToString();
                        objState.Particular = dr["Narrations"].ToString();
                        //objState.Narration = dr["Narration"].ToString();
                        //objState.Amount = dr["ClosingBal"].ToString();
                        //objState.CloseNature = dr["CloseNature"].ToString();
                        objState.LdName = dr["LdName"].ToString();
                        objState.AccNo = dr["Particular"].ToString();
                        objState.Amount = dr["Credit"].ToString();
                        objState.Savingamt = dr["Debit"].ToString();
                        objState.Status = dr["Userid"].ToString();
                        //objState.ShareQty = dr["OpeningBal"].ToString();
                        //objState.Narration = dr["OpNature"].ToString();
                        //objState.Nature = dr["Nature"].ToString();
                        //objState.CheckNumber = dr["CheckNumber"].ToString();

                        //if (dr["ClosingBal"].ToString() == null || dr["ClosingBal"].ToString() == "")
                        //{
                        //    objState.ClosingBal = 0;
                        //}
                        //else
                        //{
                        //    objState.ClosingBal = Convert.ToDouble(dr["ClosingBal"].ToString());
                        //}
                        //objState.LedgerId = dr["LedgerId"].ToString();



                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetMaxVNoandRNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxVNoandRNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMaxVNoandRNo", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["VTypeNo"].ToString();
                        objState.VNo = dr["VM"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetMaxMeetingNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxMeetingNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMaxMeetingSrNo", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["MeetingNo"].ToString();





                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/DeleteVoucherByAppTransNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> DeleteVoucherByAppTransNo(string CompID, string BranchId, string FyId, string AppTransNo)
        {
            int RowAffect = 0;
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();
                        using (SqlCommand cmd = new SqlCommand("DeleteVoucherByAppTransNo", con))
                        {

                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@CompId", CompID);
                            cmd.Parameters.AddWithValue("@BranchId", BranchId);
                            cmd.Parameters.AddWithValue("@FyId", FyId);
                            cmd.Parameters.AddWithValue("@AppTransNo", AppTransNo);
                            cmd.Transaction = objTrans;
                            RowAffect = cmd.ExecuteNonQuery();

                            if (RowAffect > 0)
                            {
                                objTrans.Commit();
                                objreturndbmlState.StatusId = 1;

                            }
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();
                        objreturndbmlState.StatusId = 0;
                    }



                }

            }




            return objreturndbmlState;


        }
       //   [Route("api/GetMaxVNoandWNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxVNoandWNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMaxVNoandWNo", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["VTypeNo"].ToString();
                        objState.VNo = dr["VM"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetMaxImpDeductionNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxImpDeductionNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMaxImpDeductionNo", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["ReportNo"].ToString();
                        objState.VNo = "";




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetMaxVNoandFDNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxVNoandFDNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectMaxFD", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["Mid"].ToString();
                        objState.VNo = dr["Mid"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetMaxVNoandRDNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxVNoandRDNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectMaxRD", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["Mid"].ToString();
                        objState.VNo = dr["Mid"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }

       //   [Route("api/GetMaxVNoandDCNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxVNoandDCNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SelectMaxDCNo", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["Mid"].ToString();
                        objState.VNo = dr["Mid"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetFDPlanPeriod")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetFDPlanPeriod(string PlaneId, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectMaturityFD", PlaneId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["MaturityPeriodFrom"].ToString();
                        objState.VNo = dr["MaturityPeriodTo"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetDCPlanPeriod")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetDCPlanPeriod(string PlaneId, string CompID, string BranchId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("SP_SelectMaturityDC", PlaneId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["MaturityPeriodFrom"].ToString();
                        objState.VNo = dr["MaturityPeriodTo"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }
       //   [Route("api/GetMaxVNoandCNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxVNoandCNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMaxVNoandCNo", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["VTypeNo"].ToString();
                        objState.VNo = dr["VM"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetMaxVNoandJNo")]
       //  [HttpGet]
        public returndbml<FechLedgerDetail> GetMaxVNoandJNo(string CompID, string BranchId, string FyId)
        {
            List<FechLedgerDetail> objListState = new List<FechLedgerDetail>();
            returndbml<FechLedgerDetail> objreturndbmlState = new returndbml<FechLedgerDetail>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMaxVNoandJNo", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {
                        FechLedgerDetail objState = new FechLedgerDetail();

                        objState.Vtype = dr["VTypeNo"].ToString();
                        objState.VNo = dr["VM"].ToString();




                        objListState.Add(objState);
                    }
                    objreturndbmlState.StatusId = 1;
                    objreturndbmlState.returndbmllist = objListState;
                }
                else
                {
                    objreturndbmlState.StatusId = 2;
                    objreturndbmlState = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlState.StatusId = 99;
                objreturndbmlState.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlState;
        }


       //   [Route("api/GetLedgerMinDate")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetLedgerMinDate(string CompID, string BranchId, string LedgerID, string MemberID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLedgerVoucherMinDate", CompID, BranchId, LedgerID, MemberID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["MinDate"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/CheckProfitLosssSub")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> CheckProfitLosssSub(string CompID, string BranchId, string FyId, string LedgerID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetFyClose", CompID, BranchId, FyId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Date"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/CheckFinancialYear")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> CheckFinancialYear(string CompID, string BranchId, string FyId, string LedgerID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckFinancialYear", CompID, BranchId, FyId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["FyYearFrom"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/GetProfitLosssLed")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetProfitLosssLed(string CompID, string BranchId, string FyId, string LedgerID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetProfitLosssLed", CompID, BranchId, FyId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["accno"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/GetPNDLLed")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetPNDLLed(string CompID, string BranchId, string FyId, string LedgerID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetPNDLLed", CompID, BranchId, FyId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["accno"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetVNoForDelete")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetVNoForDelete(string CompID, string BranchId, string FyId)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetVNoForDelete", CompID, BranchId, FyId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["vno"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetLedgerNatueByAccNo")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetLedgerNatueByAccNo(string CompID, string BranchId, string LedgerID, string MemberID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            if (LedgerID == null)
            {
                LedgerID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLedgerNatureByAccNo", CompID, BranchId, LedgerID, MemberID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Nature"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {

                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetMemberDOB")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetMemberDOB(string CompID, string BranchId, string MemberID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberDOB", CompID, BranchId, MemberID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["MinDate"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/GetSubGroupIDByPlanID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetSubGroupIDByPlanID(string CompID, string BranchId, string PlanID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetSubGroupIDByPlanID", CompID, BranchId, PlanID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["SubGroupID"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/CheckDublicateMembershipCharges")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> CheckDublicateMembershipCharges(string CompID, string BranchId, string ChargeName)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckDublicateMembershipCharges", CompID, BranchId, ChargeName);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["ChargeName"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetBranchSubgroupLedID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetBranchSubgroupLedID(string CompID, string BranchId, string LedgerId, string ChargesType)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetSubGroupLedgerIDByLdName", CompID, BranchId, LedgerId, ChargesType);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["AccNo"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetLedgeraGander")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetLedgeraGander(string CompID, string BranchId, string MemberID)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberGander", CompID, BranchId, MemberID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Gender"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/GetGPNameByLed")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetGPNameByLed(string CompID, string BranchId, string AccNo)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetGPNameByAccNo", CompID, BranchId, AccNo);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["GpName"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetSeniorCitizenAge")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetSeniorCitizenAge(string CompID, string BranchId)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetSeniorCitizenAge", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["AddAge"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/GetFemalePlanInterest")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetFemalePlanInterest(string CompID, string BranchId)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetFemalePlanInterest", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["interest"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }



       //   [Route("api/GetSeniorCitizenInterest")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetSeniorCitizenInterest(string CompID, string BranchId)
        {
            if (MemberID == null)
            {
                MemberID = "";
            }
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetSeniorCitizenInterest", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["interest"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetLedgerIntrestLedByBranchIDLdName")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetLedgerIntrestLedByBranchIDLdName(string CompID, string BranchId, string LdName)
        {

            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetAccNoByLdName", CompID, BranchId, LdName);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["AccNo"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetMemberIDByAccNo")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetMemberIDByAccNo(string CompID, string BranchId, string LedgerID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetMemberIDByAccNo", CompID, BranchId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["MemberId"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetLdNameByAccNo")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetLdNameByAccNo(string CompID, string BranchId, string LedgerID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetLdNameByAccNo", CompID, BranchId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        //objLed.PlaneName = dr["LdName"].ToString();
                        objLed.PlaneId = Convert.ToInt32(dr["LdName"].ToString());
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetPlaneNameLoanNo")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetPlaneNameLoanNo(string CompID, string BranchId, string LedgerID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetPlaneNameLoanNo", CompID, BranchId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneId = Convert.ToInt32(dr["Planeid"].ToString());
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetCashLed")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetCashLed(string CompID, string BranchId, string LedgerID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetCashLed", CompID, BranchId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["AccNo"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }
       //   [Route("api/GetStatusByAccNo")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetStatusByAccNo(string CompID, string BranchId, string LedgerID)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetStatusByAccNO", CompID, BranchId, LedgerID);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Status"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }


       //   [Route("api/CheckMeetingSubmitedStatus")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> CheckMeetingSubmitedStatus(string CompID, string BranchId, string MemberID, string MeetingDate)
        {

            //FDate = DateTime.ParseExact(MeetingDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);


            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckMeetingSubmitedStatus", CompID, BranchId, MemberID, MeetingDate);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Status"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/CheckMeetingLastStatus")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> CheckMeetingLastStatus(string CompID, string BranchId)
        {


            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckLastMeetingStatus", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["MeetingStatus"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetLastMeetingID")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetLastMeetingID(string CompID, string BranchId)
        {


            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("CheckLastMeetingStatus", CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["MeetingNo"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetSHGLoanAccNo")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetSHGLoanAccNo(string CompID, string BranchId, string SHGBranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("GetSHGLoanAccNo", CompID, BranchId, SHGBranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["Status"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/GetTotalMemberByAccountType")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetTotalMemberByAccountType(string Date, string AccountName, string AccType, string FyId, string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetAllAccountTotal", Date, AccountName, AccType, FyId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["TotalReords"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }



       //   [Route("api/GetTotalMemberAmountByAccountType")]
       //  [HttpGet]
        public returndbml<sp_FetchLoanPlaneResult> GetTotalMemberAmountByAccountType(string Date, string AccountName, string AccType, string FyId, string CompID, string BranchId)
        {
            List<sp_FetchLoanPlaneResult> objListProduct = new List<sp_FetchLoanPlaneResult>();
            returndbml<sp_FetchLoanPlaneResult> objreturndbmlProduct = new returndbml<sp_FetchLoanPlaneResult>();
            try
            {
                DataSet dsState = new DataSet();
                Database dbState = new SqlDatabase(Connection);
                DbCommand dbCommond = null;
                dbCommond = dbState.GetStoredProcCommand("sp_GetAllAccountTotal", Date, AccountName, AccType, FyId, CompID, BranchId);
                dbState.LoadDataSet(dbCommond, dsState, new string[] { "State" });
                if (dsState.Tables["State"].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsState.Tables["State"].Rows)
                    {

                        sp_FetchLoanPlaneResult objLed = new sp_FetchLoanPlaneResult();
                        objLed.PlaneName = dr["TotalAmount"].ToString();
                        ConvertTableToList<sp_FetchLoanPlaneResult>(dr, ref objLed);
                        objListProduct.Add(objLed);
                    }
                    objreturndbmlProduct.StatusId = 1;
                    objreturndbmlProduct.returndbmllist = objListProduct;
                }
                else
                {
                    objreturndbmlProduct.StatusId = 2;
                    objreturndbmlProduct = null;
                }
            }
            catch (Exception ex)
            {
                objreturndbmlProduct.StatusId = 99;
                objreturndbmlProduct.Status = ex.Message.ToString() + ex.StackTrace.ToString();
            }
            return objreturndbmlProduct;
        }

       //   [Route("api/UpdateOpeningBalance")]
      //     [HttpPost]
        public List<FormSubmision> UpdateOpeningBalance(UpdateOpeningBalance objlist)
        {
            int RowAffect = 0;

            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.TblOpeningAmt == null || objlist.TblOpeningAmt == "")
            {
                objlist.TblOpeningAmt = "0";
            }


            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblAccNo == "" || objlist.TblAccNo == null)
                        {

                        }
                        else
                        {
                            using (SqlCommand cmd = new SqlCommand("UpdateOpeningBalance", con))
                            {


                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VID", objlist.GetVId);
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberId);
                                cmd.Parameters.AddWithValue("@Amount", objlist.TblOpeningAmt);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                cmd.Parameters.AddWithValue("@AccType", objlist.TblAccType);
                                cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@Fyid", objlist.FyId);
                                cmd.Transaction = objTrans;
                                RowAffect = cmd.ExecuteNonQuery();

                            }
                        }








                        if (RowAffect > 0)
                        {

                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = objlist.MemberId,

                ReturnVNo = objlist.MemberId,
                ReturnRecieptNo = MemberID,

            });
            return objDept;
        }
        public static string MaxRecNo;
        public static int RowDel;
       //   [Route("api/InsertReciept")]
      //     [HttpPost]
        public List<FormSubmision> InsertReciept(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        if (objlist.BtnText == "SAVE")
                        {



                            con.Open();
                            objTrans = con.BeginTransaction();

                            if (objlist.TblRowNo == 0)
                            {

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                            }


                            if (objlist.TransByIDText == "Cash" || objlist.TransByIDText.ToString().Substring(0, 3) == "102" || objlist.TransByIDText.ToString().Substring(0, 3) == "103")
                            {

                                if (objlist.MemberID == "" || objlist.MemberID == null)
                                {

                                }
                                else
                                {

                                    if (objlist.TblAccNo.ToString().Length > 3)
                                    {

                                        if (objlist.TblAccNo.ToString().Substring(0, 3) == "101")
                                        {
                                            using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                            {
                                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                                {
                                                    if (Convert.ToDouble(objlist.ShareRate) == 0)
                                                    {
                                                        objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / 100), 0).ToString();
                                                    }
                                                    else
                                                    {
                                                        objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();
                                                    }
                                                    //objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();

                                                    //if(objlist.ShareQty == "0")
                                                    //{
                                                    //    objlist.ShareQty = "1";
                                                    //}

                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                                    cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@SNo", "0");
                                                    cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                                    cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                    cmd.Parameters.AddWithValue("@TransType", "Sale");
                                                    cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                                    cmd.Transaction = objTrans;
                                                    cmd.ExecuteNonQuery();
                                                }
                                            }
                                        }
                                        else if (objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                                        {


                                            using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                            {
                                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                                {
                                                    objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();

                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                                    cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@SNo", "0");
                                                    cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                                    cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                    cmd.Parameters.AddWithValue("@TransType", "Sale");
                                                    cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                                    cmd.Transaction = objTrans;
                                                    cmd.ExecuteNonQuery();
                                                }

                                            }
                                        }
                                    }
                                }



                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }
                                //if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                                //{
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);

                                        if (objlist.MemberID == "" || objlist.MemberID == null)
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                        }
                                        else
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TblAccNo);
                                        }


                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }
                                //}


                            }
                            else
                            {
                                using (SqlCommand cmd = new SqlCommand("SP_InsertBankRecancelation", con))
                                {
                                    if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        //cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        //cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        //cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        //cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");

                                        if (objlist.TblAccNo.ToString().Length > 3)
                                        {
                                            if (objlist.TblAccNo.ToString().Substring(0, 3) == "101" || objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                                            {
                                                cmd.Parameters.AddWithValue("@shareQty", objlist.ShareQty);
                                                cmd.Parameters.AddWithValue("@shareprice", objlist.ShareRate);
                                            }
                                        }
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();
                                    }
                                }
                                //if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                                //{
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("SP_InsertBankRecancelation", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        //cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TblAccNo);
                                        //cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        //cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        //cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }
                                //}

                            }







                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }
                        }
                        else if (objlist.BtnText == "Update")
                        {

                            con.Open();
                            objTrans = con.BeginTransaction();



                            using (SqlConnection Connect = new SqlConnection(Connection))
                            {

                                if (Connect.State == ConnectionState.Open)
                                {
                                    Connect.Close();
                                }
                                Connect.Open();

                                if (objlist.TblRowNo == 0)
                                {
                                    AppTransactionNoClass add = new AppTransactionNoClass();
                                    string NewVNo = add.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);

                                    using (SqlCommand cmd = new SqlCommand("InsertintoUpdateDeleteLog", Connect))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@VNo", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.TblInsAmt);
                                        cmd.Parameters.AddWithValue("@Status", "Update");
                                        cmd.Parameters.AddWithValue("@Update_voucher", NewVNo);



                                        int RowCopy = cmd.ExecuteNonQuery();

                                    }

                                    using (SqlCommand cmd = new SqlCommand("DeleteFromVoucherByAppTransNo", Connect))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@VNo", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.TblInsAmt);
                                        RowDel = cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("DeleteFromLedgerAccountTransactionByAppTransNo", Connect))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@VNo", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.TblInsAmt);
                                        int RowDell = cmd.ExecuteNonQuery();

                                    }

                                }





                            }

                            if (RowDel > 0)
                            {
                                if (objlist.TblRowNo == 0)
                                {

                                    AppTransactionNoClass app = new AppTransactionNoClass();
                                    appmax = objlist.InstAmt;
                                    //AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                    AppTransSrNo = app.AppTransactionSrNoByAppTransNo(objlist.Compid, objlist.FyId, objlist.BranchID, appmax);
                                    MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                    MaxRecNo = objlist.RecieptNo;
                                }
                                if (objlist.MemberID == "" || objlist.MemberID == null)
                                {

                                }
                                else
                                {


                                    if (objlist.TblAccNo.ToString().Substring(0, 3) == "101")
                                    {
                                        using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                        {
                                            if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                            {
                                                if (Convert.ToDouble(objlist.ShareRate) == 0)
                                                {
                                                    objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / 100), 0).ToString();
                                                }
                                                else
                                                {
                                                    objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();
                                                }
                                                //objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();

                                                //if(objlist.ShareQty == "0")
                                                //{
                                                //    objlist.ShareQty = "1";
                                                //}

                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                                cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                                cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                                cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                                cmd.Parameters.AddWithValue("@SNo", "0");
                                                cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                                cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                cmd.Parameters.AddWithValue("@TransType", "Sale");
                                                cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                                cmd.Transaction = objTrans;
                                                cmd.ExecuteNonQuery();
                                            }
                                        }
                                    }
                                    else if (objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                                    {


                                        using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                        {
                                            if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                            {
                                                objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();

                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                                cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                                cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                                cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                                cmd.Parameters.AddWithValue("@SNo", "0");
                                                cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                                cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                cmd.Parameters.AddWithValue("@TransType", "Sale");
                                                cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                                cmd.Transaction = objTrans;
                                                cmd.ExecuteNonQuery();
                                            }

                                        }
                                    }
                                }
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }
                                //if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                                //{
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);

                                        if (objlist.MemberID == "" || objlist.MemberID == null)
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                        }
                                        else
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TblAccNo);
                                        }


                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }
                                //}


                                //}









                                if (RowAffect > 0)
                                {
                                    //AppTransactionNoClass appt = new AppTransactionNoClass();
                                    //int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    objTrans.Commit();
                                }


                            }




                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }

        public static string GetChargeLed;
        public static string GetChargesAmt;
        public static string GetVoucherMemberAccNo;
       //   [Route("api/InsertBankRecancellation")]
      //     [HttpPost]
        public List<FormSubmision> InsertBankRecancellation(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        if (objlist.BtnText == "SAVE")
                        {



                            con.Open();
                            objTrans = con.BeginTransaction();

                            if (objlist.TblRowNo == 0)
                            {

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);

                                if (objlist.TblAccType == "R")
                                {
                                    MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                                }
                                else if (objlist.TblAccType == "C")
                                {
                                    MaxRecNo = app.GetMaxContraNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                                }
                                else if (objlist.TblAccType == "W")
                                {
                                    MaxRecNo = app.GetMaxPaymentNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                                }
                                else if (objlist.TblAccType == "J")
                                {
                                    MaxRecNo = app.GetMaxJournalNo(objlist.Compid, objlist.BranchID, objlist.FyId, "J");
                                }
                                else
                                {
                                    MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                                }
                                GetChargeLed = app.GetChargesLedgerIDByChargesName(objlist.Compid, objlist.BranchID, "Cheque Bounce Charge");
                                GetChargesAmt = app.GetChargesAmountByChargesName(objlist.Compid, objlist.BranchID, "Cheque Bounce Charge");
                                GetVoucherMemberAccNo = app.GetBankRecancellationMemberAccNobyApptransNo(objlist.Compid, objlist.BranchID, objlist.RecieptNo);
                            }

                            if (objlist.ClosingBal == "Clear")
                            {

                                if (objlist.TblAccNo.Length > 3)
                                {

                                    if (objlist.TblAccNo.ToString().Substring(0, 3) == "101")
                                    {
                                        using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                        {

                                            if (Convert.ToDouble(objlist.ShareRate) == 0)
                                            {
                                                objlist.ShareRate = "100";
                                            }


                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                            cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                            cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                            cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                            cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                            cmd.Parameters.AddWithValue("@SNo", "0");
                                            cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                            cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                            if (objlist.TblAccType == "R")
                                            {
                                                cmd.Parameters.AddWithValue("@TransType", "Sale");
                                                cmd.Parameters.AddWithValue("@Nature", "Credit");

                                            }
                                            else if (objlist.TblAccType == "W")
                                            {
                                                cmd.Parameters.AddWithValue("@TransType", "Purchase");
                                                cmd.Parameters.AddWithValue("@Nature", "Debit");

                                            }
                                            cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                            cmd.Transaction = objTrans;
                                            cmd.ExecuteNonQuery();
                                        }
                                    }

                                    else if (objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                                    {


                                        using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                        {
                                            if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                            {

                                                if (Convert.ToDouble(objlist.ShareRate) == 0)
                                                {
                                                    objlist.ShareRate = "100";
                                                }

                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                                cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                                cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                                cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                                cmd.Parameters.AddWithValue("@SNo", "0");
                                                cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                                cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);

                                                if (objlist.TblAccType == "R")
                                                {
                                                    cmd.Parameters.AddWithValue("@TransType", "Sale");
                                                    cmd.Parameters.AddWithValue("@Nature", "Credit");

                                                }
                                                else if (objlist.TblAccType == "W")
                                                {
                                                    cmd.Parameters.AddWithValue("@TransType", "Purchase");
                                                    cmd.Parameters.AddWithValue("@Nature", "Debit");

                                                }
                                                cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                                cmd.Transaction = objTrans;
                                                cmd.ExecuteNonQuery();
                                            }

                                        }
                                    }
                                    else if (objlist.TblAccNo.ToString().Substring(0, 3) == "105")
                                    {

                                        using (SqlCommand cmd = new SqlCommand("UpdateLoanInstallment", con))
                                        {


                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.Parameters.AddWithValue("@LastInstallMentDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                            cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                            cmd.Parameters.AddWithValue("@NoofInstallmentPaid", objlist.TransByIDText);

                                            cmd.Transaction = objTrans;
                                            cmd.ExecuteNonQuery();

                                        }
                                    }
                                }
                                if (objlist.TblRowNo == 0)
                                {

                                    using (SqlCommand cmd = new SqlCommand("UpdateBankRecancelation", con))
                                    {


                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@Status", "InActive");
                                        cmd.Parameters.AddWithValue("@EffectiveDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@VoucherNo", MaxVNoO);

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }

                                if (objlist.TblAccNo != "" || objlist.TblAccNo != null)
                                {
                                    if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                    {
                                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                        {
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.Parameters.AddWithValue("@VType", objlist.TblAccType);
                                            cmd.Parameters.AddWithValue("@Nature", objlist.MaturityAmt);
                                            cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                            cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                            cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                            cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                            cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                            cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                            cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                            cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                            cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                            cmd.Parameters.AddWithValue("@AgentId", "0");
                                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                            cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                            cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                            cmd.Transaction = objTrans;
                                            RowAffect = cmd.ExecuteNonQuery();

                                        }
                                    }

                                }





                                if (RowAffect > 0)
                                {
                                    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    objTrans.Commit();
                                }
                            }
                            else if (objlist.ClosingBal == "Return")
                            {
                                if (objlist.TblAccType == "W")
                                {
                                    if (objlist.TblAccNo != "" || objlist.TblAccNo != null)
                                    {
                                        if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                        {
                                            if (objlist.MaturityAmt == "Debit")
                                            {

                                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                    cmd.Parameters.AddWithValue("@Nature", objlist.MaturityAmt);
                                                    cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                    cmd.Transaction = objTrans;
                                                    RowAffect = cmd.ExecuteNonQuery();

                                                }


                                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                    cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                    cmd.Transaction = objTrans;
                                                    RowAffect = cmd.ExecuteNonQuery();

                                                }
                                            }
                                            else if (objlist.MaturityAmt == "Credit")
                                            {
                                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                    cmd.Parameters.AddWithValue("@Nature", objlist.MaturityAmt);
                                                    cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                    cmd.Transaction = objTrans;
                                                    RowAffect = cmd.ExecuteNonQuery();

                                                }


                                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                                    cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                    cmd.Transaction = objTrans;
                                                    RowAffect = cmd.ExecuteNonQuery();

                                                }
                                            }



                                        }

                                    }


                                    //if (RowAffect > 0)
                                    //{
                                    //    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    //    int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    //    objTrans.Commit();
                                    //}

                                }
                                else
                                {

                                    if (objlist.TblAccNo != "" || objlist.TblAccNo != null)
                                    {
                                        if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                        {
                                            if (objlist.MaturityAmt == "Credit")
                                            {

                                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                    cmd.Parameters.AddWithValue("@Nature", objlist.MaturityAmt);
                                                    cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                    cmd.Transaction = objTrans;
                                                    RowAffect = cmd.ExecuteNonQuery();

                                                }


                                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                                    cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                    cmd.Transaction = objTrans;
                                                    RowAffect = cmd.ExecuteNonQuery();

                                                }
                                            }
                                            else if (objlist.MaturityAmt == "Debit")
                                            {
                                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                    cmd.Parameters.AddWithValue("@Nature", objlist.MaturityAmt);
                                                    cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                    cmd.Transaction = objTrans;
                                                    RowAffect = cmd.ExecuteNonQuery();

                                                }


                                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                    cmd.Parameters.AddWithValue("@Particular", objlist.Particuler);
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblInsAmt);
                                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                    cmd.Transaction = objTrans;
                                                    RowAffect = cmd.ExecuteNonQuery();

                                                }
                                            }
                                            if (objlist.TblRowNo == 0)
                                            {

                                                if (GetChargeLed != "" && Convert.ToDouble(GetChargesAmt) > 0)
                                                {

                                                    if (GetVoucherMemberAccNo != "")
                                                    {

                                                        //if (GetVoucherMemberAccNo.Substring(0, 3) == "105")
                                                        //{
                                                        //    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                        //    {
                                                        //        cmd.CommandType = CommandType.StoredProcedure;
                                                        //        cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                        //        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                        //        cmd.Parameters.AddWithValue("@Particular", "By " + GetVoucherMemberAccNo);
                                                        //        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                        //        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                        //        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                        //        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                        //        cmd.Parameters.AddWithValue("@Amount", GetChargesAmt);
                                                        //        cmd.Parameters.AddWithValue("@ClosingBal", GetChargesAmt);
                                                        //        cmd.Parameters.AddWithValue("@BankName", "");
                                                        //        cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                                        //        cmd.Parameters.AddWithValue("@BranchName", "");
                                                        //        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                                        //        cmd.Parameters.AddWithValue("@Narration", "Has Been Returned");
                                                        //        cmd.Parameters.AddWithValue("@LedgerId", GetChargeLed);
                                                        //        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                        //        cmd.Parameters.AddWithValue("@LedgerAccNo", GetVoucherMemberAccNo);
                                                        //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                        //        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                        //        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                        //        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                        //        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                        //        cmd.Parameters.AddWithValue("@AgentId", "0");
                                                        //        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                        //        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                        //        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                        //        cmd.Transaction = objTrans;
                                                        //        RowAffect = cmd.ExecuteNonQuery();

                                                        //    }


                                                        //    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                        //    {
                                                        //        cmd.CommandType = CommandType.StoredProcedure;
                                                        //        cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                        //        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                                        //        cmd.Parameters.AddWithValue("@Particular", "To " + GetChargeLed);
                                                        //        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                        //        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                        //        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                        //        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                        //        cmd.Parameters.AddWithValue("@Amount", GetChargesAmt);
                                                        //        cmd.Parameters.AddWithValue("@ClosingBal", GetChargesAmt);
                                                        //        cmd.Parameters.AddWithValue("@BankName", "");
                                                        //        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                                        //        cmd.Parameters.AddWithValue("@BranchName", "");
                                                        //        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                                        //        cmd.Parameters.AddWithValue("@Narration", "Has Been Returned");
                                                        //        cmd.Parameters.AddWithValue("@LedgerId", GetVoucherMemberAccNo);
                                                        //        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                        //        cmd.Parameters.AddWithValue("@LedgerAccNo", GetChargeLed);
                                                        //        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                        //        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                        //        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                        //        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                        //        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                        //        cmd.Parameters.AddWithValue("@AgentId", "0");
                                                        //        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                        //        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                        //        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                        //        cmd.Transaction = objTrans;
                                                        //        RowAffect = cmd.ExecuteNonQuery();

                                                        //    }


                                                        //}
                                                        //else
                                                        //{
                                                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                        {
                                                            cmd.CommandType = CommandType.StoredProcedure;
                                                            cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                            cmd.Parameters.AddWithValue("@Particular", "By " + GetVoucherMemberAccNo);
                                                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                            cmd.Parameters.AddWithValue("@Amount", GetChargesAmt);
                                                            cmd.Parameters.AddWithValue("@ClosingBal", GetChargesAmt);
                                                            cmd.Parameters.AddWithValue("@BankName", "");
                                                            cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                                            cmd.Parameters.AddWithValue("@BranchName", "");
                                                            cmd.Parameters.AddWithValue("@CheckNumber", "");
                                                            cmd.Parameters.AddWithValue("@Narration", "Has Been Returned");
                                                            cmd.Parameters.AddWithValue("@LedgerId", GetChargeLed);
                                                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                            cmd.Parameters.AddWithValue("@LedgerAccNo", GetVoucherMemberAccNo);
                                                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                            cmd.Parameters.AddWithValue("@AgentId", "0");
                                                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                            cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                            cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                            cmd.Transaction = objTrans;
                                                            RowAffect = cmd.ExecuteNonQuery();

                                                        }


                                                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                                        {
                                                            cmd.CommandType = CommandType.StoredProcedure;
                                                            cmd.Parameters.AddWithValue("@VType", "Cheque Return");
                                                            cmd.Parameters.AddWithValue("@Nature", "Debit");
                                                            cmd.Parameters.AddWithValue("@Particular", "To " + GetChargeLed);
                                                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                            cmd.Parameters.AddWithValue("@Amount", GetChargesAmt);
                                                            cmd.Parameters.AddWithValue("@ClosingBal", GetChargesAmt);
                                                            cmd.Parameters.AddWithValue("@BankName", "");
                                                            cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                                            cmd.Parameters.AddWithValue("@BranchName", "");
                                                            cmd.Parameters.AddWithValue("@CheckNumber", "");
                                                            cmd.Parameters.AddWithValue("@Narration", "Has Been Returned");
                                                            cmd.Parameters.AddWithValue("@LedgerId", GetVoucherMemberAccNo);
                                                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                            cmd.Parameters.AddWithValue("@LedgerAccNo", GetChargeLed);
                                                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                                            cmd.Parameters.AddWithValue("@AgentId", "0");
                                                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                                            cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                                            cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                                            cmd.Transaction = objTrans;
                                                            RowAffect = cmd.ExecuteNonQuery();

                                                        }
                                                        //}
                                                    }

                                                }

                                            }


                                        }

                                    }



                                }




                                if (RowAffect > 0)
                                {

                                    if (objlist.TblRowNo == 0)
                                    {

                                        using (SqlCommand cmd = new SqlCommand("UpdateBankRecancelation", con))
                                        {


                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.Parameters.AddWithValue("@Status", "InActive");
                                            cmd.Parameters.AddWithValue("@EffectiveDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                            cmd.Parameters.AddWithValue("@AppTransNo", objlist.VoucherNo);
                                            cmd.Parameters.AddWithValue("@VoucherNo", MaxVNoO);

                                            cmd.Transaction = objTrans;
                                            cmd.ExecuteNonQuery();

                                        }


                                    }



                                    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    objTrans.Commit();
                                }

                            }
                            else if (objlist.ClosingBal == "Hold")
                            {
                                if (objlist.TblRowNo == 0)
                                {

                                    using (SqlCommand cmd = new SqlCommand("UpdateBankRecancelation", con))
                                    {


                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@Status", "Hold");
                                        cmd.Parameters.AddWithValue("@EffectiveDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@VoucherNo", MaxVNoO);

                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                        if (RowAffect > 0)
                                        {
                                            AppTransactionNoClass appt = new AppTransactionNoClass();
                                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                            objTrans.Commit();
                                        }

                                    }


                                }
                            }
                        }


                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }


        public static int RowDelete;
       //   [Route("api/InsertRecieptBulk")]
      //     [HttpPost]
        public List<FormSubmision> InsertRecieptBulk(InsertRecieptBulk objlist)
        {
            int RowAffect = 0;

            if (objlist.MemberName == null)
            {
                objlist.MemberName = "";
            }

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.SBAccNo == null)
            {
                objlist.SBAccNo = "";
            }
            if (objlist.SBAmt == null)
            {
                objlist.SBAmt = "0";
            }
            if (objlist.CPAccNo == null)
            {
                objlist.CPAccNo = "";
            }
            if (objlist.cpAmt == null)
            {
                objlist.cpAmt = "0";
            }

            if (objlist.LICAccNo == null)
            {
                objlist.LICAccNo = "";
            }
            if (objlist.LICAmt == null)
            {
                objlist.LICAmt = "0";
            }

            if (objlist.LoanAAccNo == null)
            {
                objlist.LoanAAccNo = "";
            }
            if (objlist.LoanAccAAmt == null)
            {
                objlist.LoanAccAAmt = "0";
            }

            if (objlist.InstRecLoanAAccNo == null)
            {
                objlist.InstRecLoanAAccNo = "";
            }
            if (objlist.InstRecOnLoanAAmt == null)
            {
                objlist.InstRecOnLoanAAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.PanaltyAccNo == null)
            {
                objlist.PanaltyAccNo = "";
            }
            if (objlist.PanaltyAmt == null)
            {
                objlist.PanaltyAmt = "0";
            }
            if (objlist.HdnSBAmtTotal == null || objlist.HdnSBAmtTotal == "")
            {
                objlist.HdnSBAmtTotal = "0";
            }
            if (objlist.HdncpAmtTotal == null || objlist.HdncpAmtTotal == "")
            {
                objlist.HdncpAmtTotal = "0";
            }
            if (objlist.HdnLICAmtTotal == null || objlist.HdnLICAmtTotal == "")
            {
                objlist.HdnLICAmtTotal = "0";
            }
            if (objlist.HdnLoanAccAmtTotal == null || objlist.HdnLoanAccAmtTotal == "")
            {
                objlist.HdnLoanAccAmtTotal = "0";
            }
            if (objlist.HdnPanaltyAccAmtTotal == null || objlist.HdnPanaltyAccAmtTotal == "")
            {
                objlist.HdnPanaltyAccAmtTotal = "0";
            }
            if (objlist.HdnInstRecBusinessLoanTotal == null || objlist.HdnInstRecBusinessLoanTotal == "")
            {
                objlist.HdnInstRecBusinessLoanTotal = "0";
            }
            if (objlist.HdnInstRecEducationLoanTotal == null || objlist.HdnInstRecEducationLoanTotal == "")
            {
                objlist.HdnInstRecEducationLoanTotal = "0";
            }
            if (objlist.HdnInstRecMarriageLoanTotal == null || objlist.HdnInstRecMarriageLoanTotal == "")
            {
                objlist.HdnInstRecMarriageLoanTotal = "0";
            }
            if (objlist.HdnInstRecHousingLoanTotal == null || objlist.HdnInstRecHousingLoanTotal == "")
            {
                objlist.HdnInstRecHousingLoanTotal = "0";
            }
            if (objlist.HdnInstRecVehicalLoanTotal == null || objlist.HdnInstRecVehicalLoanTotal == "")
            {
                objlist.HdnInstRecVehicalLoanTotal = "0";
            }
            if (objlist.HdnInstRecMedicalLoanTotal == null || objlist.HdnInstRecMedicalLoanTotal == "")
            {
                objlist.HdnInstRecMedicalLoanTotal = "0";
            }
            if (objlist.HdnInstRecMiscleneaousLoanTotal == null || objlist.HdnInstRecMiscleneaousLoanTotal == "")
            {
                objlist.HdnInstRecMiscleneaousLoanTotal = "0";
            }
            if (objlist.HdnInstRecBusinessLoanFlatTotal == null || objlist.HdnInstRecBusinessLoanFlatTotal == "")
            {
                objlist.HdnInstRecBusinessLoanFlatTotal = "0";
            }
            if (objlist.HdnInstRecEducationLoanFlatTotal == null || objlist.HdnInstRecEducationLoanFlatTotal == "")
            {
                objlist.HdnInstRecEducationLoanFlatTotal = "0";
            }
            if (objlist.HdnInstRecMarriageLoanFlatTotal == null || objlist.HdnInstRecMarriageLoanFlatTotal == "")
            {
                objlist.HdnInstRecMarriageLoanFlatTotal = "0";
            }
            if (objlist.HdnInstRecHousingLoanFlatTotal == null || objlist.HdnInstRecHousingLoanFlatTotal == "")
            {
                objlist.HdnInstRecHousingLoanFlatTotal = "0";
            }
            if (objlist.HdnInstRecVehicalLoanFlatTotal == null || objlist.HdnInstRecVehicalLoanFlatTotal == "")
            {
                objlist.HdnInstRecVehicalLoanFlatTotal = "0";
            }
            if (objlist.HdnInstRecMedicalLoanFlatTotal == null || objlist.HdnInstRecMedicalLoanFlatTotal == "")
            {
                objlist.HdnInstRecMedicalLoanFlatTotal = "0";
            }
            if (objlist.HdnInstRecMiscleneaousLoanFlatTotal == null || objlist.HdnInstRecMiscleneaousLoanFlatTotal == "")
            {
                objlist.HdnInstRecMiscleneaousLoanFlatTotal = "0";
            }
            if (objlist.HdnBusinessLoanTotal == null || objlist.HdnBusinessLoanTotal == "")
            {
                objlist.HdnBusinessLoanTotal = "0";
            }
            if (objlist.HdnEducationLoanTotal == null || objlist.HdnEducationLoanTotal == "")
            {
                objlist.HdnEducationLoanTotal = "0";
            }
            if (objlist.HdnMarriageLoanTotal == null || objlist.HdnMarriageLoanTotal == "")
            {
                objlist.HdnMarriageLoanTotal = "0";
            }
            if (objlist.HdnHousingLoanTotal == null || objlist.HdnHousingLoanTotal == "")
            {
                objlist.HdnHousingLoanTotal = "0";
            }
            if (objlist.HdnVehicalLoanTotal == null || objlist.HdnVehicalLoanTotal == "")
            {
                objlist.HdnVehicalLoanTotal = "0";
            }
            if (objlist.HdnMedicalLoanTotal == null || objlist.HdnMedicalLoanTotal == "")
            {
                objlist.HdnMedicalLoanTotal = "0";
            }
            if (objlist.HdnMiscleneaousLoanTotal == null || objlist.HdnMiscleneaousLoanTotal == "")
            {
                objlist.HdnMiscleneaousLoanTotal = "0";
            }
            if (objlist.HdnBusinessLoanFlatTotal == null || objlist.HdnBusinessLoanFlatTotal == "")
            {
                objlist.HdnBusinessLoanFlatTotal = "0";
            }
            if (objlist.HdnEducationLoanFlatTotal == null || objlist.HdnEducationLoanFlatTotal == "")
            {
                objlist.HdnEducationLoanFlatTotal = "0";
            }
            if (objlist.HdnMarriageLoanFlatTotal == null || objlist.HdnMarriageLoanFlatTotal == "")
            {
                objlist.HdnMarriageLoanFlatTotal = "0";
            }
            if (objlist.HdnHousingLoanFlatTotal == null || objlist.HdnHousingLoanFlatTotal == "")
            {
                objlist.HdnHousingLoanFlatTotal = "0";
            }
            if (objlist.HdnVehicalLoanFlatTotal == null || objlist.HdnVehicalLoanFlatTotal == "")
            {
                objlist.HdnVehicalLoanFlatTotal = "0";
            }
            if (objlist.HdnMedicalLoanFlatTotal == null || objlist.HdnMedicalLoanFlatTotal == "")
            {
                objlist.HdnMedicalLoanFlatTotal = "0";
            }
            if (objlist.HdnMiscleneaousLoanFlatTotal == null || objlist.HdnMiscleneaousLoanFlatTotal == "")
            {
                objlist.HdnMiscleneaousLoanFlatTotal = "0";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {


                        con.Open();
                        objTrans = con.BeginTransaction();


                        AppTransactionNoClass app = new AppTransactionNoClass();
                        MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                        MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);

                        if (objlist.TblRowNo == 0)
                        {

                            //AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            if (objlist.BankName == "Old")
                            {
                                objlist.BankName = "";
                                MeetingMaxNo = objlist.VoucherNo;
                                MeetingMaxID = app.GetOldMeetingSrNo(objlist.Compid, objlist.FyId, objlist.BranchID, MeetingMaxNo);


                            }

                            else if (objlist.BtnText == "Update")
                            {
                                objlist.BankName = "";
                                MeetingMaxNo = objlist.VoucherNo;
                                MeetingMaxID = app.GetOldMeetingSrNo(objlist.Compid, objlist.FyId, objlist.BranchID, MeetingMaxNo);
                            }
                            else
                            {
                                objlist.BankName = "";
                                MeetingMaxID = app.GetMaxMeetingSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                MeetingMaxNo = app.GetMaxMeetingNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            }
                            //MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                            //MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);



                            //LedgerAccNo["10201000001", "10301000001", "11101000001", "1051", "105335", "105669", "1051003", "1051337", "1051671", "1052005", "1052339", "1052673"];



                            if (objlist.BtnText == "Update")
                            {


                                using (SqlConnection Connect = new SqlConnection(Connection))
                                {

                                    if (Connect.State == ConnectionState.Open)
                                    {
                                        Connect.Close();
                                    }
                                    Connect.Open();


                                    using (SqlCommand cmd = new SqlCommand("DeleteFromVoucherByAppTransNumber", Connect))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                        //cmd.Parameters.AddWithValue("@VNo", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.TblAccNo);
                                        RowDelete = cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("DeleteFromBulkRecieptMemberwiseByAppTransNumber", Connect))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                        //cmd.Parameters.AddWithValue("@VNo", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.TblAccNo);
                                        RowDelete = cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("DeleteFromBulkRecieptMemberwiseTotallByAppTransNumber", Connect))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                        //cmd.Parameters.AddWithValue("@VNo", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.TblAccNo);
                                        RowDelete = cmd.ExecuteNonQuery();

                                    }
                                }

                            }

                        }




                        if (RowDelete > 0 && objlist.BtnText == "Update")
                        {

                            if (objlist.TblAccType == "UnCheck")
                            {
                                using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "R");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@AccNo", "");
                                    cmd.Parameters.AddWithValue("@Amount", "0");
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@Status", "O");
                                    cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                    cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                    cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                                if (objlist.TblRowNo == 0)
                                {
                                    CN.Open();
                                    using (SqlCommand cmdd = new SqlCommand("GetFedrationAllAccounts", CN))
                                    {
                                        cmdd.CommandType = CommandType.StoredProcedure;
                                        cmdd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmdd.Parameters.AddWithValue("@BranchID", "1");
                                        cmdd.Parameters.AddWithValue("@BatchNo", objlist.BranchID);

                                        SqlDataReader dr = cmdd.ExecuteReader();
                                        while (dr.Read())
                                        {
                                            string FedMemberID = "";
                                            string FedAccNo = dr["AccNo"].ToString();
                                            string FedLdName = dr["LdName"].ToString();
                                            string FedGpName = dr["GpName"].ToString();
                                            string FedNature = dr["Nature"].ToString();
                                            double InstAmount = 0;

                                            if (dr["AccNo"].ToString() != "")
                                            {
                                                FedMemberID = dr["MemberId"].ToString();

                                            }
                                            FedLdName = FedLdName.Trim();

                                            if (FedLdName == "Saving Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnSBAmtTotal);

                                            }
                                            else if (FedLdName == "Compulsory Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdncpAmtTotal);
                                            }
                                            else if (FedLdName == "LIC Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnLICAmtTotal);
                                            }
                                            else if (FedLdName == "Business Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnBusinessLoanTotal);
                                            }
                                            else if (FedLdName == "Education Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnEducationLoanTotal);
                                            }
                                            else if (FedLdName == "Marriage Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMarriageLoanTotal);
                                            }
                                            else if (FedLdName == "Housing Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnHousingLoanTotal);
                                            }
                                            else if (FedLdName == "Vehical Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnVehicalLoanTotal);
                                            }
                                            else if (FedLdName == "Medical Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMedicalLoanTotal);
                                            }
                                            else if (FedLdName == "Miscleneaous Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMiscleneaousLoanTotal);
                                            }
                                            else if (FedLdName == "Business Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnBusinessLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Housing Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnHousingLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Education Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnEducationLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Vehical Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnVehicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Marriage Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMarriageLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Medical Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMedicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Miscleneaous Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMiscleneaousLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Housing Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecHousingLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Business Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecBusinessLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Education Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecEducationLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Vehicle Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecVehicalLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Marriage Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMarriageLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Medical loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMedicalLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Miscleneaous Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMiscleneaousLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Business Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecBusinessLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Housing Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecHousingLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Education Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecEducationLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Vehicle Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecVehicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Marriage Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMarriageLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Medical loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMedicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Miscleneaous Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMiscleneaousLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Panalty Ac")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnPanaltyAccAmtTotal);
                                            }

                                            if (Convert.ToDouble(InstAmount) > 0)
                                            {
                                                using (SqlCommand cmd = new SqlCommand("InsertTotalDepositAccNoWiseFedrationBulk", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@VType", "R");
                                                    cmd.Parameters.AddWithValue("@Nature", FedNature);
                                                    cmd.Parameters.AddWithValue("@MemberId", FedMemberID);
                                                    cmd.Parameters.AddWithValue("@AccNo", FedAccNo);
                                                    cmd.Parameters.AddWithValue("@AccType", FedLdName);
                                                    cmd.Parameters.AddWithValue("@Amount", InstAmount);
                                                    cmd.Parameters.AddWithValue("@TransactionBy", objlist.TransByID);
                                                    cmd.Parameters.AddWithValue("@ApproveDate", DBNull.Value);
                                                    cmd.Parameters.AddWithValue("@Status", "O");
                                                    cmd.Parameters.AddWithValue("@UserID", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@Compid", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", "1");
                                                    cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                                    cmd.Transaction = objTrans;
                                                    cmd.ExecuteNonQuery();

                                                }
                                            }



                                        }
                                        dr.Close();
                                        CN.Close();
                                    }
                                    CN.Close();

                                }

                                if (RowAffect > 0)
                                {
                                    objTrans.Commit();

                                }
                                else
                                {
                                    objTrans.Rollback();

                                }


                            }
                            else
                            {





                                if (objlist.SBAccNo != "" && Convert.ToDouble(objlist.SBAmt) > 0)
                                {
                                    //AppTransactionNoClass app = new AppTransactionNoClass();
                                    //MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                    //MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.SBAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.SBAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);


                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }





                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.SBAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.SBAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }


                                if (objlist.CPAccNo != "" && Convert.ToDouble(objlist.cpAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.cpAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.CPAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }







                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.CPAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.cpAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }



                                }


                                if (objlist.LICAccNo != "" && Convert.ToDouble(objlist.LICAmt) > 0)
                                {


                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LICAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LICAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }





                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.LICAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LICAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }


                                if (objlist.LoanAAccNo != "" && Convert.ToDouble(objlist.LoanAccAAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LoanAccAAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }





                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LoanAccAAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }



                                }


                                if (objlist.InstRecLoanAAccNo != "" && Convert.ToDouble(objlist.InstRecOnLoanAAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanAAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.InstRecLoanAAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }







                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.InstRecLoanAAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanAAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }


                                if (objlist.LoanBAccNo != "" && Convert.ToDouble(objlist.LoanAccBAmt) > 0)
                                {




                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LoanAccBAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanBAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }




                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.LoanBAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanBAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }


                                if (objlist.InstRecLoanBAccNo != "" && Convert.ToDouble(objlist.InstRecOnLoanBAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanBAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.InstRecLoanBAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }





                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.InstRecLoanBAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanBAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }



                                }




                                if (objlist.PanaltyAccNo != "" && Convert.ToDouble(objlist.PanaltyAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.PanaltyAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.PanaltyAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }






                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.PanaltyAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.PanaltyAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }




                                }


                                if (Convert.ToDouble(objlist.RowTotal) > 0)
                                {

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.RowTotal);
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);

                                        if (objlist.MemberID == "" || objlist.MemberID == null)
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                        }
                                        else
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To Bulk posting " + objlist.MemberName);
                                        }


                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.RowTotal);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }

                                }




                                if (objlist.TblRowNo == 0)
                                {
                                    CN.Open();
                                    using (SqlCommand cmdd = new SqlCommand("GetFedrationAllAccounts", CN))
                                    {
                                        cmdd.CommandType = CommandType.StoredProcedure;
                                        cmdd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmdd.Parameters.AddWithValue("@BranchID", "1");
                                        cmdd.Parameters.AddWithValue("@BatchNo", objlist.BranchID);

                                        SqlDataReader dr = cmdd.ExecuteReader();
                                        while (dr.Read())
                                        {
                                            string FedMemberID = "";
                                            string FedAccNo = dr["AccNo"].ToString();
                                            string FedLdName = dr["LdName"].ToString();
                                            string FedGpName = dr["GpName"].ToString();
                                            string FedNature = dr["Nature"].ToString();
                                            double InstAmount = 0;

                                            if (dr["AccNo"].ToString() != "")
                                            {
                                                FedMemberID = dr["MemberId"].ToString();

                                            }
                                            FedLdName = FedLdName.Trim();

                                            if (FedLdName == "Saving Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnSBAmtTotal);

                                            }
                                            else if (FedLdName == "Compulsory Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdncpAmtTotal);
                                            }
                                            else if (FedLdName == "LIC Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnLICAmtTotal);
                                            }
                                            else if (FedLdName == "Business Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnBusinessLoanTotal);
                                            }
                                            else if (FedLdName == "Education Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnEducationLoanTotal);
                                            }
                                            else if (FedLdName == "Marriage Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMarriageLoanTotal);
                                            }
                                            else if (FedLdName == "Housing Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnHousingLoanTotal);
                                            }
                                            else if (FedLdName == "Vehical Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnVehicalLoanTotal);
                                            }
                                            else if (FedLdName == "Medical Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMedicalLoanTotal);
                                            }
                                            else if (FedLdName == "Miscleneaous Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMiscleneaousLoanTotal);
                                            }
                                            else if (FedLdName == "Business Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnBusinessLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Housing Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnHousingLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Education Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnEducationLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Vehical Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnVehicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Marriage Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMarriageLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Medical Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMedicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Miscleneaous Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMiscleneaousLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Housing Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecHousingLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Business Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecBusinessLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Education Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecEducationLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Vehicle Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecVehicalLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Marriage Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMarriageLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Medical loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMedicalLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Miscleneaous Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMiscleneaousLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Business Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecBusinessLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Housing Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecHousingLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Education Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecEducationLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Vehicle Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecVehicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Marriage Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMarriageLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Medical loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMedicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Miscleneaous Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMiscleneaousLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Panalty Ac")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnPanaltyAccAmtTotal);
                                            }

                                            if (Convert.ToDouble(InstAmount) > 0)
                                            {
                                                using (SqlCommand cmd = new SqlCommand("InsertTotalDepositAccNoWiseFedrationBulk", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@VType", "R");
                                                    cmd.Parameters.AddWithValue("@Nature", FedNature);
                                                    cmd.Parameters.AddWithValue("@MemberId", FedMemberID);
                                                    cmd.Parameters.AddWithValue("@AccNo", FedAccNo);
                                                    cmd.Parameters.AddWithValue("@AccType", FedLdName);
                                                    cmd.Parameters.AddWithValue("@Amount", InstAmount);
                                                    cmd.Parameters.AddWithValue("@TransactionBy", objlist.TransByID);
                                                    cmd.Parameters.AddWithValue("@ApproveDate", DBNull.Value);
                                                    cmd.Parameters.AddWithValue("@Status", "O");
                                                    cmd.Parameters.AddWithValue("@UserID", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@Compid", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", "1");
                                                    cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                                    cmd.Transaction = objTrans;
                                                    cmd.ExecuteNonQuery();

                                                }
                                            }



                                        }
                                        dr.Close();
                                        CN.Close();
                                    }
                                    CN.Close();

                                }



                                if (RowAffect > 0)
                                {
                                    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    objTrans.Commit();
                                }
                            }

                        }
                        else
                        {


                            if (objlist.TblAccType == "UnCheck")
                            {
                                using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "R");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@AccNo", "");
                                    cmd.Parameters.AddWithValue("@Amount", "0");
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@Status", "O");
                                    cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                    cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                    cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                                if (objlist.TblRowNo == 0)
                                {
                                    CN.Open();
                                    using (SqlCommand cmdd = new SqlCommand("GetFedrationAllAccounts", CN))
                                    {
                                        cmdd.CommandType = CommandType.StoredProcedure;
                                        cmdd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmdd.Parameters.AddWithValue("@BranchID", "1");
                                        cmdd.Parameters.AddWithValue("@BatchNo", objlist.BranchID);

                                        SqlDataReader dr = cmdd.ExecuteReader();
                                        while (dr.Read())
                                        {
                                            string FedMemberID = "";
                                            string FedAccNo = dr["AccNo"].ToString();
                                            string FedLdName = dr["LdName"].ToString();
                                            string FedGpName = dr["GpName"].ToString();
                                            string FedNature = dr["Nature"].ToString();
                                            double InstAmount = 0;

                                            if (dr["AccNo"].ToString() != "")
                                            {
                                                FedMemberID = dr["MemberId"].ToString();

                                            }
                                            FedLdName = FedLdName.Trim();

                                            if (FedLdName == "Saving Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnSBAmtTotal);

                                            }
                                            else if (FedLdName == "Compulsory Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdncpAmtTotal);
                                            }
                                            else if (FedLdName == "LIC Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnLICAmtTotal);
                                            }
                                            else if (FedLdName == "Business Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnBusinessLoanTotal);
                                            }
                                            else if (FedLdName == "Education Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnEducationLoanTotal);
                                            }
                                            else if (FedLdName == "Marriage Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMarriageLoanTotal);
                                            }
                                            else if (FedLdName == "Housing Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnHousingLoanTotal);
                                            }
                                            else if (FedLdName == "Vehical Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnVehicalLoanTotal);
                                            }
                                            else if (FedLdName == "Medical Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMedicalLoanTotal);
                                            }
                                            else if (FedLdName == "Miscleneaous Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMiscleneaousLoanTotal);
                                            }
                                            else if (FedLdName == "Business Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnBusinessLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Housing Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnHousingLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Education Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnEducationLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Vehical Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnVehicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Marriage Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMarriageLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Medical Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMedicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Miscleneaous Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMiscleneaousLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Housing Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecHousingLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Business Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecBusinessLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Education Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecEducationLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Vehicle Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecVehicalLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Marriage Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMarriageLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Medical loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMedicalLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Miscleneaous Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMiscleneaousLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Business Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecBusinessLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Housing Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecHousingLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Education Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecEducationLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Vehicle Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecVehicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Marriage Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMarriageLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Medical loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMedicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Miscleneaous Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMiscleneaousLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Panalty Ac")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnPanaltyAccAmtTotal);
                                            }

                                            if (Convert.ToDouble(InstAmount) > 0)
                                            {
                                                using (SqlCommand cmd = new SqlCommand("InsertTotalDepositAccNoWiseFedrationBulk", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@VType", "R");
                                                    cmd.Parameters.AddWithValue("@Nature", FedNature);
                                                    cmd.Parameters.AddWithValue("@MemberId", FedMemberID);
                                                    cmd.Parameters.AddWithValue("@AccNo", FedAccNo);
                                                    cmd.Parameters.AddWithValue("@AccType", FedLdName);
                                                    cmd.Parameters.AddWithValue("@Amount", InstAmount);
                                                    cmd.Parameters.AddWithValue("@TransactionBy", objlist.TransByID);
                                                    cmd.Parameters.AddWithValue("@ApproveDate", DBNull.Value);
                                                    cmd.Parameters.AddWithValue("@Status", "O");
                                                    cmd.Parameters.AddWithValue("@UserID", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@Compid", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", "1");
                                                    cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                                    cmd.Transaction = objTrans;
                                                    cmd.ExecuteNonQuery();

                                                }
                                            }



                                        }
                                        dr.Close();
                                        CN.Close();
                                    }
                                    CN.Close();

                                }

                                if (RowAffect > 0)
                                {
                                    objTrans.Commit();

                                }
                                else
                                {
                                    objTrans.Rollback();

                                }


                            }
                            else
                            {





                                if (objlist.SBAccNo != "" && Convert.ToDouble(objlist.SBAmt) > 0)
                                {
                                    //AppTransactionNoClass app = new AppTransactionNoClass();
                                    //MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                    //MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.SBAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.SBAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);


                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }





                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.SBAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.SBAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }


                                if (objlist.CPAccNo != "" && Convert.ToDouble(objlist.cpAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.cpAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.CPAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }







                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.CPAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.cpAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }



                                }


                                if (objlist.LICAccNo != "" && Convert.ToDouble(objlist.LICAmt) > 0)
                                {


                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LICAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LICAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }





                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.LICAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LICAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }


                                if (objlist.LoanAAccNo != "" && Convert.ToDouble(objlist.LoanAccAAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LoanAccAAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }





                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LoanAccAAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }



                                }


                                if (objlist.InstRecLoanAAccNo != "" && Convert.ToDouble(objlist.InstRecOnLoanAAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanAAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.InstRecLoanAAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }







                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.InstRecLoanAAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanAAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }


                                if (objlist.LoanBAccNo != "" && Convert.ToDouble(objlist.LoanAccBAmt) > 0)
                                {




                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.LoanAccBAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanBAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }




                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.LoanBAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanBAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }


                                }


                                if (objlist.InstRecLoanBAccNo != "" && Convert.ToDouble(objlist.InstRecOnLoanBAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanBAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.InstRecLoanBAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }





                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.InstRecLoanBAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanBAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }



                                }




                                if (objlist.PanaltyAccNo != "" && Convert.ToDouble(objlist.PanaltyAmt) > 0)
                                {



                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.PanaltyAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.PanaltyAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }






                                    using (SqlCommand cmd = new SqlCommand("INSERTBulkRecieptMemberwise", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.PanaltyAccNo);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.PanaltyAmt);
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@Status", "C");
                                        cmd.Parameters.AddWithValue("@MeetingID", MeetingMaxID);
                                        cmd.Parameters.AddWithValue("@MeetingNo", MeetingMaxNo);
                                        cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Maturitydate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();

                                    }




                                }


                                if (Convert.ToDouble(objlist.RowTotal) > 0)
                                {

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.RowTotal);
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);

                                        if (objlist.MemberID == "" || objlist.MemberID == null)
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                        }
                                        else
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To Bulk posting " + objlist.MemberName);
                                        }


                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.RowTotal);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.LoanAAccNo);
                                        cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }

                                }




                                if (objlist.TblRowNo == 0)
                                {
                                    CN.Open();
                                    using (SqlCommand cmdd = new SqlCommand("GetFedrationAllAccounts", CN))
                                    {
                                        cmdd.CommandType = CommandType.StoredProcedure;
                                        cmdd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmdd.Parameters.AddWithValue("@BranchID", "1");
                                        cmdd.Parameters.AddWithValue("@BatchNo", objlist.BranchID);

                                        SqlDataReader dr = cmdd.ExecuteReader();
                                        while (dr.Read())
                                        {
                                            string FedMemberID = "";
                                            string FedAccNo = dr["AccNo"].ToString();
                                            string FedLdName = dr["LdName"].ToString();
                                            string FedGpName = dr["GpName"].ToString();
                                            string FedNature = dr["Nature"].ToString();
                                            double InstAmount = 0;

                                            if (dr["AccNo"].ToString() != "")
                                            {
                                                FedMemberID = dr["MemberId"].ToString();

                                            }
                                            FedLdName = FedLdName.Trim();

                                            if (FedLdName == "Saving Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnSBAmtTotal);

                                            }
                                            else if (FedLdName == "Compulsory Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdncpAmtTotal);
                                            }
                                            else if (FedLdName == "LIC Account")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnLICAmtTotal);
                                            }
                                            else if (FedLdName == "Business Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnBusinessLoanTotal);
                                            }
                                            else if (FedLdName == "Education Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnEducationLoanTotal);
                                            }
                                            else if (FedLdName == "Marriage Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMarriageLoanTotal);
                                            }
                                            else if (FedLdName == "Housing Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnHousingLoanTotal);
                                            }
                                            else if (FedLdName == "Vehical Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnVehicalLoanTotal);
                                            }
                                            else if (FedLdName == "Medical Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMedicalLoanTotal);
                                            }
                                            else if (FedLdName == "Miscleneaous Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMiscleneaousLoanTotal);
                                            }
                                            else if (FedLdName == "Business Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnBusinessLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Housing Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnHousingLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Education Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnEducationLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Vehical Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnVehicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Marriage Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMarriageLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Medical Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMedicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Miscleneaous Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnMiscleneaousLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Housing Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecHousingLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Business Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecBusinessLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Education Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecEducationLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Vehicle Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecVehicalLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Marriage Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMarriageLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Medical loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMedicalLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Miscleneaous Loan")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMiscleneaousLoanTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Business Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecBusinessLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Housing Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecHousingLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Education Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecEducationLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Vehicle Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecVehicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Marriage Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMarriageLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Medical loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMedicalLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Interest Received On Miscleneaous Loan Flat")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnInstRecMiscleneaousLoanFlatTotal);
                                            }
                                            else if (FedLdName == "Panalty Ac")
                                            {
                                                InstAmount = Convert.ToDouble(objlist.HdnPanaltyAccAmtTotal);
                                            }

                                            if (Convert.ToDouble(InstAmount) > 0)
                                            {
                                                using (SqlCommand cmd = new SqlCommand("InsertTotalDepositAccNoWiseFedrationBulk", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                    cmd.Parameters.AddWithValue("@VType", "R");
                                                    cmd.Parameters.AddWithValue("@Nature", FedNature);
                                                    cmd.Parameters.AddWithValue("@MemberId", FedMemberID);
                                                    cmd.Parameters.AddWithValue("@AccNo", FedAccNo);
                                                    cmd.Parameters.AddWithValue("@AccType", FedLdName);
                                                    cmd.Parameters.AddWithValue("@Amount", InstAmount);
                                                    cmd.Parameters.AddWithValue("@TransactionBy", objlist.TransByID);
                                                    cmd.Parameters.AddWithValue("@ApproveDate", DBNull.Value);
                                                    cmd.Parameters.AddWithValue("@Status", "O");
                                                    cmd.Parameters.AddWithValue("@UserID", objlist.UserId);
                                                    cmd.Parameters.AddWithValue("@Compid", objlist.Compid);
                                                    cmd.Parameters.AddWithValue("@BranchID", "1");
                                                    cmd.Parameters.AddWithValue("@SHGBranchID", objlist.BranchID);
                                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                    cmd.Parameters.AddWithValue("@MeettingID", objlist.MaturityAmt);
                                                    cmd.Transaction = objTrans;
                                                    cmd.ExecuteNonQuery();

                                                }
                                            }



                                        }
                                        dr.Close();
                                        CN.Close();
                                    }
                                    CN.Close();

                                }



                                if (RowAffect > 0)
                                {
                                    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    objTrans.Commit();
                                }
                            }

                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = appmax,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }
        public static string FedrationTransByID;
       //   [Route("api/InsertRecieptFedration")]
      //     [HttpPost]
        public List<FormSubmision> InsertRecieptFedration(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        if (objlist.BtnText == "SAVE")
                        {



                            con.Open();
                            objTrans = con.BeginTransaction();

                            if (objlist.TblRowNo == 0)
                            {

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                                FedrationTransByID = app.GetFedretionTrasactionBy(objlist.Compid, objlist.BranchID, objlist.TransByIDText);

                            }



                            if (FedrationTransByID == "")
                            {



                            }
                            else
                            {
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {

                                    if (objlist.TblRowNo == 0)
                                    {
                                        using (SqlCommand cmd = new SqlCommand("CloseStatusonMemberFedretionDepositTable", con))
                                        {
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            cmd.Parameters.AddWithValue("@BranchID", objlist.ShareQty);
                                            cmd.Parameters.AddWithValue("@AppTransNo", objlist.ShareRate);
                                            cmd.Parameters.AddWithValue("@ApproveDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                                            cmd.Transaction = objTrans;
                                            RowAffect = cmd.ExecuteNonQuery();

                                        }
                                    }




                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", FedrationTransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }
                                //if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                                //{
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);

                                        if (objlist.MemberID == "" || objlist.MemberID == null)
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                        }
                                        else
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TblAccNo);
                                        }


                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", FedrationTransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }

                                if (objlist.Particuler == "Loan processing fess Ac")
                                {
                                    AppTransactionNoClass app = new AppTransactionNoClass();
                                    FedrationLoanChargeled = app.GetSHGAccNoBySubGroupCode(objlist.Compid, "1", objlist.ShareQty, "127");
                                    FedrationTransByID = app.GetSHGTransbyIDBYFedrationID(objlist.Compid, "1", objlist.ShareQty, FedrationTransByID);


                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "W");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + FedrationLoanChargeled + " On Loans ");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                        cmd.Parameters.AddWithValue("@Narration", "" + FedrationLoanChargeled + " On Loan");
                                        cmd.Parameters.AddWithValue("@LedgerId", FedrationTransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", FedrationLoanChargeled);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@MeettingID", "");
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "W");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "To " + FedrationLoanChargeled);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                        cmd.Parameters.AddWithValue("@Narration", "" + FedrationLoanChargeled + " On Loan");
                                        cmd.Parameters.AddWithValue("@LedgerId", FedrationLoanChargeled);

                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", FedrationTransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@MeettingID", "");
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }

                                }


                                //}


                            }


                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }
                        }


                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }



       //   [Route("api/InsertRecieptFedrationNew")]
      //     [HttpPost]
        public List<FormSubmision> InsertRecieptFedrationNew(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        if (objlist.BtnText == "SAVE")
                        {



                            con.Open();
                            objTrans = con.BeginTransaction();

                            if (objlist.TblRowNo == 0)
                            {

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                                FedrationTransByID = app.GetFedretionTrasactionBy(objlist.Compid, objlist.BranchID, objlist.TransByIDText);

                            }



                            if (FedrationTransByID == "")
                            {



                            }
                            else
                            {
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {

                                    if (objlist.TblRowNo == 0)
                                    {
                                        using (SqlCommand cmd = new SqlCommand("CloseStatusonMemberFedretionDepositTable", con))
                                        {
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            cmd.Parameters.AddWithValue("@BranchID", objlist.ShareQty);
                                            cmd.Parameters.AddWithValue("@AppTransNo", objlist.ShareRate);
                                            cmd.Parameters.AddWithValue("@ApproveDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));

                                            cmd.Transaction = objTrans;
                                            RowAffect = cmd.ExecuteNonQuery();

                                        }
                                    }




                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", FedrationTransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }
                                //if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                                //{
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);

                                        if (objlist.MemberID == "" || objlist.MemberID == null)
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                        }
                                        else
                                        {
                                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TblAccNo);
                                        }


                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", FedrationTransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }

                                if (objlist.Particuler == "Loan processing fess Ac")
                                {
                                    AppTransactionNoClass app = new AppTransactionNoClass();
                                    FedrationLoanChargeled = app.GetSHGAccNoBySubGroupCode(objlist.Compid, "1", objlist.ShareQty, "127");
                                    FedrationTransByID = app.GetSHGTransbyIDBYFedrationID(objlist.Compid, "1", objlist.ShareQty, FedrationTransByID);


                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "W");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + FedrationLoanChargeled + " On Loans ");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                        cmd.Parameters.AddWithValue("@Narration", "" + FedrationLoanChargeled + " On Loan");
                                        cmd.Parameters.AddWithValue("@LedgerId", FedrationTransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", FedrationLoanChargeled);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@MeettingID", "");
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersRecieptBulkLoanDis", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "W");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "To " + FedrationLoanChargeled);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                        cmd.Parameters.AddWithValue("@Narration", "" + FedrationLoanChargeled + " On Loan");
                                        cmd.Parameters.AddWithValue("@LedgerId", FedrationLoanChargeled);

                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", FedrationTransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@MeettingID", "");
                                        cmd.Transaction = objTrans;

                                        RowAffect = cmd.ExecuteNonQuery();

                                    }

                                }


                                //}


                            }


                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }
                        }


                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }


       //   [Route("api/InsertLoanRequestAmtFedration")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanRequestAmtFedration(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        if (objlist.BtnText == "SAVE")
                        {



                            con.Open();
                            objTrans = con.BeginTransaction();

                            if (objlist.TblRowNo == 0)
                            {

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                                FedrationTransByID = app.GetFedretionTrasactionBy(objlist.Compid, objlist.BranchID, objlist.TransByIDText);

                            }



                            if (FedrationTransByID == "")
                            {



                            }
                            else
                            {
                                if (Convert.ToDouble(objlist.TotalCreditAmt) > 0)
                                {

                                    if (objlist.TblRowNo == 0)
                                    {


                                    }


                                }

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "R");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.MaturityAmt);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.ShareRate);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "R");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Debit");


                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TblInsAmt);



                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.ShareRate);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                    cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                    cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                                using (SqlCommand cmd = new SqlCommand("CloseStatusonLoanGUARNTORonDate", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.ShareRate);
                                    cmd.Parameters.AddWithValue("@MeetingDate", DateTime.ParseExact(objlist.Particuler, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@ApproveDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LrApprovedby", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@Remark", objlist.Narration);
                                    cmd.Parameters.AddWithValue("@LoanId", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.VNoMemberID);
                                    cmd.Parameters.AddWithValue("@FedTransBy", objlist.TransByID);
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "R");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By " + objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                        cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "0");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                        cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                        cmd.Parameters.AddWithValue("@VNoLoanID", objlist.VNoLoanID);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }


                                //}


                            }


                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }
                        }


                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }
        public static string MeetingMaxNo;
        public static string MeetingMaxID;
       //   [Route("api/InsertImportExcelRecieptBulk")]
      //     [HttpPost]
        public List<FormSubmision> InsertImportExcelRecieptBulk(InsertRecieptBulk objlist)
        {
            int RowAffect = 0;

            if (objlist.MemberName == null)
            {
                objlist.MemberName = "";
            }

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.SBAccNo == null)
            {
                objlist.SBAccNo = "";
            }
            if (objlist.SBAmt == null)
            {
                objlist.SBAmt = "0";
            }
            if (objlist.CPAccNo == null)
            {
                objlist.CPAccNo = "";
            }
            if (objlist.cpAmt == null)
            {
                objlist.cpAmt = "0";
            }

            if (objlist.LICAccNo == null)
            {
                objlist.LICAccNo = "";
            }
            if (objlist.LICAmt == null)
            {
                objlist.LICAmt = "0";
            }

            if (objlist.LoanAAccNo == null)
            {
                objlist.LoanAAccNo = "";
            }
            if (objlist.LoanAccAAmt == null)
            {
                objlist.LoanAccAAmt = "0";
            }

            if (objlist.InstRecLoanAAccNo == null)
            {
                objlist.InstRecLoanAAccNo = "";
            }
            if (objlist.InstRecOnLoanAAmt == null)
            {
                objlist.InstRecOnLoanAAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.PanaltyAccNo == null)
            {
                objlist.PanaltyAccNo = "";
            }
            if (objlist.PanaltyAmt == null)
            {
                objlist.PanaltyAmt = "";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        AppTransactionNoClass app = new AppTransactionNoClass();
                        MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                        MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);

                        if (objlist.TblRowNo == 0)
                        {

                            //AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);


                            //MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                            //MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                        }








                        if (objlist.SBAccNo != "" && Convert.ToDouble(objlist.SBAmt) > 0)
                        {


                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.SBAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.SBAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }





                        }


                        if (objlist.CPAccNo != "" && Convert.ToDouble(objlist.cpAmt) > 0)
                        {



                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.cpAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.CPAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }





                        }


                        if (objlist.LICAccNo != "" && Convert.ToDouble(objlist.LICAmt) > 0)
                        {


                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.LICAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.LICAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }




                        }


                        if (objlist.LoanAAccNo != "" && Convert.ToDouble(objlist.LoanAccAAmt) > 0)
                        {



                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.LoanAccAAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanAAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }





                        }


                        if (objlist.InstRecLoanAAccNo != "" && Convert.ToDouble(objlist.InstRecOnLoanAAmt) > 0)
                        {



                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanAAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.InstRecLoanAAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }





                        }


                        if (objlist.LoanBAccNo != "" && Convert.ToDouble(objlist.LoanAccBAmt) > 0)
                        {




                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.LoanAccBAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.LoanBAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }





                        }


                        if (objlist.InstRecLoanBAccNo != "" && Convert.ToDouble(objlist.InstRecOnLoanBAmt) > 0)
                        {



                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.InstRecOnLoanBAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.InstRecLoanBAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }





                        }




                        if (objlist.PanaltyAccNo != "" && Convert.ToDouble(objlist.PanaltyAmt) > 0)
                        {



                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.PanaltyAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.PanaltyAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);

                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }





                        }










                        if (Convert.ToDouble(objlist.RowTotal) > 0)
                        {

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchersReciept", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "R");
                                cmd.Parameters.AddWithValue("@Nature", "Debit");
                                //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.RowTotal);
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);

                                if (objlist.MemberID == "" || objlist.MemberID == null)
                                {
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("@Particular", "To Bulk posting " + objlist.MemberName);
                                }


                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.RowTotal);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);
                                cmd.Parameters.AddWithValue("@VNoMemberID", objlist.VNoMemberID);
                                cmd.Transaction = objTrans;
                                RowAffect = cmd.ExecuteNonQuery();

                            }

                        }









                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = appmax,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }

       //   [Route("api/InsertWithDrawl")]
      //     [HttpPost]
        public List<FormSubmision> InsertWithDrawl(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null)
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }


            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                            MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "W", objlist.FyId);
                            MaxRecNo = app.GetMaxPaymentNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                        }

                        if (objlist.TblAccNo.ToString().Length > 3)
                        {

                            if (objlist.TblAccNo.ToString().Substring(0, 3) == "101")
                            {
                                using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                {
                                    if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                    {
                                        if (Convert.ToDouble(objlist.ShareRate) == 0)
                                        {
                                            objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / 100), 0).ToString();
                                        }
                                        else
                                        {
                                            objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();
                                        }




                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                        cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@SNo", "0");
                                        cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@TransType", "Purchase");
                                        cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();
                                    }
                                }
                            }
                            else if (objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                            {
                                using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                {
                                    if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                        cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@SNo", "0");
                                        cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@TransType", "Purchase");
                                        cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();
                                    }

                                }
                            }
                        }
                        if (objlist.TransByIDText == "Cash" || objlist.TransByIDText.ToString().Substring(0, 3) == "102" || objlist.TransByIDText.ToString().Substring(0, 3) == "103")
                        {
                            if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                            }

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "W");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.Particuler);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                cmd.Transaction = objTrans;
                                RowAffect = cmd.ExecuteNonQuery();

                            }




                        }
                        else
                        {
                            using (SqlCommand cmd = new SqlCommand("SP_InsertBankRecancelation", con))
                            {
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                    //cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    //cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    if (objlist.TblAccNo.ToString().Substring(0, 3) == "101" || objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                                    {
                                        cmd.Parameters.AddWithValue("@shareQty", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@shareprice", objlist.ShareRate);
                                    }
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();
                                }
                            }
                            if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                            {

                                using (SqlCommand cmd = new SqlCommand("SP_InsertBankRecancelation", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    //cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.Particuler);
                                    //cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    //cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }

                        }







                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }


       //   [Route("api/InsertLoanTopup")]
      //     [HttpPost]
        public List<FormSubmision> InsertLoanTopup(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null)
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }


            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                            MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "W", objlist.FyId);
                            MaxRecNo = app.GetMaxPaymentNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                        }



                        if (objlist.TransByIDText == "Cash" || objlist.TransByIDText.ToString().Substring(0, 3) == "102" || objlist.TransByIDText.ToString().Substring(0, 3) == "103")
                        {
                            if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To Loan Topup " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", "Loan Topup");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                            }

                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "W");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.Particuler);
                                cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", "Loan Topup");
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                cmd.Transaction = objTrans;
                                RowAffect = cmd.ExecuteNonQuery();

                            }




                        }
                        else
                        {
                            using (SqlCommand cmd = new SqlCommand("SP_InsertBankRecancelation", con))
                            {
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "W");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To Loan Topup " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                    //cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    //cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", "Loan Topup");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    if (objlist.TblAccNo.ToString().Substring(0, 3) == "101" || objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                                    {
                                        cmd.Parameters.AddWithValue("@shareQty", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@shareprice", objlist.ShareRate);
                                    }
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();
                                }
                            }
                            if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                            {

                                using (SqlCommand cmd = new SqlCommand("SP_InsertBankRecancelation", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "R");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    //cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.Particuler);
                                    //cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", "Loan Topup");
                                    //cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }

                        }







                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }


       //   [Route("api/InsertContra")]
      //     [HttpPost]
        public List<FormSubmision> InsertContra(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null)
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }

            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                            MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                            MaxRecNo = app.GetMaxContraNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                        }


                        if (objlist.TransByIDText == "Cash" || objlist.TransByIDText.ToString().Substring(0, 3) == "102" || objlist.TransByIDText.ToString().Substring(0, 3) == "103")
                        {
                            if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "C");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);


                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                            }
                            if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "C");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                    cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }


                        }
                        else
                        {
                            using (SqlCommand cmd = new SqlCommand("SP_InsertBankRecancelation", con))
                            {
                                if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "C");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                    //cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    //cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");
                                    //if (objlist.TblAccNo.ToString().Substring(0, 3) == "101" || objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                                    //{
                                    //    cmd.Parameters.AddWithValue("@shareQty", objlist.ShareQty);
                                    //    cmd.Parameters.AddWithValue("@shareprice", objlist.ShareRate);
                                    //}
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();
                                }
                            }
                            if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                            {

                                using (SqlCommand cmd = new SqlCommand("SP_InsertBankRecancelation", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "C");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                    //cmd.Parameters.AddWithValue("@CloseNature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                                    //cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                    cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                    //cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "0");

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }

                        }







                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }


       //   [Route("api/InsertJournal")]
      //     [HttpPost]
        public List<FormSubmision> InsertJournal(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null)
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }


            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();

                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                            MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "J", objlist.FyId);
                            MaxRecNo = app.GetMaxJournalNo(objlist.Compid, objlist.BranchID, objlist.FyId, "J");
                        }

                        if (objlist.MemberID == null)
                        {




                        }
                        else
                        {
                            if (objlist.TblAccNo.ToString().Substring(0, 3) == "101")
                            {
                                using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                {
                                    if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                    {
                                        if (Convert.ToDouble(objlist.ShareRate) == 0)
                                        {
                                            objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / 100), 0).ToString();
                                        }
                                        else
                                        {
                                            objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();
                                        }

                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                        cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@SNo", "0");
                                        cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@TransType", "Sale");
                                        cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();
                                    }
                                }
                            }
                            else if (objlist.TblAccNo.ToString().Substring(0, 3) == "112")
                            {
                                using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                {
                                    if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccNo);
                                        cmd.Parameters.AddWithValue("@AccType", objlist.TblAccNo.ToString().Substring(0, 3));
                                        cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@SNo", "0");
                                        cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@TransType", "Sale");
                                        cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TblAccNo);

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();
                                    }

                                }
                            }
                        }

                        if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                        {
                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@VType", "J");
                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                                cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                                cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                                cmd.Parameters.AddWithValue("@LedgerId", objlist.TblAccNo);
                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@AgentId", "0");
                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                cmd.Transaction = objTrans;
                                RowAffect = cmd.ExecuteNonQuery();

                            }
                        }
                        //if (objlist.TblRowNo == Convert.ToInt32(objlist.TblRecieptDepositRowCount) - 1)
                        //{
                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", "J");
                            cmd.Parameters.AddWithValue("@Nature", "Debit");
                            //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                            cmd.Parameters.AddWithValue("@BankName", objlist.BankName);
                            cmd.Parameters.AddWithValue("@CloseNature", objlist.CloseNature);
                            cmd.Parameters.AddWithValue("@Particular", "To " + objlist.Particuler);
                            cmd.Parameters.AddWithValue("@ClosingBal", objlist.TblDepositAmt);
                            cmd.Parameters.AddWithValue("@BranchName", objlist.BankName);
                            cmd.Parameters.AddWithValue("@CheckNumber", objlist.ChequeNo);
                            cmd.Parameters.AddWithValue("@Narration", objlist.Narration);
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TblAccNo);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", "0");
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            RowAffect = cmd.ExecuteNonQuery();

                        }

                        //}

                        if (objlist.TransByID.Length > 3)
                        {
                            if (objlist.TransByID.ToString().Substring(0, 3) == "101")
                            {
                                using (SqlCommand cmd = new SqlCommand("InsertLedgerAccountTransaction", con))
                                {
                                    if (Convert.ToDouble(objlist.TblDepositAmt) > 0)
                                    {
                                        if (Convert.ToDouble(objlist.ShareRate) == 0)
                                        {
                                            objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / 100), 0).ToString();
                                        }
                                        else
                                        {
                                            objlist.ShareQty = Math.Round((Convert.ToDouble(objlist.TblDepositAmt) / Convert.ToDouble(objlist.ShareRate)), 0).ToString();
                                        }


                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TblDepositAmt);
                                        cmd.Parameters.AddWithValue("@AccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@AccType", objlist.TransByID.ToString().Substring(0, 3));
                                        cmd.Parameters.AddWithValue("@Opendate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Vno", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@SNo", "0");
                                        cmd.Parameters.AddWithValue("@Qty", objlist.ShareQty);
                                        cmd.Parameters.AddWithValue("@Price", objlist.ShareRate);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@TransType", "Purchase");
                                        cmd.Parameters.AddWithValue("@Particular", "BY " + objlist.TransByID);

                                        cmd.Transaction = objTrans;
                                        cmd.ExecuteNonQuery();
                                    }
                                }

                            }
                        }








                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }

        public static string VType;
        public static string Narration;
        public static string MaxFDNo;
       //   [Route("api/InsertFD")]
      //     [HttpPost]
        public List<FormSubmision> InsertFD(InsertFD objlist)
        {
            int RowAffect = 0;

            if (objlist.Remarks == null)
            {
                objlist.Remarks = "";
            }
            if (objlist.NomineeName == null)
            {
                objlist.NomineeName = "";
            }
            if (objlist.CloseNature == null)
            {
                objlist.CloseNature = "";
            }
            if (objlist.ClNature == null)
            {
                objlist.ClNature = "";
            }



            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        AppTransactionNoClass app = new AppTransactionNoClass();
                        appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                        AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                        MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "W", objlist.FyId);
                        MaxRecNo = app.GetMaxFDTypeNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                        MaxFDNo = app.GetMaxFDNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");

                        if (BtnText == "Renew")
                        {

                        }
                        else
                        {
                            using (SqlCommand cmd = new SqlCommand("SP_InsertFD", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@PlanType", objlist.FDType);
                                cmd.Parameters.AddWithValue("@LoanType", objlist.FDType);
                                cmd.Parameters.AddWithValue("@AccType", "106");
                                cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                                cmd.Parameters.AddWithValue("@MaturityDate", DateTime.ParseExact(objlist.MaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@MaturityAmount", objlist.MaturityAmt);
                                cmd.Parameters.AddWithValue("@TransType", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@BankName", "");
                                cmd.Parameters.AddWithValue("@BranchName", "");
                                cmd.Parameters.AddWithValue("@ChequeIfsc", "");
                                cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                                cmd.Parameters.AddWithValue("@NomineeRelation", objlist.ReletionID);
                                cmd.Parameters.AddWithValue("@FdAmount", objlist.FDAmount);
                                cmd.Parameters.AddWithValue("@Period", objlist.FDPeriod);
                                cmd.Parameters.AddWithValue("@PeriodIn", objlist.FDPeriodTypeText);
                                cmd.Parameters.AddWithValue("@InterestAmt", objlist.InterestAmt);
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@AccNo", MaxFDNo);
                                cmd.Parameters.AddWithValue("@AccNoDisplay", "FD" + MaxFDNo.Substring(3, MaxFDNo.Length - 3));
                                cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplayMemberID);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@FyID", objlist.FyId);
                                cmd.Parameters.AddWithValue("@EffectiveDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@TransactionType", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@OpeningAmount", objlist.FDAmount);
                                cmd.Parameters.AddWithValue("@ShareQty", "0");
                                cmd.Parameters.AddWithValue("@SharePrice", "0");
                                cmd.Parameters.AddWithValue("@Particular", "Account Open");
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);



                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                        }
                        using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                        {
                            cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                            cmd.Parameters.AddWithValue("@GpName", "Fixed Deposite Account");
                            cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LdName", objlist.MemberName);
                            cmd.Parameters.AddWithValue("@OpeningBal", objlist.FDAmount);
                            cmd.Parameters.AddWithValue("@EmailId", "");
                            cmd.Parameters.AddWithValue("@AccNo", MaxFDNo);
                            cmd.Parameters.AddWithValue("@AccType", "Fixed Deposite Account");
                            cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@SubGoupID", objlist.SubGroupID);
                            cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();

                        }
                        using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                        {
                            cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                            cmd.Parameters.AddWithValue("@GpName", "Provision For Fd");
                            cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LdName", objlist.MemberName);
                            cmd.Parameters.AddWithValue("@OpeningBal", objlist.FDAmount);
                            cmd.Parameters.AddWithValue("@EmailId", "");
                            cmd.Parameters.AddWithValue("@AccNo", "Provision For " + MaxFDNo);
                            cmd.Parameters.AddWithValue("@AccType", "Fixed Deposite Account");
                            cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@SubGoupID", objlist.SubGroupID);
                            cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();

                        }


                        if (objlist.hdnTransByGPName == "Cash In Hand" || objlist.hdnTransByGPName == "Bank Group" || objlist.hdnTransByGPName == "Bank Group ")
                        {
                            VType = "R";
                            Narration = "Opening Amount";
                        }
                        else
                        {

                            VType = "J";
                            Narration = "Journal Entry";
                        }


                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", VType);
                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                            cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.FDAmount);
                            cmd.Parameters.AddWithValue("@ClosingBal", "0");
                            cmd.Parameters.AddWithValue("@BankName", "");
                            cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                            cmd.Parameters.AddWithValue("@BranchName", "");
                            cmd.Parameters.AddWithValue("@CheckNumber", "");
                            cmd.Parameters.AddWithValue("@Narration", Narration);
                            cmd.Parameters.AddWithValue("@LedgerId", MaxFDNo);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            RowAffect = cmd.ExecuteNonQuery();

                        }


                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", VType);
                            cmd.Parameters.AddWithValue("@Nature", "Debit");
                            //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.FDAmount);
                            cmd.Parameters.AddWithValue("@BankName", "");
                            cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                            cmd.Parameters.AddWithValue("@Particular", "To " + MaxFDNo);
                            cmd.Parameters.AddWithValue("@ClosingBal", "0");
                            cmd.Parameters.AddWithValue("@BranchName", "");
                            cmd.Parameters.AddWithValue("@CheckNumber", "");
                            cmd.Parameters.AddWithValue("@Narration", Narration);
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", MaxFDNo);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            RowAffect = cmd.ExecuteNonQuery();

                        }










                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxFDNo,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxFDNo,

            });
            return objDept;
        }

       //   [Route("api/InsertRD")]
      //     [HttpPost]
        public List<FormSubmision> InsertRD(InsertFD objlist)
        {
            int RowAffect = 0;

            if (objlist.Remarks == null)
            {
                objlist.Remarks = "";
            }
            if (objlist.NomineeName == null)
            {
                objlist.NomineeName = "";
            }
            if (objlist.CloseNature == null)
            {
                objlist.CloseNature = "";
            }
            if (objlist.ClNature == null)
            {
                objlist.ClNature = "";
            }



            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        AppTransactionNoClass app = new AppTransactionNoClass();
                        appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                        AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                        MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "W", objlist.FyId);
                        MaxRecNo = app.GetMaxRDTypeNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                        MaxFDNo = app.GetMaxRDNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");

                        if (BtnText == "Renew")
                        {

                        }
                        else
                        {
                            using (SqlCommand cmd = new SqlCommand("SP_InsertRD", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@PlanType", objlist.FDType);
                                cmd.Parameters.AddWithValue("@LoanType", objlist.FDType);
                                cmd.Parameters.AddWithValue("@AccType", "107");
                                cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                                cmd.Parameters.AddWithValue("@MaturityDate", DateTime.ParseExact(objlist.MaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@MaturityAmount", objlist.MaturityAmt);
                                cmd.Parameters.AddWithValue("@TransType", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@BankName", "");
                                cmd.Parameters.AddWithValue("@BranchName", "");
                                cmd.Parameters.AddWithValue("@ChequeIfsc", "");
                                cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                                cmd.Parameters.AddWithValue("@NomineeRelation", objlist.ReletionID);
                                cmd.Parameters.AddWithValue("@RdAmount", objlist.FDAmount);
                                cmd.Parameters.AddWithValue("@Period", objlist.FDPeriod);
                                cmd.Parameters.AddWithValue("@PeriodIn", objlist.FDPeriodTypeText);
                                cmd.Parameters.AddWithValue("@InterestAmt", objlist.InterestAmt);
                                cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@AccNo", MaxFDNo);
                                cmd.Parameters.AddWithValue("@AccNoDisplay", "RD" + MaxFDNo.Substring(3, MaxFDNo.Length - 3));
                                cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplayMemberID);
                                cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                cmd.Parameters.AddWithValue("@FyID", objlist.FyId);
                                cmd.Parameters.AddWithValue("@EffectiveDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                cmd.Parameters.AddWithValue("@TransactionType", objlist.TransByID);
                                cmd.Parameters.AddWithValue("@OpeningAmount", objlist.FDAmount);
                                cmd.Parameters.AddWithValue("@ShareQty", "0");
                                cmd.Parameters.AddWithValue("@SharePrice", "0");
                                cmd.Parameters.AddWithValue("@Particular", "Account Open");
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@CummulativeAmount", objlist.FDAmount);
                                cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.Remarks);
                                cmd.Parameters.AddWithValue("@NomineeDOB", DateTime.ParseExact(objlist.Particuler, @"dd-MM-yyyy", CultureInfo.InvariantCulture));




                                cmd.Transaction = objTrans;
                                cmd.ExecuteNonQuery();

                            }
                        }
                        using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                        {
                            cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                            cmd.Parameters.AddWithValue("@GpName", "Reccuring Deposite Account");
                            cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LdName", objlist.MemberName);
                            cmd.Parameters.AddWithValue("@OpeningBal", objlist.FDAmount);
                            cmd.Parameters.AddWithValue("@EmailId", "");
                            cmd.Parameters.AddWithValue("@AccNo", MaxFDNo);
                            cmd.Parameters.AddWithValue("@AccType", "Reccuring Deposite Account");
                            cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@SubGoupID", objlist.SubGroupID);
                            cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();

                        }
                        using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                        {
                            cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                            cmd.Parameters.AddWithValue("@GpName", "Provision For RD");
                            cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LdName", objlist.MemberName);
                            cmd.Parameters.AddWithValue("@OpeningBal", objlist.FDAmount);
                            cmd.Parameters.AddWithValue("@EmailId", "");
                            cmd.Parameters.AddWithValue("@AccNo", "Provision For " + MaxFDNo);
                            cmd.Parameters.AddWithValue("@AccType", "Fixed Deposite Account");
                            cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@SubGoupID", objlist.SubGroupID);
                            cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                            cmd.Transaction = objTrans;
                            cmd.ExecuteNonQuery();

                        }


                        if (objlist.hdnTransByGPName == "Cash In Hand" || objlist.hdnTransByGPName == "Bank Group" || objlist.hdnTransByGPName == "Bank Group ")
                        {
                            VType = "R";
                            Narration = "Opening Amount";
                        }
                        else
                        {

                            VType = "J";
                            Narration = "Journal Entry";
                        }


                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", VType);
                            cmd.Parameters.AddWithValue("@Nature", "Credit");
                            cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.FDAmount);
                            cmd.Parameters.AddWithValue("@ClosingBal", "0");
                            cmd.Parameters.AddWithValue("@BankName", "");
                            cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                            cmd.Parameters.AddWithValue("@BranchName", "");
                            cmd.Parameters.AddWithValue("@CheckNumber", "");
                            cmd.Parameters.AddWithValue("@Narration", Narration);
                            cmd.Parameters.AddWithValue("@LedgerId", MaxFDNo);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            RowAffect = cmd.ExecuteNonQuery();

                        }


                        using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@VType", VType);
                            cmd.Parameters.AddWithValue("@Nature", "Debit");
                            //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.FDOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@Amount", objlist.FDAmount);
                            cmd.Parameters.AddWithValue("@BankName", "");
                            cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                            cmd.Parameters.AddWithValue("@Particular", "To " + MaxFDNo);
                            cmd.Parameters.AddWithValue("@ClosingBal", "0");
                            cmd.Parameters.AddWithValue("@BranchName", "");
                            cmd.Parameters.AddWithValue("@CheckNumber", "");
                            cmd.Parameters.AddWithValue("@Narration", Narration);
                            cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                            cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                            cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                            cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                            cmd.Parameters.AddWithValue("@LedgerAccNo", MaxFDNo);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                            cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                            cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                            cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                            cmd.Transaction = objTrans;
                            RowAffect = cmd.ExecuteNonQuery();

                        }










                        if (RowAffect > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                            objTrans.Commit();
                        }

                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxFDNo,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxFDNo,

            });
            return objDept;
        }

       //   [Route("api/InsertDC")]
      //     [HttpPost]
        public List<FormSubmision> InsertDC(InsertDC objlist)
        {
            int RowAffect = 0;

            if (objlist.Remarks == null)
            {
                objlist.Remarks = "";
            }
            if (objlist.NomineeName == null)
            {
                objlist.NomineeName = "";
            }
            if (objlist.CloseNature == null)
            {
                objlist.CloseNature = "";
            }
            if (objlist.ClNature == null)
            {
                objlist.ClNature = "";
            }
            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChqueNo == null)
            {
                objlist.ChqueNo = "";
            }
            if (objlist.TotalCargesAmt == null)
            {
                objlist.TotalCargesAmt = "0";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                            MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "W", objlist.FyId);
                            MaxRecNo = app.GetMaxDCTypeNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                            MaxFDNo = app.GetMaxDCNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                        }
                        if (BtnText == "Renew")
                        {

                        }
                        else
                        {
                            if (objlist.TblRowNo == 0)
                            {

                                using (SqlCommand cmd = new SqlCommand("SP_InsertDC", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@PlanType", objlist.DCType);
                                    cmd.Parameters.AddWithValue("@LoanType", objlist.DCType);
                                    cmd.Parameters.AddWithValue("@AccType", "108");
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                                    cmd.Parameters.AddWithValue("@MaturityDate", DateTime.ParseExact(objlist.MaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@MaturityAmount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@TransType", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@ChequeIfsc", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                                    cmd.Parameters.AddWithValue("@NomineeRelation", objlist.ReletionID);
                                    cmd.Parameters.AddWithValue("@DCAmount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@Period", objlist.DCPeriod);
                                    cmd.Parameters.AddWithValue("@PeriodIn", objlist.DCPeriodTypeText);
                                    cmd.Parameters.AddWithValue("@InterestAmt", objlist.InterestAmt);
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@AccNo", MaxFDNo);
                                    cmd.Parameters.AddWithValue("@AccNoDisplay", "DC" + MaxFDNo.Substring(3, MaxFDNo.Length - 3));
                                    cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplayMemberID);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@FyID", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@EffectiveDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@TransactionType", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@OpeningAmount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@ShareQty", "0");
                                    cmd.Parameters.AddWithValue("@SharePrice", "0");
                                    cmd.Parameters.AddWithValue("@Particular", "Account Open");
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@MonthYear", "");
                                    cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.DCAmount);



                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();


                                }
                                using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                                {
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@GpName", "DC Account");
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LdName", objlist.MemberName);
                                    cmd.Parameters.AddWithValue("@OpeningBal", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@EmailId", "");
                                    cmd.Parameters.AddWithValue("@AccNo", MaxFDNo);
                                    cmd.Parameters.AddWithValue("@AccType", "DC Account");
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@SubGoupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                                {
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@GpName", "Provision For DC");
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LdName", objlist.MemberName);
                                    cmd.Parameters.AddWithValue("@OpeningBal", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@EmailId", "");
                                    cmd.Parameters.AddWithValue("@AccNo", "Provision For " + MaxFDNo);
                                    cmd.Parameters.AddWithValue("@AccType", "DC Account");
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@SubGoupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();

                                }


                                if (objlist.hdnTransByGPName == "Cash In Hand" || objlist.hdnTransByGPName == "Bank Group" || objlist.hdnTransByGPName == "Bank Group ")
                                {
                                    VType = "R";
                                    Narration = "Opening Amount";
                                }
                                else
                                {

                                    VType = "J";
                                    Narration = "Journal Entry";
                                }


                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", VType);
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Daily Collectoin Opening");
                                    cmd.Parameters.AddWithValue("@LedgerId", MaxFDNo);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }


                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", VType);
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    //  cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.MaturityAmt);
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", objlist.ClNature);
                                    cmd.Parameters.AddWithValue("@Particular", "To DC No " + MaxFDNo + " Open");
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Daily Collection Opening");
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", MaxFDNo);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }




                            }

                            if (Convert.ToDouble(objlist.TotalCargesAmt) > 0)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", VType);
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargeAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Daily Collectoin Opening");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.GetTblChargesLed);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }

                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxFDNo,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxFDNo,

            });
            return objDept;
        }


       //   [Route("api/InsertDCOpening")]
      //     [HttpPost]
        public List<FormSubmision> InsertDCOpening(InsertDC objlist)
        {
            int RowAffect = 0;

            if (objlist.Remarks == null)
            {
                objlist.Remarks = "";
            }
            if (objlist.NomineeName == null)
            {
                objlist.NomineeName = "";
            }
            if (objlist.CloseNature == null)
            {
                objlist.CloseNature = "";
            }
            if (objlist.ClNature == null)
            {
                objlist.ClNature = "";
            }
            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChqueNo == null)
            {
                objlist.ChqueNo = "";
            }
            if (objlist.TotalCargesAmt == null)
            {
                objlist.TotalCargesAmt = "0";
            }
            if (objlist.TransByID == null)
            {
                objlist.TransByID = "";
            }
            if (objlist.TransByIDText == null)
            {
                objlist.TransByIDText = "";
            }
            using (SqlConnection CN = new SqlConnection(Connection))
            {


                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        con.Open();
                        objTrans = con.BeginTransaction();


                        if (objlist.TblRowNo == 0)
                        {

                            AppTransactionNoClass app = new AppTransactionNoClass();
                            appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                            AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                            MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "W", objlist.FyId);
                            MaxRecNo = app.GetMaxDCTypeNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                            //MaxFDNo = app.GetMaxDCNo(objlist.Compid, objlist.BranchID, objlist.FyId, "W");
                            MaxFDNo = objlist.DCNo;
                        }
                        if (BtnText == "Renew")
                        {

                        }
                        else
                        {
                            if (objlist.TblRowNo == 0)
                            {

                                using (SqlCommand cmd = new SqlCommand("SP_InsertDC", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@PlanType", objlist.DCType);
                                    cmd.Parameters.AddWithValue("@LoanType", objlist.DCType);
                                    cmd.Parameters.AddWithValue("@AccType", "108");
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                                    cmd.Parameters.AddWithValue("@MaturityDate", DateTime.ParseExact(objlist.MaturityDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@MaturityAmount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@TransType", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@BankName", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@BranchName", objlist.BranchName);
                                    cmd.Parameters.AddWithValue("@ChequeIfsc", objlist.ChqueNo);
                                    cmd.Parameters.AddWithValue("@NomineeName", objlist.NomineeName);
                                    cmd.Parameters.AddWithValue("@NomineeRelation", objlist.ReletionID);
                                    cmd.Parameters.AddWithValue("@DCAmount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@Period", objlist.DCPeriod);
                                    cmd.Parameters.AddWithValue("@PeriodIn", objlist.DCPeriodTypeText);
                                    cmd.Parameters.AddWithValue("@InterestAmt", objlist.InterestAmt);
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@AccNo", MaxFDNo);
                                    cmd.Parameters.AddWithValue("@AccNoDisplay", "DC" + MaxFDNo.Substring(3, MaxFDNo.Length - 3));
                                    cmd.Parameters.AddWithValue("@MemberIdDisplay", objlist.DisplayMemberID);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@FyID", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@EffectiveDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@TransactionType", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@OpeningAmount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@ShareQty", "0");
                                    cmd.Parameters.AddWithValue("@SharePrice", "0");
                                    cmd.Parameters.AddWithValue("@Particular", "Account Open");
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@MonthYear", "");
                                    cmd.Parameters.AddWithValue("@InstallmentAmount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@SubGroupID", objlist.SubGroupID);



                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();


                                }
                                using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                                {
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@GpName", "DC Account");
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LdName", objlist.MemberName);
                                    cmd.Parameters.AddWithValue("@OpeningBal", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@EmailId", "");
                                    cmd.Parameters.AddWithValue("@AccNo", MaxFDNo);
                                    cmd.Parameters.AddWithValue("@AccType", "DC Account");
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@SubGoupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("Insert into Ledger(MemberId,nature,UserId,Datetime,Emailid,LdName,AccNo,InterestRate,GpName,Status,AccType,OpeningDate,Agent_Id,AppTransNo,CompID,BranchID,SubGoupID,Agent_id_Current)values(@MemberId,@Nature,@UserId,@Datetime,@Emailid,@LdName,@AccNo,@InterestRate,@GpName,'O',@AccType,@OpeningDate,@AgentId,@AppTransNo,@CompID,@BranchID,@SubGoupID,@Agent_id_Current)", con))
                                {
                                    cmd.Parameters.AddWithValue("@MemberId", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@GpName", "Provision For DC");
                                    cmd.Parameters.AddWithValue("@InterestRate", objlist.InterestRate);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LdName", objlist.MemberName);
                                    cmd.Parameters.AddWithValue("@OpeningBal", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@EmailId", "");
                                    cmd.Parameters.AddWithValue("@AccNo", "Provision For " + MaxFDNo);
                                    cmd.Parameters.AddWithValue("@AccType", "DC Account");
                                    cmd.Parameters.AddWithValue("@OpeningDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture)); //DateTime.ParseExact(objlist.OpeningDate, "MM-dd-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@SubGoupID", objlist.SubGroupID);
                                    cmd.Parameters.AddWithValue("@Agent_id_Current", objlist.AgentID);

                                    cmd.Transaction = objTrans;
                                    cmd.ExecuteNonQuery();

                                }


                                if (objlist.hdnTransByGPName == "Cash In Hand" || objlist.hdnTransByGPName == "Bank Group" || objlist.hdnTransByGPName == "Bank Group ")
                                {
                                    VType = "R";
                                    Narration = "Opening Amount";
                                }
                                else
                                {

                                    VType = "J";
                                    Narration = "Journal Entry";
                                }


                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "O");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.BankName);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.DCAmount);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Daily Collectoin Opening");
                                    cmd.Parameters.AddWithValue("@LedgerId", MaxFDNo);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }




                            }

                            if (Convert.ToDouble(objlist.TotalCargesAmt) > 0)
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", VType);
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.DCOpenDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.TodayDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.GetTblChargeAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Daily Collectoin Opening");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.GetTblChargesLed);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", objlist.AgentID);
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                            }

                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }
                        }
                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxFDNo,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxFDNo,

            });
            return objDept;
        }

        public static string CloseNature1;
        public static string CloseNature;
        public static double ClosingBal;
        public static string MaxFyID;
        public static int RowAffect = 0;
       //   [Route("api/PNLClose")]
      //     [HttpPost]
        public List<FormSubmision> PNLClose(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }



            using (SqlConnection CN = new SqlConnection(Connection))
            {



                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        if (objlist.BtnText == "SUBMIT")
                        {



                            con.Open();
                            objTrans = con.BeginTransaction();

                            if (objlist.TblRowNo == 0)
                            {

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);




                            }



                            if (objlist.TotalDebitAmt == null || objlist.TotalDebitAmt == "NA")
                            {

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "J");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "To Transfer To Profit And Loss");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TotalCreditAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                                //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("@VType", "J");
                                //    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                //    cmd.Parameters.AddWithValue("@Particular", "By "+ objlist.VoucherNo + "");
                                //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@Amount", objlist.TotalCreditAmt);
                                //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                //    cmd.Parameters.AddWithValue("@BankName", "");
                                //    cmd.Parameters.AddWithValue("@CloseNature", "");
                                //    cmd.Parameters.AddWithValue("@BranchName", "");
                                //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                //    cmd.Parameters.AddWithValue("@Narration", "");
                                //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                //    cmd.Parameters.AddWithValue("@AgentId", "");
                                //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                //    cmd.Transaction = objTrans;
                                //    RowAffect = cmd.ExecuteNonQuery();

                                //}

                                using (SqlCommand cmd = new SqlCommand("InsertProfitsave", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@GpName", objlist.RecieptNo);
                                    cmd.Parameters.AddWithValue("@LedgerName", objlist.VoucherNo);
                                    cmd.Parameters.AddWithValue("@Debit", "0");
                                    cmd.Parameters.AddWithValue("@Credit", objlist.TotalCreditAmt);
                                    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);


                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }


                            }
                            else
                            {
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "J");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To Transfer To Profit And Loss");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                                //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("@VType", "J");
                                //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                //    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.VoucherNo + "");
                                //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                //    cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                //    cmd.Parameters.AddWithValue("@BankName", "");
                                //    cmd.Parameters.AddWithValue("@CloseNature", "");
                                //    cmd.Parameters.AddWithValue("@BranchName", "");
                                //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                //    cmd.Parameters.AddWithValue("@Narration", "");
                                //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                //    cmd.Parameters.AddWithValue("@AgentId", "");
                                //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                //    cmd.Transaction = objTrans;
                                //    RowAffect = cmd.ExecuteNonQuery();

                                //}

                                using (SqlCommand cmd = new SqlCommand("InsertProfitsave", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@GpName", objlist.RecieptNo);
                                    cmd.Parameters.AddWithValue("@LedgerName", objlist.VoucherNo);
                                    cmd.Parameters.AddWithValue("@Debit", objlist.TotalDebitAmt);
                                    cmd.Parameters.AddWithValue("@Credit", "0");
                                    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);


                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                            }



                            if (Convert.ToInt32(objlist.TblRecieptDepositRowCount) == (Convert.ToInt32(objlist.TblRowNo) + 1))
                            {


                                /////////////////////////////Sum of PNDL Ledger///////////////////////

                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "J");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "By Expanse");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.InstAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }


                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "J");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By Income");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.MaturityAmt);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                                /////////////////////////////Sum of PNDL Ledger end///////////////////////



                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "J");
                                    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    cmd.Parameters.AddWithValue("@Particular", "To Transfered To Capital Account");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.ClosingBal);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@VType", "J");
                                    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    cmd.Parameters.AddWithValue("@Particular", "By Profit Transfer From P & L");
                                    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Amount", objlist.ClosingBal);
                                    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    cmd.Parameters.AddWithValue("@BankName", "");
                                    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    cmd.Parameters.AddWithValue("@BranchName", "");
                                    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    cmd.Parameters.AddWithValue("@AgentId", "");
                                    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }

                                using (SqlCommand cmd = new SqlCommand("sp_InsertFyClose", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@fyId", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@Date", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByIDText);
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }


                            }





                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }


                        }






                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }
       //   [Route("api/InsertOpeningBalPNDL")]
      //     [HttpPost]
        public List<FormSubmision> InsertOpeningBalPNDL(List<InsertPNDL> objlist)
        {
            RowAffect = 0;
            if (objlist == null)
            {
                objlist = new List<InsertPNDL>();
            }
            int index = 0;
            foreach (InsertPNDL PNDL in objlist)
            {

                string GpName = PNDL.GpName;
                string LdName = PNDL.LdName;
                string Debit = PNDL.Debit;
                string Credit = PNDL.Credit;
                string Debit1 = PNDL.Debit1;
                string Credit1 = PNDL.Credit1;
                string AccNo = PNDL.AccNo;
                string RecieptDate = PNDL.RecieptDate;
                string GetPNDLLedger = PNDL.GetPNDLLedger;
                string GetPNDLLed = PNDL.GetPNDLLed;
                string BtnText = PNDL.BtnText;
                string Compid = PNDL.Compid;
                string BranchID = PNDL.BranchID;
                string FyId = PNDL.FyId;
                string UserId = PNDL.UserId;
                string TblRowNo = PNDL.TblRowNo;
                string CompBranchCode = PNDL.CompBranchCode;
                string CompBranchFyCode = PNDL.CompBranchFyCode;
                string ExpanseTotal = PNDL.ExpanseTotal;
                string IncomeTotal = PNDL.IncomeTotal;
                string TableLegnth = PNDL.TableLegnth;
                string Delete = PNDL.Delete;
                string VNoForDelete = PNDL.VNoForDelete;
                string PNDLTblStatus = PNDL.PNDLTblStatus;
                string ShareRate = "";


                if (index == 0 && Convert.ToInt32(TableLegnth) > 0)
                {

                    using (SqlConnection CN = new SqlConnection(Connection))
                    {
                        CN.Open();
                        //using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and AppTransNo= @AppTransNo and  Particular like '%'+'To Transfer To Profit And Loss'+'%'", CN))
                        using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=@FyId and  Narration= 'Profit And Loss'", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@AppTransNo", VNoForDelete);
                            cmd.Parameters.AddWithValue("@FyId", FyId);
                            cmd.Parameters.AddWithValue("@CompID", Compid);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.ExecuteNonQuery();

                        }
                        CN.Close();

                    }

                    if (PNDLTblStatus == "No")
                    {
                        using (SqlConnection CN = new SqlConnection(Connection))
                        {
                            if (index == 0)
                            {

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                appmax = app.Max_AppTransactionNo(Compid, FyId, BranchID);
                                AppTransSrNo = app.Max_AppTransactionSrNo(Compid, FyId, BranchID);

                                MaxVNoO = app.GetMaxVNoFy(Compid, BranchID, "R", FyId);
                                MaxRecNo = app.GetMaxRecieptNo(Compid, BranchID, FyId);


                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("CheckBranchwiseStatusInsert", CN))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@CompID", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    cmd.Parameters.AddWithValue("@FyId", FyId);

                                    dr = cmd.ExecuteReader();
                                    if (dr.Read())
                                    {
                                        ChkBranchFyIns = Convert.ToInt32(dr["FyId"].ToString());


                                    }
                                    else
                                    {
                                        ChkBranchFyIns = 0;
                                    }

                                }
                                dr.Close();
                                CN.Close();
                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and Narration='New Finenancial Year' and Vdate=(select MAX(FyYearFrom) from FinencialYear where CompId = @CompID)", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    //cmd.Parameters.AddWithValue("@vno", objlist.LoanReqID);
                                    cmd.Parameters.AddWithValue("@FyId", Convert.ToInt32(FyId) + 1);
                                    cmd.Parameters.AddWithValue("@CompID", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    RowDelete = cmd.ExecuteNonQuery();

                                }
                                CN.Close();



                                //if (RowDelete > 0)
                                //{

                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("truncate table VoucherFyId", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    cmd.ExecuteNonQuery();

                                }
                                CN.Close();



                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearOld", CN))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@Fyid", FyId);
                                    cmd.Parameters.AddWithValue("@ToDate", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.CommandTimeout = 120;
                                    cmd.ExecuteNonQuery();

                                }
                                CN.Close();

                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("select MAX(FyId) FyId,Max(FyYearFrom) Fromd,CONVERT (varchar, Max(FyYearFrom), 105)as FDate from FinencialYear where CompId =@CompId", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    dr = cmd.ExecuteReader();
                                    if (dr.Read())
                                    {
                                        MaxFyID = dr["FyId"].ToString();
                                        UpdaeFyFrom = dr["FDate"].ToString();
                                    }

                                }
                                dr.Close();
                                CN.Close();

                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("select Top 1 cast(DATEPART(yyyy,FyYearFrom) as varchar)+'-'+ cast(DATEPART(yyyy,FyYearTo) as varchar) as FyYear,FyId from FinencialYear where CompId =@CompId order by FyId desc ", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    dr = cmd.ExecuteReader();
                                    if (dr.Read())
                                    {
                                        ShareRate = dr["FyYear"].ToString();

                                    }

                                }
                                dr.Close();
                                CN.Close();


                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("UPDATE VoucherFyId SET Fyid = @Fyid,Particular = @Particular,Vdate = @Vdate where CompId = @CompId and BranchID = @BranchID and AppTransNo = @appmax", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.AddWithValue("@Fyid", MaxFyID);
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + ShareRate);
                                    cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(UpdaeFyFrom, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    cmd.Parameters.AddWithValue("@appmax", appmax);
                                    cmd.ExecuteNonQuery();

                                }
                                CN.Close();


                                if (ChkBranchFyIns > 0)
                                {
                                    CN.Open();
                                    using (SqlCommand cmd = new SqlCommand("UPDATE FinencialYearBranchwiseStatus SET Status='InActive' where CompId = @CompId and BranchID = @BranchID and Fyid = @Fyid", CN))
                                    {
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.AddWithValue("@CompID", Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                        cmd.Parameters.AddWithValue("@FyId", FyId);

                                        cmd.ExecuteNonQuery();

                                    }
                                    CN.Close();
                                }
                                else
                                {
                                    CN.Open();
                                    using (SqlCommand cmd = new SqlCommand("INSERT INTO FinencialYearBranchwiseStatus(CompId,Fyid,Status,IsActive,BranchID)VALUES(@CompID,@Fyid,@Status,@IsActive,@BranchID);", CN))
                                    {
                                        cmd.CommandType = CommandType.Text;

                                        cmd.Parameters.AddWithValue("@CompID", Compid);
                                        cmd.Parameters.AddWithValue("@FyId", FyId);
                                        cmd.Parameters.AddWithValue("@Status", "InActive");
                                        cmd.Parameters.AddWithValue("@IsActive", "No");
                                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                        cmd.ExecuteNonQuery();

                                    }
                                    CN.Close();

                                }



                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearToFinal", CN))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    RowIns = cmd.ExecuteNonQuery();


                                }
                                CN.Close();

                                if (RowIns > 0)
                                {
                                    AppTransactionNoClass appt = new AppTransactionNoClass();
                                    int wer = appt.Insert_AppTransaction("O", appmax, Compid, FyId, BranchID, "", AppTransSrNo);
                                }


                            }

                        }
                    }
                    else
                    {

                        using (SqlConnection CN = new SqlConnection(Connection))
                        {
                            if (index == 0)
                            {

                                AppTransactionNoClass app = new AppTransactionNoClass();
                                appmax = app.Max_AppTransactionNo(Compid, FyId, BranchID);
                                AppTransSrNo = app.Max_AppTransactionSrNo(Compid, FyId, BranchID);

                                MaxVNoO = app.GetMaxVNoFy(Compid, BranchID, "R", FyId);
                                MaxRecNo = app.GetMaxRecieptNo(Compid, BranchID, FyId);


                            }



                            if (Convert.ToInt32(TableLegnth) == (Convert.ToInt32(index) + 1))
                            {

                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("CheckBranchwiseStatusInsert", CN))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@CompID", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    cmd.Parameters.AddWithValue("@FyId", FyId);

                                    dr = cmd.ExecuteReader();
                                    if (dr.Read())
                                    {
                                        ChkBranchFyIns = Convert.ToInt32(dr["FyId"].ToString());


                                    }
                                    else
                                    {
                                        ChkBranchFyIns = 0;
                                    }

                                }
                                dr.Close();
                                CN.Close();

                                //CN.Open();
                                ////using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and AppTransNo= @AppTransNo and  Particular like '%'+'To Transfer To Profit And Loss'+'%'", CN))
                                //using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=@FyId and  Narration= 'Profit And Loss'", CN))
                                //{
                                //    cmd.CommandType = CommandType.Text;
                                //    cmd.Parameters.AddWithValue("@AppTransNo", objlist.CloseNature);
                                //    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                //    cmd.ExecuteNonQuery();

                                //}
                                //CN.Close();

                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and Narration='New Finenancial Year' and Vdate=(select MAX(FyYearFrom) from FinencialYear where CompId = @CompID)", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    //cmd.Parameters.AddWithValue("@vno", objlist.LoanReqID);
                                    cmd.Parameters.AddWithValue("@FyId", Convert.ToInt32(FyId) + 1);
                                    cmd.Parameters.AddWithValue("@CompID", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    RowDelete = cmd.ExecuteNonQuery();

                                }
                                CN.Close();



                                //if (RowDelete > 0)
                                //{

                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("truncate table VoucherFyId", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    cmd.ExecuteNonQuery();

                                }
                                CN.Close();



                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearOld", CN))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@Fyid", FyId);
                                    cmd.Parameters.AddWithValue("@ToDate", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.CommandTimeout = 220;
                                    cmd.ExecuteNonQuery();

                                }
                                CN.Close();

                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("select MAX(FyId) FyId,Max(FyYearFrom) Fromd,CONVERT (varchar, Max(FyYearFrom), 105)as FDate from FinencialYear where CompId =@CompId", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    dr = cmd.ExecuteReader();
                                    if (dr.Read())
                                    {
                                        MaxFyID = dr["FyId"].ToString();
                                        UpdaeFyFrom = dr["FDate"].ToString();
                                    }

                                }
                                dr.Close();
                                CN.Close();

                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("select Top 1 cast(DATEPART(yyyy,FyYearFrom) as varchar)+'-'+ cast(DATEPART(yyyy,FyYearTo) as varchar) as FyYear,FyId from FinencialYear where CompId =@CompId order by FyId desc ", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    dr = cmd.ExecuteReader();
                                    if (dr.Read())
                                    {
                                        ShareRate = dr["FyYear"].ToString();

                                    }

                                }
                                dr.Close();
                                CN.Close();


                                CN.Open();
                                using (SqlCommand cmd = new SqlCommand("UPDATE VoucherFyId SET Fyid = @Fyid,Particular = @Particular,Vdate = @Vdate where CompId = @CompId and BranchID = @BranchID and AppTransNo = @appmax", CN))
                                {
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.AddWithValue("@Fyid", MaxFyID);
                                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + ShareRate);
                                    cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(UpdaeFyFrom, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@CompId", Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    cmd.Parameters.AddWithValue("@appmax", appmax);
                                    cmd.ExecuteNonQuery();

                                }
                                CN.Close();


                                if (ChkBranchFyIns > 0)
                                {
                                    CN.Open();
                                    using (SqlCommand cmd = new SqlCommand("UPDATE FinencialYearBranchwiseStatus SET Status='InActive' where CompId = @CompId and BranchID = @BranchID and Fyid = @Fyid", CN))
                                    {
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.AddWithValue("@CompID", Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                        cmd.Parameters.AddWithValue("@FyId", FyId);

                                        cmd.ExecuteNonQuery();

                                    }
                                    CN.Close();
                                }
                                else
                                {
                                    CN.Open();
                                    using (SqlCommand cmd = new SqlCommand("INSERT INTO FinencialYearBranchwiseStatus(CompId,Fyid,Status,IsActive,BranchID)VALUES(@CompID,@Fyid,@Status,@IsActive,@BranchID);", CN))
                                    {
                                        cmd.CommandType = CommandType.Text;

                                        cmd.Parameters.AddWithValue("@CompID", Compid);
                                        cmd.Parameters.AddWithValue("@FyId", FyId);
                                        cmd.Parameters.AddWithValue("@Status", "InActive");
                                        cmd.Parameters.AddWithValue("@IsActive", "No");
                                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                        cmd.ExecuteNonQuery();

                                    }
                                    CN.Close();

                                }

                            }


                            using (SqlConnection con = new SqlConnection(Connection))
                            {
                                SqlTransaction objTrans = null;



                                try
                                {
                                    if (BtnText == "SUBMIT")
                                    {



                                        con.Open();
                                        objTrans = con.BeginTransaction();

                                        //if (objlist.TblRowNo == 0)
                                        //{

                                        //    AppTransactionNoClass app = new AppTransactionNoClass();
                                        //    appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                        //    AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                        //    MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                        //    MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);




                                        //}



                                        if (Debit1 == null || Debit1 == "NA")
                                        {

                                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@VType", "J");
                                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                cmd.Parameters.AddWithValue("@Particular", "To Transfer To Profit And Loss");
                                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@FY", FyId);
                                                cmd.Parameters.AddWithValue("@UserId", UserId);
                                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@Amount", Credit1);
                                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                cmd.Parameters.AddWithValue("@BankName", "");
                                                cmd.Parameters.AddWithValue("@CloseNature", "");
                                                cmd.Parameters.AddWithValue("@BranchName", "");
                                                cmd.Parameters.AddWithValue("@CheckNumber", "");
                                                cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                                cmd.Parameters.AddWithValue("@LedgerId", AccNo);
                                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                cmd.Parameters.AddWithValue("@LedgerAccNo", GetPNDLLed);
                                                cmd.Parameters.AddWithValue("@CompID", Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Parameters.AddWithValue("@CompBranchCode", "");
                                                cmd.Parameters.AddWithValue("@CompBranchFyCode", "");
                                                cmd.Parameters.AddWithValue("@AgentId", "");
                                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                                cmd.Transaction = objTrans;
                                                RowAffect = cmd.ExecuteNonQuery();

                                            }
                                            //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                            //{
                                            //    cmd.CommandType = CommandType.StoredProcedure;
                                            //    cmd.Parameters.AddWithValue("@VType", "J");
                                            //    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                            //    cmd.Parameters.AddWithValue("@Particular", "By "+ objlist.VoucherNo + "");
                                            //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                            //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                            //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            //    cmd.Parameters.AddWithValue("@Amount", objlist.TotalCreditAmt);
                                            //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                            //    cmd.Parameters.AddWithValue("@BankName", "");
                                            //    cmd.Parameters.AddWithValue("@CloseNature", "");
                                            //    cmd.Parameters.AddWithValue("@BranchName", "");
                                            //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                            //    cmd.Parameters.AddWithValue("@Narration", "");
                                            //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                            //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                            //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                            //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                            //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                            //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                            //    cmd.Parameters.AddWithValue("@AgentId", "");
                                            //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                            //    cmd.Transaction = objTrans;
                                            //    RowAffect = cmd.ExecuteNonQuery();

                                            //}

                                            using (SqlCommand cmd = new SqlCommand("InsertProfitsave", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@GpName", GpName);
                                                cmd.Parameters.AddWithValue("@LedgerName", LdName);
                                                cmd.Parameters.AddWithValue("@Debit", "0");
                                                cmd.Parameters.AddWithValue("@Credit", Credit1);
                                                cmd.Parameters.AddWithValue("@FyId", FyId);
                                                cmd.Parameters.AddWithValue("@CompID", Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);


                                                cmd.Transaction = objTrans;
                                                RowAffect = cmd.ExecuteNonQuery();

                                            }


                                        }
                                        else
                                        {
                                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@VType", "J");
                                                cmd.Parameters.AddWithValue("@Nature", "Debit");
                                                cmd.Parameters.AddWithValue("@Particular", "To Transfer To Profit And Loss");
                                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@FY", FyId);
                                                cmd.Parameters.AddWithValue("@UserId", UserId);
                                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@Amount", Debit1);
                                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                cmd.Parameters.AddWithValue("@BankName", "");
                                                cmd.Parameters.AddWithValue("@CloseNature", "");
                                                cmd.Parameters.AddWithValue("@BranchName", "");
                                                cmd.Parameters.AddWithValue("@CheckNumber", "");
                                                cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                                cmd.Parameters.AddWithValue("@LedgerId", AccNo);
                                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                cmd.Parameters.AddWithValue("@LedgerAccNo", GetPNDLLed);
                                                cmd.Parameters.AddWithValue("@CompID", Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Parameters.AddWithValue("@CompBranchCode", "");
                                                cmd.Parameters.AddWithValue("@CompBranchFyCode", "");
                                                cmd.Parameters.AddWithValue("@AgentId", "");
                                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                                cmd.Transaction = objTrans;
                                                RowAffect = cmd.ExecuteNonQuery();

                                            }
                                            //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                            //{
                                            //    cmd.CommandType = CommandType.StoredProcedure;
                                            //    cmd.Parameters.AddWithValue("@VType", "J");
                                            //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                            //    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.VoucherNo + "");
                                            //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                            //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                            //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            //    cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                            //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                            //    cmd.Parameters.AddWithValue("@BankName", "");
                                            //    cmd.Parameters.AddWithValue("@CloseNature", "");
                                            //    cmd.Parameters.AddWithValue("@BranchName", "");
                                            //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                            //    cmd.Parameters.AddWithValue("@Narration", "");
                                            //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                            //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                            //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                            //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                            //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                            //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                            //    cmd.Parameters.AddWithValue("@AgentId", "");
                                            //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                            //    cmd.Transaction = objTrans;
                                            //    RowAffect = cmd.ExecuteNonQuery();

                                            //}

                                            using (SqlCommand cmd = new SqlCommand("InsertProfitsave", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@GpName", GpName);
                                                cmd.Parameters.AddWithValue("@LedgerName", LdName);
                                                cmd.Parameters.AddWithValue("@Debit", Debit1);
                                                cmd.Parameters.AddWithValue("@Credit", "0");
                                                cmd.Parameters.AddWithValue("@FyId", FyId);
                                                cmd.Parameters.AddWithValue("@CompID", Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);


                                                cmd.Transaction = objTrans;
                                                RowAffect = cmd.ExecuteNonQuery();

                                            }
                                        }



                                        if (Convert.ToInt32(TableLegnth) == (Convert.ToInt32(index) + 1))
                                        {


                                            /////////////////////////////Sum of PNDL Ledger///////////////////////

                                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@VType", "J");
                                                cmd.Parameters.AddWithValue("@Nature", "Debit");
                                                cmd.Parameters.AddWithValue("@Particular", "By Expanse");
                                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@FY", FyId);
                                                cmd.Parameters.AddWithValue("@UserId", UserId);
                                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@Amount", ExpanseTotal);
                                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                cmd.Parameters.AddWithValue("@BankName", "");
                                                cmd.Parameters.AddWithValue("@CloseNature", "");
                                                cmd.Parameters.AddWithValue("@BranchName", "");
                                                cmd.Parameters.AddWithValue("@CheckNumber", "");
                                                cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                                cmd.Parameters.AddWithValue("@LedgerId", GetPNDLLed);
                                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                cmd.Parameters.AddWithValue("@LedgerAccNo", AccNo);
                                                cmd.Parameters.AddWithValue("@CompID", Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Parameters.AddWithValue("@CompBranchCode", "");
                                                cmd.Parameters.AddWithValue("@CompBranchFyCode", "");
                                                cmd.Parameters.AddWithValue("@AgentId", "");
                                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                                cmd.Transaction = objTrans;
                                                RowAffect = cmd.ExecuteNonQuery();

                                            }


                                            using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@VType", "J");
                                                cmd.Parameters.AddWithValue("@Nature", "Credit");
                                                cmd.Parameters.AddWithValue("@Particular", "By Income");
                                                cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@FY", FyId);
                                                cmd.Parameters.AddWithValue("@UserId", UserId);
                                                cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@Amount", IncomeTotal);
                                                cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                                cmd.Parameters.AddWithValue("@BankName", "");
                                                cmd.Parameters.AddWithValue("@CloseNature", "");
                                                cmd.Parameters.AddWithValue("@BranchName", "");
                                                cmd.Parameters.AddWithValue("@CheckNumber", "");
                                                cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                                cmd.Parameters.AddWithValue("@LedgerId", GetPNDLLed);
                                                cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                                cmd.Parameters.AddWithValue("@LedgerAccNo", AccNo);
                                                cmd.Parameters.AddWithValue("@CompID", Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Parameters.AddWithValue("@CompBranchCode", "");
                                                cmd.Parameters.AddWithValue("@CompBranchFyCode", "");
                                                cmd.Parameters.AddWithValue("@AgentId", "");
                                                cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                                cmd.Transaction = objTrans;
                                                RowAffect = cmd.ExecuteNonQuery();

                                            }

                                            /////////////////////////////Sum of PNDL Ledger end///////////////////////



                                            //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                            //{
                                            //    cmd.CommandType = CommandType.StoredProcedure;
                                            //    cmd.Parameters.AddWithValue("@VType", "J");
                                            //    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                            //    cmd.Parameters.AddWithValue("@Particular", "To Transfered To Capital Account");
                                            //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                            //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                            //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            //    cmd.Parameters.AddWithValue("@Amount", objlist.ClosingBal);
                                            //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                            //    cmd.Parameters.AddWithValue("@BankName", "");
                                            //    cmd.Parameters.AddWithValue("@CloseNature", "");
                                            //    cmd.Parameters.AddWithValue("@BranchName", "");
                                            //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                            //    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                            //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                            //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                            //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                            //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                            //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                            //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                            //    cmd.Parameters.AddWithValue("@AgentId", "");
                                            //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                            //    cmd.Transaction = objTrans;
                                            //    RowAffect = cmd.ExecuteNonQuery();

                                            //}
                                            //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                            //{
                                            //    cmd.CommandType = CommandType.StoredProcedure;
                                            //    cmd.Parameters.AddWithValue("@VType", "J");
                                            //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                            //    cmd.Parameters.AddWithValue("@Particular", "By Profit Transfer From P & L");
                                            //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                            //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                            //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                            //    cmd.Parameters.AddWithValue("@Amount", objlist.ClosingBal);
                                            //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                            //    cmd.Parameters.AddWithValue("@BankName", "");
                                            //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                            //    cmd.Parameters.AddWithValue("@BranchName", "");
                                            //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                            //    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                            //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                            //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                            //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                            //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                            //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                            //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                            //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                            //    cmd.Parameters.AddWithValue("@AgentId", "");
                                            //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                            //    cmd.Transaction = objTrans;
                                            //    RowAffect = cmd.ExecuteNonQuery();

                                            //}

                                            using (SqlCommand cmd = new SqlCommand("sp_InsertFyClose", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@fyId", FyId);
                                                cmd.Parameters.AddWithValue("@Date", DateTime.ParseExact(RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                                cmd.Parameters.AddWithValue("@LedgerId", GetPNDLLedger);
                                                cmd.Parameters.AddWithValue("@CompID", Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Transaction = objTrans;
                                                RowAffect = cmd.ExecuteNonQuery();

                                            }

                                            using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearToFinal", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("@CompId", Compid);
                                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                                cmd.Transaction = objTrans;

                                                RowIns = cmd.ExecuteNonQuery();


                                            }

                                            if (RowAffect > 0)
                                            {
                                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                                int wer = appt.Insert_AppTransaction("O", appmax, Compid, FyId, BranchID, "", AppTransSrNo);
                                            }
                                        }




                                        if (RowAffect > 0)
                                        {


                                            objTrans.Commit();
                                        }



                                    }






                                }
                                catch (Exception ex)
                                {

                                    objTrans.Rollback();

                                }
                                finally
                                {

                                }


                            }

                        }






                    }

                }



                index++;
            }


            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }
       //   [Route("api/PNLCloseOpeningBal")]
      //     [HttpPost]
        public List<FormSubmision> PNLCloseOpeningBal(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }
            //if (objlist.TblRecieptDepositRowCount == null)
            //{
            //    objlist.TblRecieptDepositRowCount = 0;
            //}
            using (SqlConnection CN = new SqlConnection(Connection))
            {

                if (objlist.TblRowNo == 0 && objlist.TblRecieptDepositRowCount > 0)
                {
                    CN.Open();
                    //using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and AppTransNo= @AppTransNo and  Particular like '%'+'To Transfer To Profit And Loss'+'%'", CN))
                    using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=@FyId and  Narration= 'Profit And Loss'", CN))
                    {
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("@AppTransNo", objlist.CloseNature);
                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        cmd.ExecuteNonQuery();

                    }
                    CN.Close();
                }
            }

            if (objlist.VNoLoanID == "No")
            {
                using (SqlConnection CN = new SqlConnection(Connection))
                {
                    if (objlist.TblRowNo == 0)
                    {

                        AppTransactionNoClass app = new AppTransactionNoClass();
                        appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                        AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                        MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                        MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);


                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("CheckBranchwiseStatusInsert", CN))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@FyId", objlist.FyId);

                            dr = cmd.ExecuteReader();
                            if (dr.Read())
                            {
                                ChkBranchFyIns = Convert.ToInt32(dr["FyId"].ToString());


                            }
                            else
                            {
                                ChkBranchFyIns = 0;
                            }

                        }
                        dr.Close();
                        CN.Close();
                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and Narration='New Finenancial Year' and Vdate=(select MAX(FyYearFrom) from FinencialYear where CompId = @CompID)", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            //cmd.Parameters.AddWithValue("@vno", objlist.LoanReqID);
                            cmd.Parameters.AddWithValue("@FyId", Convert.ToInt32(objlist.FyId) + 1);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            RowDelete = cmd.ExecuteNonQuery();

                        }
                        CN.Close();



                        //if (RowDelete > 0)
                        //{

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("truncate table VoucherFyId", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.ExecuteNonQuery();

                        }
                        CN.Close();



                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearOld", CN))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@Fyid", objlist.FyId);
                            cmd.Parameters.AddWithValue("@ToDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.CommandTimeout = 120;
                            cmd.ExecuteNonQuery();

                        }
                        CN.Close();

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("select MAX(FyId) FyId,Max(FyYearFrom) Fromd,CONVERT (varchar, Max(FyYearFrom), 105)as FDate from FinencialYear where CompId =@CompId", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            dr = cmd.ExecuteReader();
                            if (dr.Read())
                            {
                                MaxFyID = dr["FyId"].ToString();
                                UpdaeFyFrom = dr["FDate"].ToString();
                            }

                        }
                        dr.Close();
                        CN.Close();

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("select Top 1 cast(DATEPART(yyyy,FyYearFrom) as varchar)+'-'+ cast(DATEPART(yyyy,FyYearTo) as varchar) as FyYear,FyId from FinencialYear where CompId =@CompId order by FyId desc ", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            dr = cmd.ExecuteReader();
                            if (dr.Read())
                            {
                                objlist.ShareRate = dr["FyYear"].ToString();

                            }

                        }
                        dr.Close();
                        CN.Close();


                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("UPDATE VoucherFyId SET Fyid = @Fyid,Particular = @Particular,Vdate = @Vdate where CompId = @CompId and BranchID = @BranchID and AppTransNo = @appmax", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@Fyid", MaxFyID);
                            cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.ShareRate);
                            cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(UpdaeFyFrom, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@appmax", appmax);
                            cmd.ExecuteNonQuery();

                        }
                        CN.Close();


                        if (ChkBranchFyIns > 0)
                        {
                            CN.Open();
                            using (SqlCommand cmd = new SqlCommand("UPDATE FinencialYearBranchwiseStatus SET Status='InActive' where CompId = @CompId and BranchID = @BranchID and Fyid = @Fyid", CN))
                            {
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);

                                cmd.ExecuteNonQuery();

                            }
                            CN.Close();
                        }
                        else
                        {
                            CN.Open();
                            using (SqlCommand cmd = new SqlCommand("INSERT INTO FinencialYearBranchwiseStatus(CompId,Fyid,Status,IsActive,BranchID)VALUES(@CompID,@Fyid,@Status,@IsActive,@BranchID);", CN))
                            {
                                cmd.CommandType = CommandType.Text;

                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@Status", "InActive");
                                cmd.Parameters.AddWithValue("@IsActive", "No");
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.ExecuteNonQuery();

                            }
                            CN.Close();

                        }



                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearToFinal", CN))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            RowIns = cmd.ExecuteNonQuery();


                        }
                        CN.Close();

                        if (RowIns > 0)
                        {
                            AppTransactionNoClass appt = new AppTransactionNoClass();
                            int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                        }


                    }

                }

            }
            else
            {

                using (SqlConnection CN = new SqlConnection(Connection))
                {
                    if (objlist.TblRowNo == 0)
                    {

                        AppTransactionNoClass app = new AppTransactionNoClass();
                        appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                        AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                        MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                        MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);


                    }



                    if (Convert.ToInt32(objlist.TblRecieptDepositRowCount) == (Convert.ToInt32(objlist.TblRowNo) + 1))
                    {

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("CheckBranchwiseStatusInsert", CN))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@FyId", objlist.FyId);

                            dr = cmd.ExecuteReader();
                            if (dr.Read())
                            {
                                ChkBranchFyIns = Convert.ToInt32(dr["FyId"].ToString());


                            }
                            else
                            {
                                ChkBranchFyIns = 0;
                            }

                        }
                        dr.Close();
                        CN.Close();

                        //CN.Open();
                        ////using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and AppTransNo= @AppTransNo and  Particular like '%'+'To Transfer To Profit And Loss'+'%'", CN))
                        //using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=@FyId and  Narration= 'Profit And Loss'", CN))
                        //{
                        //    cmd.CommandType = CommandType.Text;
                        //    cmd.Parameters.AddWithValue("@AppTransNo", objlist.CloseNature);
                        //    cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                        //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        //    cmd.ExecuteNonQuery();

                        //}
                        //CN.Close();

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("delete from Voucher where CompID = @CompID and BranchID = @BranchID and FyId=(select MAX(FyId) from FinencialYear where CompId = @CompID) and Narration='New Finenancial Year' and Vdate=(select MAX(FyYearFrom) from FinencialYear where CompId = @CompID)", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            //cmd.Parameters.AddWithValue("@vno", objlist.LoanReqID);
                            cmd.Parameters.AddWithValue("@FyId", Convert.ToInt32(objlist.FyId) + 1);
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            RowDelete = cmd.ExecuteNonQuery();

                        }
                        CN.Close();



                        //if (RowDelete > 0)
                        //{

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("truncate table VoucherFyId", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.ExecuteNonQuery();

                        }
                        CN.Close();



                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearOld", CN))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@Fyid", objlist.FyId);
                            cmd.Parameters.AddWithValue("@ToDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                            cmd.CommandTimeout = 220;
                            cmd.ExecuteNonQuery();

                        }
                        CN.Close();

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("select MAX(FyId) FyId,Max(FyYearFrom) Fromd,CONVERT (varchar, Max(FyYearFrom), 105)as FDate from FinencialYear where CompId =@CompId", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            dr = cmd.ExecuteReader();
                            if (dr.Read())
                            {
                                MaxFyID = dr["FyId"].ToString();
                                UpdaeFyFrom = dr["FDate"].ToString();
                            }

                        }
                        dr.Close();
                        CN.Close();

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("select Top 1 cast(DATEPART(yyyy,FyYearFrom) as varchar)+'-'+ cast(DATEPART(yyyy,FyYearTo) as varchar) as FyYear,FyId from FinencialYear where CompId =@CompId order by FyId desc ", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            dr = cmd.ExecuteReader();
                            if (dr.Read())
                            {
                                objlist.ShareRate = dr["FyYear"].ToString();

                            }

                        }
                        dr.Close();
                        CN.Close();


                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("UPDATE VoucherFyId SET Fyid = @Fyid,Particular = @Particular,Vdate = @Vdate where CompId = @CompId and BranchID = @BranchID and AppTransNo = @appmax", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@Fyid", MaxFyID);
                            cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.ShareRate);
                            cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(UpdaeFyFrom, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                            cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@appmax", appmax);
                            cmd.ExecuteNonQuery();

                        }
                        CN.Close();


                        if (ChkBranchFyIns > 0)
                        {
                            CN.Open();
                            using (SqlCommand cmd = new SqlCommand("UPDATE FinencialYearBranchwiseStatus SET Status='InActive' where CompId = @CompId and BranchID = @BranchID and Fyid = @Fyid", CN))
                            {
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);

                                cmd.ExecuteNonQuery();

                            }
                            CN.Close();
                        }
                        else
                        {
                            CN.Open();
                            using (SqlCommand cmd = new SqlCommand("INSERT INTO FinencialYearBranchwiseStatus(CompId,Fyid,Status,IsActive,BranchID)VALUES(@CompID,@Fyid,@Status,@IsActive,@BranchID);", CN))
                            {
                                cmd.CommandType = CommandType.Text;

                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@Status", "InActive");
                                cmd.Parameters.AddWithValue("@IsActive", "No");
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.ExecuteNonQuery();

                            }
                            CN.Close();

                        }

                    }


                    using (SqlConnection con = new SqlConnection(Connection))
                    {
                        SqlTransaction objTrans = null;



                        try
                        {
                            if (objlist.BtnText == "SUBMIT")
                            {



                                con.Open();
                                objTrans = con.BeginTransaction();

                                //if (objlist.TblRowNo == 0)
                                //{

                                //    AppTransactionNoClass app = new AppTransactionNoClass();
                                //    appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                                //    AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                                //    MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                                //    MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);




                                //}



                                if (objlist.TotalDebitAmt == null || objlist.TotalDebitAmt == "NA")
                                {

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "J");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "To Transfer To Profit And Loss");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TotalCreditAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                        cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                    //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                    //{
                                    //    cmd.CommandType = CommandType.StoredProcedure;
                                    //    cmd.Parameters.AddWithValue("@VType", "J");
                                    //    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    //    cmd.Parameters.AddWithValue("@Particular", "By "+ objlist.VoucherNo + "");
                                    //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@Amount", objlist.TotalCreditAmt);
                                    //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    //    cmd.Parameters.AddWithValue("@BankName", "");
                                    //    cmd.Parameters.AddWithValue("@CloseNature", "");
                                    //    cmd.Parameters.AddWithValue("@BranchName", "");
                                    //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    //    cmd.Parameters.AddWithValue("@Narration", "");
                                    //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    //    cmd.Parameters.AddWithValue("@AgentId", "");
                                    //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    //    cmd.Transaction = objTrans;
                                    //    RowAffect = cmd.ExecuteNonQuery();

                                    //}

                                    using (SqlCommand cmd = new SqlCommand("InsertProfitsave", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@GpName", objlist.RecieptNo);
                                        cmd.Parameters.AddWithValue("@LedgerName", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@Debit", "0");
                                        cmd.Parameters.AddWithValue("@Credit", objlist.TotalCreditAmt);
                                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);


                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }


                                }
                                else
                                {
                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "J");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "To Transfer To Profit And Loss");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                        cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                    //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                    //{
                                    //    cmd.CommandType = CommandType.StoredProcedure;
                                    //    cmd.Parameters.AddWithValue("@VType", "J");
                                    //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    //    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.VoucherNo + "");
                                    //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@Amount", objlist.TotalDebitAmt);
                                    //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    //    cmd.Parameters.AddWithValue("@BankName", "");
                                    //    cmd.Parameters.AddWithValue("@CloseNature", "");
                                    //    cmd.Parameters.AddWithValue("@BranchName", "");
                                    //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    //    cmd.Parameters.AddWithValue("@Narration", "");
                                    //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                    //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    //    cmd.Parameters.AddWithValue("@AgentId", "");
                                    //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    //    cmd.Transaction = objTrans;
                                    //    RowAffect = cmd.ExecuteNonQuery();

                                    //}

                                    using (SqlCommand cmd = new SqlCommand("InsertProfitsave", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@GpName", objlist.RecieptNo);
                                        cmd.Parameters.AddWithValue("@LedgerName", objlist.VoucherNo);
                                        cmd.Parameters.AddWithValue("@Debit", objlist.TotalDebitAmt);
                                        cmd.Parameters.AddWithValue("@Credit", "0");
                                        cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);


                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }
                                }



                                if (Convert.ToInt32(objlist.TblRecieptDepositRowCount) == (Convert.ToInt32(objlist.TblRowNo) + 1))
                                {


                                    /////////////////////////////Sum of PNDL Ledger///////////////////////

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "J");
                                        cmd.Parameters.AddWithValue("@Nature", "Debit");
                                        cmd.Parameters.AddWithValue("@Particular", "By Expanse");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.InstAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                        cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }


                                    using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@VType", "J");
                                        cmd.Parameters.AddWithValue("@Nature", "Credit");
                                        cmd.Parameters.AddWithValue("@Particular", "By Income");
                                        cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                        cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@Amount", objlist.MaturityAmt);
                                        cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                        cmd.Parameters.AddWithValue("@BankName", "");
                                        cmd.Parameters.AddWithValue("@CloseNature", "");
                                        cmd.Parameters.AddWithValue("@BranchName", "");
                                        cmd.Parameters.AddWithValue("@CheckNumber", "");
                                        cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                        cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                        cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.TransByID);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                        cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                        cmd.Parameters.AddWithValue("@AgentId", "");
                                        cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }

                                    /////////////////////////////Sum of PNDL Ledger end///////////////////////



                                    //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                    //{
                                    //    cmd.CommandType = CommandType.StoredProcedure;
                                    //    cmd.Parameters.AddWithValue("@VType", "J");
                                    //    cmd.Parameters.AddWithValue("@Nature", "Debit");
                                    //    cmd.Parameters.AddWithValue("@Particular", "To Transfered To Capital Account");
                                    //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@Amount", objlist.ClosingBal);
                                    //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    //    cmd.Parameters.AddWithValue("@BankName", "");
                                    //    cmd.Parameters.AddWithValue("@CloseNature", "");
                                    //    cmd.Parameters.AddWithValue("@BranchName", "");
                                    //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    //    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                    //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                    //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    //    cmd.Parameters.AddWithValue("@AgentId", "");
                                    //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    //    cmd.Transaction = objTrans;
                                    //    RowAffect = cmd.ExecuteNonQuery();

                                    //}
                                    //using (SqlCommand cmd = new SqlCommand("sp_InsertVouchers", con))
                                    //{
                                    //    cmd.CommandType = CommandType.StoredProcedure;
                                    //    cmd.Parameters.AddWithValue("@VType", "J");
                                    //    cmd.Parameters.AddWithValue("@Nature", "Credit");
                                    //    cmd.Parameters.AddWithValue("@Particular", "By Profit Transfer From P & L");
                                    //    cmd.Parameters.AddWithValue("@VDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@FY", objlist.FyId);
                                    //    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);
                                    //    cmd.Parameters.AddWithValue("@DateTime", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    //    cmd.Parameters.AddWithValue("@Amount", objlist.ClosingBal);
                                    //    cmd.Parameters.AddWithValue("@ClosingBal", "0");
                                    //    cmd.Parameters.AddWithValue("@BankName", "");
                                    //    cmd.Parameters.AddWithValue("@CloseNature", "Credit");
                                    //    cmd.Parameters.AddWithValue("@BranchName", "");
                                    //    cmd.Parameters.AddWithValue("@CheckNumber", "");
                                    //    cmd.Parameters.AddWithValue("@Narration", "Profit And Loss");
                                    //    cmd.Parameters.AddWithValue("@LedgerId", objlist.BankName);
                                    //    cmd.Parameters.AddWithValue("@VNo", MaxVNoO);
                                    //    cmd.Parameters.AddWithValue("@LedgerAccNo", objlist.BankName);
                                    //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    //    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    //    cmd.Parameters.AddWithValue("@CompBranchCode", objlist.CompBranchCode);
                                    //    cmd.Parameters.AddWithValue("@CompBranchFyCode", objlist.CompBranchFyCode);
                                    //    cmd.Parameters.AddWithValue("@AgentId", "");
                                    //    cmd.Parameters.AddWithValue("@VtypeNO", MaxRecNo);

                                    //    cmd.Transaction = objTrans;
                                    //    RowAffect = cmd.ExecuteNonQuery();

                                    //}

                                    using (SqlCommand cmd = new SqlCommand("sp_InsertFyClose", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@fyId", objlist.FyId);
                                        cmd.Parameters.AddWithValue("@Date", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                        cmd.Parameters.AddWithValue("@LedgerId", objlist.TransByIDText);
                                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Transaction = objTrans;
                                        RowAffect = cmd.ExecuteNonQuery();

                                    }

                                    using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearToFinal", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                        cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                        cmd.Transaction = objTrans;

                                        RowIns = cmd.ExecuteNonQuery();


                                    }

                                    if (RowAffect > 0)
                                    {
                                        AppTransactionNoClass appt = new AppTransactionNoClass();
                                        int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                    }
                                }




                                if (RowAffect > 0)
                                {


                                    objTrans.Commit();
                                }



                            }






                        }
                        catch (Exception ex)
                        {

                            objTrans.Rollback();

                        }
                        finally
                        {

                        }


                    }

                }

            }


            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }

        public static string InstLedger;
        public static string InstLdName;
        public static string PenLed;
        public static int ctr;
        string[] penamt = new string[50000];
        string[] LdNAme = new string[50000];
        string[] LoanLedger = new string[50000];
        string[] PlanId = new string[50000];
       //   [Route("api/InsertApplyInterest")]
      //     [HttpPost]
        public List<FormSubmision> InsertApplyInterest(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }


            if (objlist.TblAccType == "102")
            {
                AccType = "Saving";


            }
            else if (objlist.TblAccType == "103")
            {
                AccType = "Compulsory";
            }
            else if (objlist.TblAccType == "111")
            {
                AccType = "LIC";
            }
            else if (objlist.TblAccType == "105")
            {
                AccType = "LN";
            }
            kssss = 0;
            ctr = 0;
            FDate = DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture);

            using (SqlConnection CN = new SqlConnection(Connection))
            {
                if (objlist.TblRowNo == 0)
                {

                    AppTransactionNoClass app = new AppTransactionNoClass();
                    appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                    AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                    MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "J", objlist.FyId);
                    MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);


                }


                if (objlist.TblAccType == "105")
                {
                    CN.Open();
                    using (SqlCommand cmd = new SqlCommand("select LedgerId,PenalityLedger,InterestAmt From LoanPenalityAmt where CompID = @CompID AND BranchID = @BranchID AND  InterestAmt >0", CN))
                    {
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        SqlDataReader dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            LedgerAccNo[kssss] = dr["LedgerId"].ToString();
                            PenLed = dr["PenalityLedger"].ToString();
                            penamt[kssss] = dr["InterestAmt"].ToString();
                            kssss++;
                        }
                        dr.Close();
                        CN.Close();

                    }
                    CN.Close();

                    AppTransactionNoClass App = new AppTransactionNoClass();
                    for (int rk = 0; rk < LedgerAccNo.Length; rk++)
                    {

                        if (LedgerAccNo[rk] == null)
                        {
                            break;
                        }
                        App.InsertVoucher("J", "Debit", FDate.ToString(), Convert.ToDouble(penamt[rk]), "", "", "", "To " + PenLed, LedgerAccNo[rk], MaxVNoO, objlist.FyId, 0, "", objlist.UserId, FDate.ToString(), "For Penality Charges", PenLed, objlist.Compid, objlist.BranchID, appmax, "", "", MaxRecNo);
                        App.InsertVoucher("J", "Credit", FDate.ToString(), Convert.ToDouble(penamt[rk]), "", "", "", "By " + LedgerAccNo[rk], PenLed, MaxVNoO, objlist.FyId, 0, "", objlist.UserId, FDate.ToString(), "For Penality Charges", LedgerAccNo[rk], objlist.Compid, objlist.BranchID, appmax, "", "", MaxRecNo);


                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("DELETE FROM LoanPenalityAmt where CompID = @CompID AND BranchID = @BranchID AND LedgerId=@LedgerId", CN))
                        {
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@LedgerId", LedgerAccNo[rk]);
                            cmd.ExecuteNonQuery();

                        }
                        CN.Close();

                    }
                    CN.Open();
                    using (SqlCommand cmd = new SqlCommand("sp_FindLdNameLedgerId", CN))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        cmd.Parameters.AddWithValue("@SubGroupCode", objlist.TblAccType);
                        SqlDataReader dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            LdNAme[ctr] = dr["LdName"].ToString();
                            LoanLedger[ctr] = dr["InterestLedger"].ToString();
                            PlanId[ctr] = dr["PlaneId"].ToString();
                            ctr++;
                        }

                        dr.Close();
                    }
                    CN.Close();


                    for (int i = 0; i < ctr; i++)
                    {
                        ClosingBal = 0;

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("GetLoanIntLedClosing", CN))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@SubGroupCode", objlist.TblAccType);
                            cmd.Parameters.AddWithValue("@LoanType", PlanId[i]);
                            SqlDataReader dr = cmd.ExecuteReader();
                            if (dr.Read())
                            {
                                ClosingBal = Math.Round(Convert.ToDouble(dr["Int"]), 0);
                            }
                            dr.Close();
                        }
                        CN.Close();

                        if (ClosingBal > 0)
                        {

                            CN.Open();

                            using (SqlCommand cmd = new SqlCommand("sp_InsertCommulativeShort", CN))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.CommandTimeout = 6000;
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Parameters.AddWithValue("@Particular", "To " + LdNAme[i]);
                                cmd.Parameters.AddWithValue("@PlaneId", PlanId[i]);
                                cmd.Parameters.AddWithValue("@ParticularId", LoanLedger[i]);
                                cmd.Parameters.AddWithValue("@FYID", objlist.FyId);
                                cmd.Parameters.AddWithValue("@FromDate", FDate);
                                cmd.Parameters.AddWithValue("@ToDate", FDate);
                                cmd.Parameters.AddWithValue("@DateTime", FDate);
                                cmd.Parameters.AddWithValue("@AccType", objlist.TblAccType);
                                cmd.Parameters.AddWithValue("@TotalInt", ClosingBal);
                                cmd.Parameters.AddWithValue("@UserId", objlist.UserId);

                                cmd.Parameters.AddWithValue("@TransferTo", "");
                                RowAffect = cmd.ExecuteNonQuery();
                            }

                            CN.Close();
                        }

                        //CN.Open();

                        //using (SqlCommand cmd = new SqlCommand("sp_DeleteInterestSave", CN))
                        //{
                        //    cmd.CommandType = CommandType.StoredProcedure;
                        //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                        //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                        //    cmd.Parameters.AddWithValue("@AccType", "105");
                        //}

                        //CN.Close();


                    }





                }
                else
                {

                    if (objlist.ShareQty == "" || objlist.ShareQty == null)
                    {

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("sp_FindLdNameLedgerId", CN))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@SubGroupCode", objlist.TblAccType);
                            SqlDataReader dr = cmd.ExecuteReader();
                            while (dr.Read())
                            {
                                InstLdName = dr["LdName"].ToString();
                                InstLedger = dr["InterestLedger"].ToString();
                                PlaneId = dr["PlaneId"].ToString();

                            }

                            dr.Close();
                        }
                        CN.Close();

                        if (InstLedger == null || InstLedger == "")
                        {


                        }
                        else
                        {

                            CN.Open();
                            using (SqlCommand cmd = new SqlCommand("sp_getInterestTotal", CN))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@AccType", objlist.TblAccType);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccType);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@ctr", "");
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);

                                SqlDataReader dr = cmd.ExecuteReader();
                                while (dr.Read())
                                {
                                    if (dr["TotalInt"].ToString() == null || dr["TotalInt"].ToString() == "")
                                    {
                                        ClosingBal = 0;
                                    }
                                    else
                                    {
                                        ClosingBal = Convert.ToDouble(dr["TotalInt"].ToString());
                                    }


                                }


                                dr.Close();
                            }
                            CN.Close();



                            if (ClosingBal > 0)
                            {

                                CN.Open();

                                using (SqlCommand cmd = new SqlCommand("sp_InsertCommulativeShort", CN))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.CommandTimeout = 6000;
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.ClNature);
                                    cmd.Parameters.AddWithValue("@PlaneId", PlaneId);
                                    cmd.Parameters.AddWithValue("@ParticularId", InstLedger);
                                    cmd.Parameters.AddWithValue("@FYID", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@FromDate", FDate);
                                    cmd.Parameters.AddWithValue("@ToDate", FDate);
                                    cmd.Parameters.AddWithValue("@DateTime", FDate);
                                    cmd.Parameters.AddWithValue("@AccType", objlist.TblAccType);
                                    //cmd.Parameters.AddWithValue("@TotalInt", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@TotalInt", ClosingBal);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);

                                    cmd.Parameters.AddWithValue("@TransferTo", "");

                                    RowAffect = cmd.ExecuteNonQuery();
                                }

                                CN.Close();
                            }

                            //CN.Open();

                            //using (SqlCommand cmd = new SqlCommand("sp_DeleteInterestSave", CN))
                            //{
                            //    cmd.CommandType = CommandType.StoredProcedure;
                            //    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            //    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            //    cmd.Parameters.AddWithValue("@AccType", objlist.TblAccType);
                            //}

                            //CN.Close();
                        }




                    }
                    else
                    {

                        CN.Open();
                        using (SqlCommand cmd = new SqlCommand("sp_FindLdNameLedgerId", CN))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                            cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                            cmd.Parameters.AddWithValue("@SubGroupCode", objlist.ShareQty);
                            SqlDataReader dr = cmd.ExecuteReader();
                            while (dr.Read())
                            {
                                InstLdName = dr["LdName"].ToString();
                                InstLedger = dr["InterestLedger"].ToString();
                                PlaneId = dr["PlaneId"].ToString();

                            }

                            dr.Close();
                        }
                        CN.Close();

                        if (InstLedger == null || InstLedger == "")
                        {


                        }
                        else
                        {

                            CN.Open();
                            using (SqlCommand cmd = new SqlCommand("sp_getInterestTotal", CN))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@AccType", objlist.TblAccType);
                                cmd.Parameters.AddWithValue("@AccNo", objlist.TblAccType);
                                cmd.Parameters.AddWithValue("@FyId", objlist.FyId);
                                cmd.Parameters.AddWithValue("@ctr", "");
                                cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);

                                SqlDataReader dr = cmd.ExecuteReader();
                                while (dr.Read())
                                {
                                    if (dr["TotalInt"].ToString() == null || dr["TotalInt"].ToString() == "")
                                    {
                                        ClosingBal = 0;
                                    }
                                    else
                                    {
                                        ClosingBal = Convert.ToDouble(dr["TotalInt"].ToString());
                                    }


                                }


                                dr.Close();
                            }
                            CN.Close();



                            if (ClosingBal > 0)
                            {

                                CN.Open();

                                using (SqlCommand cmd = new SqlCommand("sp_InsertCommulativeShort", CN))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.CommandTimeout = 6000;
                                    cmd.Parameters.AddWithValue("@CompID", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Parameters.AddWithValue("@Particular", "By " + objlist.ShareRate);
                                    cmd.Parameters.AddWithValue("@PlaneId", PlaneId);
                                    cmd.Parameters.AddWithValue("@ParticularId", InstLedger);
                                    cmd.Parameters.AddWithValue("@FYID", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@FromDate", FDate);
                                    cmd.Parameters.AddWithValue("@ToDate", FDate);
                                    cmd.Parameters.AddWithValue("@DateTime", FDate);
                                    cmd.Parameters.AddWithValue("@AccType", objlist.TblAccType);
                                    //cmd.Parameters.AddWithValue("@TotalInt", objlist.MemberID);
                                    cmd.Parameters.AddWithValue("@TotalInt", ClosingBal);
                                    cmd.Parameters.AddWithValue("@UserId", objlist.UserId);

                                    cmd.Parameters.AddWithValue("@TransferTo", objlist.ShareQty);

                                    RowAffect = cmd.ExecuteNonQuery();
                                }

                                CN.Close();
                            }

                        }






                    }
                }

                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        if (objlist.BtnText == "SUBMIT")
                        {



                            con.Open();
                            objTrans = con.BeginTransaction();











                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }


                        }






                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }


        public static string UpdaeFyFrom;
       //   [Route("api/InsertFinancialYear")]
      //     [HttpPost]
        public List<FormSubmision> InsertFinancialYear(InsertReciept objlist)
        {
            int RowAffect = 0;

            if (objlist.BankName == null)
            {
                objlist.BankName = "";
            }
            if (objlist.BranchName == null)
            {
                objlist.BranchName = "";
            }
            if (objlist.ChequeNo == null)
            {
                objlist.ChequeNo = "";
            }
            if (objlist.ClosingBal == null)
            {
                objlist.ClosingBal = "0";
            }
            if (objlist.InstAmt == null)
            {
                objlist.InstAmt = "0";
            }
            if (objlist.MaturityAmt == null)
            {
                objlist.MaturityAmt = "0";
            }
            if (objlist.Narration == null)
            {
                objlist.Narration = "";
            }
            if (objlist.Particuler == null)
            {
                objlist.Particuler = "";
            }
            if (objlist.ShareQty == null)
            {
                objlist.ShareQty = "0";
            }
            if (objlist.ShareRate == null || objlist.ShareRate == "")
            {
                objlist.ShareRate = "0";
            }
            if (objlist.TblInsAmt == null)
            {
                objlist.TblInsAmt = "0";
            }
            if (objlist.TotalDebitAmt == null)
            {
                objlist.TotalDebitAmt = "0";
            }
            if (objlist.VNoMemberID == null)
            {
                objlist.VNoMemberID = "";
            }
            if (objlist.VNoLoanID == null)
            {
                objlist.VNoLoanID = "";
            }



            using (SqlConnection CN = new SqlConnection(Connection))
            {


                if (objlist.TblRowNo == 0)
                {

                    AppTransactionNoClass app = new AppTransactionNoClass();
                    appmax = app.Max_AppTransactionNo(objlist.Compid, objlist.FyId, objlist.BranchID);
                    AppTransSrNo = app.Max_AppTransactionSrNo(objlist.Compid, objlist.FyId, objlist.BranchID);

                    MaxVNoO = app.GetMaxVNoFy(objlist.Compid, objlist.BranchID, "R", objlist.FyId);
                    MaxRecNo = app.GetMaxRecieptNo(objlist.Compid, objlist.BranchID, objlist.FyId);
                    MaxFyID = app.GetMaxFyID(objlist.Compid, objlist.BranchID);

                    UpdaeFyFrom = objlist.TotalDebitAmt;

                }



                CN.Open();
                using (SqlCommand cmd = new SqlCommand("truncate table VoucherFyId", CN))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                }
                CN.Close();



                CN.Open();
                using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearOld", CN))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Fyid", objlist.FyId);
                    cmd.Parameters.AddWithValue("@ToDate", DateTime.ParseExact(objlist.RecieptDate, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                    cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                    cmd.CommandTimeout = 120;
                    cmd.ExecuteNonQuery();

                }
                CN.Close();



                CN.Open();
                using (SqlCommand cmd = new SqlCommand("UPDATE VoucherFyId SET Fyid = @Fyid,Particular = @Particular,Vdate = @Vdate where CompId = @CompId and BranchID = @BranchID and AppTransNo = @appmax", CN))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("@Fyid", MaxFyID);
                    cmd.Parameters.AddWithValue("@Particular", "Opening Balance For " + objlist.Particuler);
                    cmd.Parameters.AddWithValue("@Vdate", DateTime.ParseExact(UpdaeFyFrom, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                    cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                    cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                    cmd.Parameters.AddWithValue("@appmax", appmax);
                    int RowAffected = cmd.ExecuteNonQuery();

                }
                CN.Close();

                using (SqlConnection con = new SqlConnection(Connection))
                {
                    SqlTransaction objTrans = null;



                    try
                    {
                        if (objlist.BtnText == "SUBMIT")
                        {



                            con.Open();
                            objTrans = con.BeginTransaction();






                            if (objlist.TblRowNo == 0)
                            {




                                using (SqlCommand cmd = new SqlCommand("UpdateStatusFinancialYear", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@Fyid", objlist.FyId);
                                    cmd.Parameters.AddWithValue("@Status", "InActive");
                                    //cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }
                                using (SqlCommand cmd = new SqlCommand("InsertFinancialYear", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("@FyYearFrom", DateTime.ParseExact(objlist.TotalDebitAmt, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@FyYearTo", DateTime.ParseExact(objlist.TotalCreditAmt, @"dd-MM-yyyy", CultureInfo.InvariantCulture));
                                    cmd.Parameters.AddWithValue("@Status", "Active");
                                    cmd.Parameters.AddWithValue("@Fyid", MaxFyID);
                                    cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                                    cmd.Parameters.AddWithValue("@BranchID", "1");
                                    cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                    cmd.Transaction = objTrans;
                                    RowAffect = cmd.ExecuteNonQuery();

                                }



                            }


                            using (SqlCommand cmd = new SqlCommand("SP_InsertForFinenancialYearToFinal", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("@CompId", objlist.Compid);
                                cmd.Parameters.AddWithValue("@BranchID", objlist.BranchID);
                                cmd.Parameters.AddWithValue("@AppTransNo", appmax);
                                cmd.Transaction = objTrans;
                                RowAffect = cmd.ExecuteNonQuery();

                            }


                            if (RowAffect > 0)
                            {
                                AppTransactionNoClass appt = new AppTransactionNoClass();
                                int wer = appt.Insert_AppTransaction("O", appmax, objlist.Compid, objlist.FyId, objlist.BranchID, "", AppTransSrNo);
                                objTrans.Commit();
                            }


                        }






                    }
                    catch (Exception ex)
                    {

                        objTrans.Rollback();

                    }
                    finally
                    {

                    }


                }

            }




            List<FormSubmision> objDept = new List<FormSubmision>();
            objDept.Add(new FormSubmision
            {
                ReturnStaus = "True",
                SendVNo = MaxVNoO,

                ReturnVNo = MaxVNoO,
                ReturnRecieptNo = MaxRecNo,

            });
            return objDept;
        }

    }
}